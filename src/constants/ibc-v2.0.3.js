/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from 'protobufjs/minimal';

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const ibc = $root.ibc = (() => {

    /**
     * Namespace ibc.
     * @exports ibc
     * @namespace
     */
    const ibc = {};

    ibc.applications = (function() {

        /**
         * Namespace applications.
         * @memberof ibc
         * @namespace
         */
        const applications = {};

        applications.transfer = (function() {

            /**
             * Namespace transfer.
             * @memberof ibc.applications
             * @namespace
             */
            const transfer = {};

            transfer.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.applications.transfer
                 * @namespace
                 */
                const v1 = {};

                v1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Callback as used by {@link ibc.applications.transfer.v1.Msg#transfer}.
                     * @memberof ibc.applications.transfer.v1.Msg
                     * @typedef TransferCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.applications.transfer.v1.MsgTransferResponse} [response] MsgTransferResponse
                     */

                    /**
                     * Calls Transfer.
                     * @function transfer
                     * @memberof ibc.applications.transfer.v1.Msg
                     * @instance
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} request MsgTransfer message or plain object
                     * @param {ibc.applications.transfer.v1.Msg.TransferCallback} callback Node-style callback called with the error, if any, and MsgTransferResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.transfer = function transfer(request, callback) {
                        return this.rpcCall(transfer, $root.ibc.applications.transfer.v1.MsgTransfer, $root.ibc.applications.transfer.v1.MsgTransferResponse, request, callback);
                    }, "name", { value: "Transfer" });

                    /**
                     * Calls Transfer.
                     * @function transfer
                     * @memberof ibc.applications.transfer.v1.Msg
                     * @instance
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} request MsgTransfer message or plain object
                     * @returns {Promise<ibc.applications.transfer.v1.MsgTransferResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1.MsgTransfer = (function() {

                    /**
                     * Properties of a MsgTransfer.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IMsgTransfer
                     * @property {string|null} [source_port] MsgTransfer source_port
                     * @property {string|null} [source_channel] MsgTransfer source_channel
                     * @property {cosmos.base.v1beta1.ICoin|null} [token] MsgTransfer token
                     * @property {string|null} [sender] MsgTransfer sender
                     * @property {string|null} [receiver] MsgTransfer receiver
                     * @property {ibc.core.client.v1.IHeight|null} [timeout_height] MsgTransfer timeout_height
                     * @property {Long|null} [timeout_timestamp] MsgTransfer timeout_timestamp
                     */

                    /**
                     * Constructs a new MsgTransfer.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a MsgTransfer.
                     * @implements IMsgTransfer
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IMsgTransfer=} [properties] Properties to set
                     */
                    function MsgTransfer(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgTransfer source_port.
                     * @member {string} source_port
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.source_port = "";

                    /**
                     * MsgTransfer source_channel.
                     * @member {string} source_channel
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.source_channel = "";

                    /**
                     * MsgTransfer token.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} token
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.token = null;

                    /**
                     * MsgTransfer sender.
                     * @member {string} sender
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.sender = "";

                    /**
                     * MsgTransfer receiver.
                     * @member {string} receiver
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.receiver = "";

                    /**
                     * MsgTransfer timeout_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} timeout_height
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.timeout_height = null;

                    /**
                     * MsgTransfer timeout_timestamp.
                     * @member {Long} timeout_timestamp
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified MsgTransfer message. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransfer.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} message MsgTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransfer.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.source_port != null && Object.hasOwnProperty.call(message, "source_port"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.source_port);
                        if (message.source_channel != null && Object.hasOwnProperty.call(message, "source_channel"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_channel);
                        if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.token, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.sender);
                        if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.receiver);
                        if (message.timeout_height != null && Object.hasOwnProperty.call(message, "timeout_height"))
                            $root.ibc.core.client.v1.Height.encode(message.timeout_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.timeout_timestamp != null && Object.hasOwnProperty.call(message, "timeout_timestamp"))
                            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.timeout_timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTransfer message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransfer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} message MsgTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTransfer message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.MsgTransfer} MsgTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransfer.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.MsgTransfer();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.source_port = reader.string();
                                break;
                            case 2:
                                message.source_channel = reader.string();
                                break;
                            case 3:
                                message.token = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.sender = reader.string();
                                break;
                            case 5:
                                message.receiver = reader.string();
                                break;
                            case 6:
                                message.timeout_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.timeout_timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTransfer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.MsgTransfer} MsgTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTransfer message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTransfer.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.source_port != null && message.hasOwnProperty("source_port"))
                            if (!$util.isString(message.source_port))
                                return "source_port: string expected";
                        if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                            if (!$util.isString(message.source_channel))
                                return "source_channel: string expected";
                        if (message.token != null && message.hasOwnProperty("token")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.token);
                            if (error)
                                return "token." + error;
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.receiver != null && message.hasOwnProperty("receiver"))
                            if (!$util.isString(message.receiver))
                                return "receiver: string expected";
                        if (message.timeout_height != null && message.hasOwnProperty("timeout_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.timeout_height);
                            if (error)
                                return "timeout_height." + error;
                        }
                        if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                            if (!$util.isInteger(message.timeout_timestamp) && !(message.timeout_timestamp && $util.isInteger(message.timeout_timestamp.low) && $util.isInteger(message.timeout_timestamp.high)))
                                return "timeout_timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTransfer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.MsgTransfer} MsgTransfer
                     */
                    MsgTransfer.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.MsgTransfer)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.MsgTransfer();
                        if (object.source_port != null)
                            message.source_port = String(object.source_port);
                        if (object.source_channel != null)
                            message.source_channel = String(object.source_channel);
                        if (object.token != null) {
                            if (typeof object.token !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.MsgTransfer.token: object expected");
                            message.token = $root.cosmos.base.v1beta1.Coin.fromObject(object.token);
                        }
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.receiver != null)
                            message.receiver = String(object.receiver);
                        if (object.timeout_height != null) {
                            if (typeof object.timeout_height !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.MsgTransfer.timeout_height: object expected");
                            message.timeout_height = $root.ibc.core.client.v1.Height.fromObject(object.timeout_height);
                        }
                        if (object.timeout_timestamp != null)
                            if ($util.Long)
                                (message.timeout_timestamp = $util.Long.fromValue(object.timeout_timestamp)).unsigned = true;
                            else if (typeof object.timeout_timestamp === "string")
                                message.timeout_timestamp = parseInt(object.timeout_timestamp, 10);
                            else if (typeof object.timeout_timestamp === "number")
                                message.timeout_timestamp = object.timeout_timestamp;
                            else if (typeof object.timeout_timestamp === "object")
                                message.timeout_timestamp = new $util.LongBits(object.timeout_timestamp.low >>> 0, object.timeout_timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgTransfer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {ibc.applications.transfer.v1.MsgTransfer} message MsgTransfer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTransfer.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.source_port = "";
                            object.source_channel = "";
                            object.token = null;
                            object.sender = "";
                            object.receiver = "";
                            object.timeout_height = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timeout_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timeout_timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.source_port != null && message.hasOwnProperty("source_port"))
                            object.source_port = message.source_port;
                        if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                            object.source_channel = message.source_channel;
                        if (message.token != null && message.hasOwnProperty("token"))
                            object.token = $root.cosmos.base.v1beta1.Coin.toObject(message.token, options);
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.receiver != null && message.hasOwnProperty("receiver"))
                            object.receiver = message.receiver;
                        if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                            object.timeout_height = $root.ibc.core.client.v1.Height.toObject(message.timeout_height, options);
                        if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                            if (typeof message.timeout_timestamp === "number")
                                object.timeout_timestamp = options.longs === String ? String(message.timeout_timestamp) : message.timeout_timestamp;
                            else
                                object.timeout_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeout_timestamp) : options.longs === Number ? new $util.LongBits(message.timeout_timestamp.low >>> 0, message.timeout_timestamp.high >>> 0).toNumber(true) : message.timeout_timestamp;
                        return object;
                    };

                    /**
                     * Converts this MsgTransfer to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTransfer.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTransfer;
                })();

                v1.MsgTransferResponse = (function() {

                    /**
                     * Properties of a MsgTransferResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IMsgTransferResponse
                     */

                    /**
                     * Constructs a new MsgTransferResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a MsgTransferResponse.
                     * @implements IMsgTransferResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IMsgTransferResponse=} [properties] Properties to set
                     */
                    function MsgTransferResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgTransferResponse message. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransferResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransferResponse} message MsgTransferResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransferResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTransferResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransferResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransferResponse} message MsgTransferResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransferResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTransferResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.MsgTransferResponse} MsgTransferResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransferResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.MsgTransferResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTransferResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.MsgTransferResponse} MsgTransferResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransferResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTransferResponse message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTransferResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTransferResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.MsgTransferResponse} MsgTransferResponse
                     */
                    MsgTransferResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.MsgTransferResponse)
                            return object;
                        return new $root.ibc.applications.transfer.v1.MsgTransferResponse();
                    };

                    /**
                     * Creates a plain object from a MsgTransferResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.MsgTransferResponse} message MsgTransferResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTransferResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgTransferResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTransferResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTransferResponse;
                })();

                v1.DenomTrace = (function() {

                    /**
                     * Properties of a DenomTrace.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IDenomTrace
                     * @property {string|null} [path] DenomTrace path
                     * @property {string|null} [base_denom] DenomTrace base_denom
                     */

                    /**
                     * Constructs a new DenomTrace.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a DenomTrace.
                     * @implements IDenomTrace
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IDenomTrace=} [properties] Properties to set
                     */
                    function DenomTrace(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DenomTrace path.
                     * @member {string} path
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @instance
                     */
                    DenomTrace.prototype.path = "";

                    /**
                     * DenomTrace base_denom.
                     * @member {string} base_denom
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @instance
                     */
                    DenomTrace.prototype.base_denom = "";

                    /**
                     * Encodes the specified DenomTrace message. Does not implicitly {@link ibc.applications.transfer.v1.DenomTrace.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {ibc.applications.transfer.v1.IDenomTrace} message DenomTrace message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomTrace.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                        if (message.base_denom != null && Object.hasOwnProperty.call(message, "base_denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.base_denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified DenomTrace message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.DenomTrace.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {ibc.applications.transfer.v1.IDenomTrace} message DenomTrace message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomTrace.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DenomTrace message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomTrace.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.DenomTrace();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.string();
                                break;
                            case 2:
                                message.base_denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DenomTrace message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomTrace.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DenomTrace message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DenomTrace.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!$util.isString(message.path))
                                return "path: string expected";
                        if (message.base_denom != null && message.hasOwnProperty("base_denom"))
                            if (!$util.isString(message.base_denom))
                                return "base_denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a DenomTrace message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                     */
                    DenomTrace.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.DenomTrace)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.DenomTrace();
                        if (object.path != null)
                            message.path = String(object.path);
                        if (object.base_denom != null)
                            message.base_denom = String(object.base_denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a DenomTrace message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {ibc.applications.transfer.v1.DenomTrace} message DenomTrace
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DenomTrace.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.path = "";
                            object.base_denom = "";
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = message.path;
                        if (message.base_denom != null && message.hasOwnProperty("base_denom"))
                            object.base_denom = message.base_denom;
                        return object;
                    };

                    /**
                     * Converts this DenomTrace to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DenomTrace.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DenomTrace;
                })();

                v1.Params = (function() {

                    /**
                     * Properties of a Params.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IParams
                     * @property {boolean|null} [send_enabled] Params send_enabled
                     * @property {boolean|null} [receive_enabled] Params receive_enabled
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Params send_enabled.
                     * @member {boolean} send_enabled
                     * @memberof ibc.applications.transfer.v1.Params
                     * @instance
                     */
                    Params.prototype.send_enabled = false;

                    /**
                     * Params receive_enabled.
                     * @member {boolean} receive_enabled
                     * @memberof ibc.applications.transfer.v1.Params
                     * @instance
                     */
                    Params.prototype.receive_enabled = false;

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link ibc.applications.transfer.v1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {ibc.applications.transfer.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.send_enabled != null && Object.hasOwnProperty.call(message, "send_enabled"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.send_enabled);
                        if (message.receive_enabled != null && Object.hasOwnProperty.call(message, "receive_enabled"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.receive_enabled);
                        return writer;
                    };

                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {ibc.applications.transfer.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.Params();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.send_enabled = reader.bool();
                                break;
                            case 2:
                                message.receive_enabled = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.send_enabled != null && message.hasOwnProperty("send_enabled"))
                            if (typeof message.send_enabled !== "boolean")
                                return "send_enabled: boolean expected";
                        if (message.receive_enabled != null && message.hasOwnProperty("receive_enabled"))
                            if (typeof message.receive_enabled !== "boolean")
                                return "receive_enabled: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.Params)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.Params();
                        if (object.send_enabled != null)
                            message.send_enabled = Boolean(object.send_enabled);
                        if (object.receive_enabled != null)
                            message.receive_enabled = Boolean(object.receive_enabled);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {ibc.applications.transfer.v1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.send_enabled = false;
                            object.receive_enabled = false;
                        }
                        if (message.send_enabled != null && message.hasOwnProperty("send_enabled"))
                            object.send_enabled = message.send_enabled;
                        if (message.receive_enabled != null && message.hasOwnProperty("receive_enabled"))
                            object.receive_enabled = message.receive_enabled;
                        return object;
                    };

                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Params;
                })();

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.applications.transfer.v1.Query#denomTrace}.
                     * @memberof ibc.applications.transfer.v1.Query
                     * @typedef DenomTraceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.applications.transfer.v1.QueryDenomTraceResponse} [response] QueryDenomTraceResponse
                     */

                    /**
                     * Calls DenomTrace.
                     * @function denomTrace
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} request QueryDenomTraceRequest message or plain object
                     * @param {ibc.applications.transfer.v1.Query.DenomTraceCallback} callback Node-style callback called with the error, if any, and QueryDenomTraceResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.denomTrace = function denomTrace(request, callback) {
                        return this.rpcCall(denomTrace, $root.ibc.applications.transfer.v1.QueryDenomTraceRequest, $root.ibc.applications.transfer.v1.QueryDenomTraceResponse, request, callback);
                    }, "name", { value: "DenomTrace" });

                    /**
                     * Calls DenomTrace.
                     * @function denomTrace
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} request QueryDenomTraceRequest message or plain object
                     * @returns {Promise<ibc.applications.transfer.v1.QueryDenomTraceResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.applications.transfer.v1.Query#denomTraces}.
                     * @memberof ibc.applications.transfer.v1.Query
                     * @typedef DenomTracesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.applications.transfer.v1.QueryDenomTracesResponse} [response] QueryDenomTracesResponse
                     */

                    /**
                     * Calls DenomTraces.
                     * @function denomTraces
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} request QueryDenomTracesRequest message or plain object
                     * @param {ibc.applications.transfer.v1.Query.DenomTracesCallback} callback Node-style callback called with the error, if any, and QueryDenomTracesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.denomTraces = function denomTraces(request, callback) {
                        return this.rpcCall(denomTraces, $root.ibc.applications.transfer.v1.QueryDenomTracesRequest, $root.ibc.applications.transfer.v1.QueryDenomTracesResponse, request, callback);
                    }, "name", { value: "DenomTraces" });

                    /**
                     * Calls DenomTraces.
                     * @function denomTraces
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} request QueryDenomTracesRequest message or plain object
                     * @returns {Promise<ibc.applications.transfer.v1.QueryDenomTracesResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.applications.transfer.v1.Query#params}.
                     * @memberof ibc.applications.transfer.v1.Query
                     * @typedef ParamsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.applications.transfer.v1.QueryParamsResponse} [response] QueryParamsResponse
                     */

                    /**
                     * Calls Params.
                     * @function params
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                     * @param {ibc.applications.transfer.v1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.params = function params(request, callback) {
                        return this.rpcCall(params, $root.ibc.applications.transfer.v1.QueryParamsRequest, $root.ibc.applications.transfer.v1.QueryParamsResponse, request, callback);
                    }, "name", { value: "Params" });

                    /**
                     * Calls Params.
                     * @function params
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                     * @returns {Promise<ibc.applications.transfer.v1.QueryParamsResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryDenomTraceRequest = (function() {

                    /**
                     * Properties of a QueryDenomTraceRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTraceRequest
                     * @property {string|null} [hash] QueryDenomTraceRequest hash
                     */

                    /**
                     * Constructs a new QueryDenomTraceRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTraceRequest.
                     * @implements IQueryDenomTraceRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest=} [properties] Properties to set
                     */
                    function QueryDenomTraceRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryDenomTraceRequest hash.
                     * @member {string} hash
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @instance
                     */
                    QueryDenomTraceRequest.prototype.hash = "";

                    /**
                     * Encodes the specified QueryDenomTraceRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} message QueryDenomTraceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryDenomTraceRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} message QueryDenomTraceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryDenomTraceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTraceRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.hash = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryDenomTraceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryDenomTraceRequest message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomTraceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            if (!$util.isString(message.hash))
                                return "hash: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryDenomTraceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                     */
                    QueryDenomTraceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTraceRequest)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryDenomTraceRequest();
                        if (object.hash != null)
                            message.hash = String(object.hash);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryDenomTraceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryDenomTraceRequest} message QueryDenomTraceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomTraceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.hash = "";
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            object.hash = message.hash;
                        return object;
                    };

                    /**
                     * Converts this QueryDenomTraceRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomTraceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryDenomTraceRequest;
                })();

                v1.QueryDenomTraceResponse = (function() {

                    /**
                     * Properties of a QueryDenomTraceResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTraceResponse
                     * @property {ibc.applications.transfer.v1.IDenomTrace|null} [denom_trace] QueryDenomTraceResponse denom_trace
                     */

                    /**
                     * Constructs a new QueryDenomTraceResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTraceResponse.
                     * @implements IQueryDenomTraceResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse=} [properties] Properties to set
                     */
                    function QueryDenomTraceResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryDenomTraceResponse denom_trace.
                     * @member {ibc.applications.transfer.v1.IDenomTrace|null|undefined} denom_trace
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @instance
                     */
                    QueryDenomTraceResponse.prototype.denom_trace = null;

                    /**
                     * Encodes the specified QueryDenomTraceResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse} message QueryDenomTraceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom_trace != null && Object.hasOwnProperty.call(message, "denom_trace"))
                            $root.ibc.applications.transfer.v1.DenomTrace.encode(message.denom_trace, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryDenomTraceResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse} message QueryDenomTraceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryDenomTraceResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTraceResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryDenomTraceResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryDenomTraceResponse message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomTraceResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom_trace != null && message.hasOwnProperty("denom_trace")) {
                            let error = $root.ibc.applications.transfer.v1.DenomTrace.verify(message.denom_trace);
                            if (error)
                                return "denom_trace." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryDenomTraceResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                     */
                    QueryDenomTraceResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTraceResponse)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryDenomTraceResponse();
                        if (object.denom_trace != null) {
                            if (typeof object.denom_trace !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace: object expected");
                            message.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.fromObject(object.denom_trace);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryDenomTraceResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryDenomTraceResponse} message QueryDenomTraceResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomTraceResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.denom_trace = null;
                        if (message.denom_trace != null && message.hasOwnProperty("denom_trace"))
                            object.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.toObject(message.denom_trace, options);
                        return object;
                    };

                    /**
                     * Converts this QueryDenomTraceResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomTraceResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryDenomTraceResponse;
                })();

                v1.QueryDenomTracesRequest = (function() {

                    /**
                     * Properties of a QueryDenomTracesRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTracesRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDenomTracesRequest pagination
                     */

                    /**
                     * Constructs a new QueryDenomTracesRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTracesRequest.
                     * @implements IQueryDenomTracesRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest=} [properties] Properties to set
                     */
                    function QueryDenomTracesRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryDenomTracesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @instance
                     */
                    QueryDenomTracesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryDenomTracesRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} message QueryDenomTracesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryDenomTracesRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} message QueryDenomTracesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryDenomTracesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTracesRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryDenomTracesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryDenomTracesRequest message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomTracesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryDenomTracesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                     */
                    QueryDenomTracesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTracesRequest)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryDenomTracesRequest();
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryDenomTracesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryDenomTracesRequest} message QueryDenomTracesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomTracesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.pagination = null;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryDenomTracesRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomTracesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryDenomTracesRequest;
                })();

                v1.QueryDenomTracesResponse = (function() {

                    /**
                     * Properties of a QueryDenomTracesResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTracesResponse
                     * @property {Array.<ibc.applications.transfer.v1.IDenomTrace>|null} [denom_traces] QueryDenomTracesResponse denom_traces
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDenomTracesResponse pagination
                     */

                    /**
                     * Constructs a new QueryDenomTracesResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTracesResponse.
                     * @implements IQueryDenomTracesResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse=} [properties] Properties to set
                     */
                    function QueryDenomTracesResponse(properties) {
                        this.denom_traces = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryDenomTracesResponse denom_traces.
                     * @member {Array.<ibc.applications.transfer.v1.IDenomTrace>} denom_traces
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @instance
                     */
                    QueryDenomTracesResponse.prototype.denom_traces = $util.emptyArray;

                    /**
                     * QueryDenomTracesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @instance
                     */
                    QueryDenomTracesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryDenomTracesResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse} message QueryDenomTracesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom_traces != null && message.denom_traces.length)
                            for (let i = 0; i < message.denom_traces.length; ++i)
                                $root.ibc.applications.transfer.v1.DenomTrace.encode(message.denom_traces[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryDenomTracesResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse} message QueryDenomTracesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryDenomTracesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTracesResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.denom_traces && message.denom_traces.length))
                                    message.denom_traces = [];
                                message.denom_traces.push($root.ibc.applications.transfer.v1.DenomTrace.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryDenomTracesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryDenomTracesResponse message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomTracesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom_traces != null && message.hasOwnProperty("denom_traces")) {
                            if (!Array.isArray(message.denom_traces))
                                return "denom_traces: array expected";
                            for (let i = 0; i < message.denom_traces.length; ++i) {
                                let error = $root.ibc.applications.transfer.v1.DenomTrace.verify(message.denom_traces[i]);
                                if (error)
                                    return "denom_traces." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryDenomTracesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                     */
                    QueryDenomTracesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTracesResponse)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryDenomTracesResponse();
                        if (object.denom_traces) {
                            if (!Array.isArray(object.denom_traces))
                                throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces: array expected");
                            message.denom_traces = [];
                            for (let i = 0; i < object.denom_traces.length; ++i) {
                                if (typeof object.denom_traces[i] !== "object")
                                    throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces: object expected");
                                message.denom_traces[i] = $root.ibc.applications.transfer.v1.DenomTrace.fromObject(object.denom_traces[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryDenomTracesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryDenomTracesResponse} message QueryDenomTracesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomTracesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.denom_traces = [];
                        if (options.defaults)
                            object.pagination = null;
                        if (message.denom_traces && message.denom_traces.length) {
                            object.denom_traces = [];
                            for (let j = 0; j < message.denom_traces.length; ++j)
                                object.denom_traces[j] = $root.ibc.applications.transfer.v1.DenomTrace.toObject(message.denom_traces[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryDenomTracesResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomTracesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryDenomTracesResponse;
                })();

                v1.QueryParamsRequest = (function() {

                    /**
                     * Properties of a QueryParamsRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryParamsRequest
                     */

                    /**
                     * Constructs a new QueryParamsRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryParamsRequest.
                     * @implements IQueryParamsRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest=} [properties] Properties to set
                     */
                    function QueryParamsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified QueryParamsRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryParamsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryParamsRequest message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryParamsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                     */
                    QueryParamsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryParamsRequest)
                            return object;
                        return new $root.ibc.applications.transfer.v1.QueryParamsRequest();
                    };

                    /**
                     * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryParamsRequest} message QueryParamsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryParamsRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryParamsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryParamsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryParamsRequest;
                })();

                v1.QueryParamsResponse = (function() {

                    /**
                     * Properties of a QueryParamsResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryParamsResponse
                     * @property {ibc.applications.transfer.v1.IParams|null} [params] QueryParamsResponse params
                     */

                    /**
                     * Constructs a new QueryParamsResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryParamsResponse.
                     * @implements IQueryParamsResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryParamsResponse=} [properties] Properties to set
                     */
                    function QueryParamsResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryParamsResponse params.
                     * @member {ibc.applications.transfer.v1.IParams|null|undefined} params
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @instance
                     */
                    QueryParamsResponse.prototype.params = null;

                    /**
                     * Encodes the specified QueryParamsResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.applications.transfer.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryParamsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.params = $root.ibc.applications.transfer.v1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryParamsResponse message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryParamsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.applications.transfer.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                     */
                    QueryParamsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryParamsResponse)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryParamsResponse();
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.QueryParamsResponse.params: object expected");
                            message.params = $root.ibc.applications.transfer.v1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryParamsResponse} message QueryParamsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryParamsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.params = null;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.applications.transfer.v1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this QueryParamsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryParamsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryParamsResponse;
                })();

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IGenesisState
                     * @property {string|null} [port_id] GenesisState port_id
                     * @property {Array.<ibc.applications.transfer.v1.IDenomTrace>|null} [denom_traces] GenesisState denom_traces
                     * @property {ibc.applications.transfer.v1.IParams|null} [params] GenesisState params
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.denom_traces = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState port_id.
                     * @member {string} port_id
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.port_id = "";

                    /**
                     * GenesisState denom_traces.
                     * @member {Array.<ibc.applications.transfer.v1.IDenomTrace>} denom_traces
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.denom_traces = $util.emptyArray;

                    /**
                     * GenesisState params.
                     * @member {ibc.applications.transfer.v1.IParams|null|undefined} params
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.applications.transfer.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {ibc.applications.transfer.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.denom_traces != null && message.denom_traces.length)
                            for (let i = 0; i < message.denom_traces.length; ++i)
                                $root.ibc.applications.transfer.v1.DenomTrace.encode(message.denom_traces[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.applications.transfer.v1.Params.encode(message.params, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {ibc.applications.transfer.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                if (!(message.denom_traces && message.denom_traces.length))
                                    message.denom_traces = [];
                                message.denom_traces.push($root.ibc.applications.transfer.v1.DenomTrace.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.params = $root.ibc.applications.transfer.v1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.denom_traces != null && message.hasOwnProperty("denom_traces")) {
                            if (!Array.isArray(message.denom_traces))
                                return "denom_traces: array expected";
                            for (let i = 0; i < message.denom_traces.length; ++i) {
                                let error = $root.ibc.applications.transfer.v1.DenomTrace.verify(message.denom_traces[i]);
                                if (error)
                                    return "denom_traces." + error;
                            }
                        }
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.applications.transfer.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.GenesisState();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.denom_traces) {
                            if (!Array.isArray(object.denom_traces))
                                throw TypeError(".ibc.applications.transfer.v1.GenesisState.denom_traces: array expected");
                            message.denom_traces = [];
                            for (let i = 0; i < object.denom_traces.length; ++i) {
                                if (typeof object.denom_traces[i] !== "object")
                                    throw TypeError(".ibc.applications.transfer.v1.GenesisState.denom_traces: object expected");
                                message.denom_traces[i] = $root.ibc.applications.transfer.v1.DenomTrace.fromObject(object.denom_traces[i]);
                            }
                        }
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.GenesisState.params: object expected");
                            message.params = $root.ibc.applications.transfer.v1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {ibc.applications.transfer.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.denom_traces = [];
                        if (options.defaults) {
                            object.port_id = "";
                            object.params = null;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.denom_traces && message.denom_traces.length) {
                            object.denom_traces = [];
                            for (let j = 0; j < message.denom_traces.length; ++j)
                                object.denom_traces[j] = $root.ibc.applications.transfer.v1.DenomTrace.toObject(message.denom_traces[j], options);
                        }
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.applications.transfer.v1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                return v1;
            })();

            transfer.v2 = (function() {

                /**
                 * Namespace v2.
                 * @memberof ibc.applications.transfer
                 * @namespace
                 */
                const v2 = {};

                v2.FungibleTokenPacketData = (function() {

                    /**
                     * Properties of a FungibleTokenPacketData.
                     * @memberof ibc.applications.transfer.v2
                     * @interface IFungibleTokenPacketData
                     * @property {string|null} [denom] FungibleTokenPacketData denom
                     * @property {string|null} [amount] FungibleTokenPacketData amount
                     * @property {string|null} [sender] FungibleTokenPacketData sender
                     * @property {string|null} [receiver] FungibleTokenPacketData receiver
                     */

                    /**
                     * Constructs a new FungibleTokenPacketData.
                     * @memberof ibc.applications.transfer.v2
                     * @classdesc Represents a FungibleTokenPacketData.
                     * @implements IFungibleTokenPacketData
                     * @constructor
                     * @param {ibc.applications.transfer.v2.IFungibleTokenPacketData=} [properties] Properties to set
                     */
                    function FungibleTokenPacketData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * FungibleTokenPacketData denom.
                     * @member {string} denom
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.denom = "";

                    /**
                     * FungibleTokenPacketData amount.
                     * @member {string} amount
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.amount = "";

                    /**
                     * FungibleTokenPacketData sender.
                     * @member {string} sender
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.sender = "";

                    /**
                     * FungibleTokenPacketData receiver.
                     * @member {string} receiver
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.receiver = "";

                    /**
                     * Encodes the specified FungibleTokenPacketData message. Does not implicitly {@link ibc.applications.transfer.v2.FungibleTokenPacketData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @static
                     * @param {ibc.applications.transfer.v2.IFungibleTokenPacketData} message FungibleTokenPacketData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FungibleTokenPacketData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.sender);
                        if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.receiver);
                        return writer;
                    };

                    /**
                     * Encodes the specified FungibleTokenPacketData message, length delimited. Does not implicitly {@link ibc.applications.transfer.v2.FungibleTokenPacketData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @static
                     * @param {ibc.applications.transfer.v2.IFungibleTokenPacketData} message FungibleTokenPacketData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FungibleTokenPacketData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a FungibleTokenPacketData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v2.FungibleTokenPacketData} FungibleTokenPacketData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FungibleTokenPacketData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v2.FungibleTokenPacketData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.amount = reader.string();
                                break;
                            case 3:
                                message.sender = reader.string();
                                break;
                            case 4:
                                message.receiver = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a FungibleTokenPacketData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v2.FungibleTokenPacketData} FungibleTokenPacketData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FungibleTokenPacketData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a FungibleTokenPacketData message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FungibleTokenPacketData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (!$util.isString(message.amount))
                                return "amount: string expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.receiver != null && message.hasOwnProperty("receiver"))
                            if (!$util.isString(message.receiver))
                                return "receiver: string expected";
                        return null;
                    };

                    /**
                     * Creates a FungibleTokenPacketData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v2.FungibleTokenPacketData} FungibleTokenPacketData
                     */
                    FungibleTokenPacketData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v2.FungibleTokenPacketData)
                            return object;
                        let message = new $root.ibc.applications.transfer.v2.FungibleTokenPacketData();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.amount != null)
                            message.amount = String(object.amount);
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.receiver != null)
                            message.receiver = String(object.receiver);
                        return message;
                    };

                    /**
                     * Creates a plain object from a FungibleTokenPacketData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @static
                     * @param {ibc.applications.transfer.v2.FungibleTokenPacketData} message FungibleTokenPacketData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FungibleTokenPacketData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.denom = "";
                            object.amount = "";
                            object.sender = "";
                            object.receiver = "";
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = message.amount;
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.receiver != null && message.hasOwnProperty("receiver"))
                            object.receiver = message.receiver;
                        return object;
                    };

                    /**
                     * Converts this FungibleTokenPacketData to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v2.FungibleTokenPacketData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FungibleTokenPacketData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return FungibleTokenPacketData;
                })();

                return v2;
            })();

            return transfer;
        })();

        return applications;
    })();

    ibc.core = (function() {

        /**
         * Namespace core.
         * @memberof ibc
         * @namespace
         */
        const core = {};

        core.client = (function() {

            /**
             * Namespace client.
             * @memberof ibc.core
             * @namespace
             */
            const client = {};

            client.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.client
                 * @namespace
                 */
                const v1 = {};

                v1.IdentifiedClientState = (function() {

                    /**
                     * Properties of an IdentifiedClientState.
                     * @memberof ibc.core.client.v1
                     * @interface IIdentifiedClientState
                     * @property {string|null} [client_id] IdentifiedClientState client_id
                     * @property {google.protobuf.IAny|null} [client_state] IdentifiedClientState client_state
                     */

                    /**
                     * Constructs a new IdentifiedClientState.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an IdentifiedClientState.
                     * @implements IIdentifiedClientState
                     * @constructor
                     * @param {ibc.core.client.v1.IIdentifiedClientState=} [properties] Properties to set
                     */
                    function IdentifiedClientState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IdentifiedClientState client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @instance
                     */
                    IdentifiedClientState.prototype.client_id = "";

                    /**
                     * IdentifiedClientState client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @instance
                     */
                    IdentifiedClientState.prototype.client_state = null;

                    /**
                     * Encodes the specified IdentifiedClientState message. Does not implicitly {@link ibc.core.client.v1.IdentifiedClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedClientState} message IdentifiedClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified IdentifiedClientState message, length delimited. Does not implicitly {@link ibc.core.client.v1.IdentifiedClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedClientState} message IdentifiedClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IdentifiedClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.IdentifiedClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IdentifiedClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IdentifiedClientState message.
                     * @function verify
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IdentifiedClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an IdentifiedClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                     */
                    IdentifiedClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.IdentifiedClientState)
                            return object;
                        let message = new $root.ibc.core.client.v1.IdentifiedClientState();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.IdentifiedClientState.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an IdentifiedClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {ibc.core.client.v1.IdentifiedClientState} message IdentifiedClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IdentifiedClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.client_state = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        return object;
                    };

                    /**
                     * Converts this IdentifiedClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IdentifiedClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IdentifiedClientState;
                })();

                v1.ConsensusStateWithHeight = (function() {

                    /**
                     * Properties of a ConsensusStateWithHeight.
                     * @memberof ibc.core.client.v1
                     * @interface IConsensusStateWithHeight
                     * @property {ibc.core.client.v1.IHeight|null} [height] ConsensusStateWithHeight height
                     * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateWithHeight consensus_state
                     */

                    /**
                     * Constructs a new ConsensusStateWithHeight.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ConsensusStateWithHeight.
                     * @implements IConsensusStateWithHeight
                     * @constructor
                     * @param {ibc.core.client.v1.IConsensusStateWithHeight=} [properties] Properties to set
                     */
                    function ConsensusStateWithHeight(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusStateWithHeight height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @instance
                     */
                    ConsensusStateWithHeight.prototype.height = null;

                    /**
                     * ConsensusStateWithHeight consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @instance
                     */
                    ConsensusStateWithHeight.prototype.consensus_state = null;

                    /**
                     * Encodes the specified ConsensusStateWithHeight message. Does not implicitly {@link ibc.core.client.v1.ConsensusStateWithHeight.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {ibc.core.client.v1.IConsensusStateWithHeight} message ConsensusStateWithHeight message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateWithHeight.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusStateWithHeight message, length delimited. Does not implicitly {@link ibc.core.client.v1.ConsensusStateWithHeight.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {ibc.core.client.v1.IConsensusStateWithHeight} message ConsensusStateWithHeight message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateWithHeight.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusStateWithHeight message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateWithHeight.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ConsensusStateWithHeight();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusStateWithHeight message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateWithHeight.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusStateWithHeight message.
                     * @function verify
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusStateWithHeight.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConsensusStateWithHeight message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                     */
                    ConsensusStateWithHeight.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.ConsensusStateWithHeight)
                            return object;
                        let message = new $root.ibc.core.client.v1.ConsensusStateWithHeight();
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.client.v1.ConsensusStateWithHeight.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.ConsensusStateWithHeight.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusStateWithHeight message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {ibc.core.client.v1.ConsensusStateWithHeight} message ConsensusStateWithHeight
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusStateWithHeight.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.height = null;
                            object.consensus_state = null;
                        }
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        return object;
                    };

                    /**
                     * Converts this ConsensusStateWithHeight to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusStateWithHeight.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusStateWithHeight;
                })();

                v1.ClientConsensusStates = (function() {

                    /**
                     * Properties of a ClientConsensusStates.
                     * @memberof ibc.core.client.v1
                     * @interface IClientConsensusStates
                     * @property {string|null} [client_id] ClientConsensusStates client_id
                     * @property {Array.<ibc.core.client.v1.IConsensusStateWithHeight>|null} [consensus_states] ClientConsensusStates consensus_states
                     */

                    /**
                     * Constructs a new ClientConsensusStates.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ClientConsensusStates.
                     * @implements IClientConsensusStates
                     * @constructor
                     * @param {ibc.core.client.v1.IClientConsensusStates=} [properties] Properties to set
                     */
                    function ClientConsensusStates(properties) {
                        this.consensus_states = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientConsensusStates client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @instance
                     */
                    ClientConsensusStates.prototype.client_id = "";

                    /**
                     * ClientConsensusStates consensus_states.
                     * @member {Array.<ibc.core.client.v1.IConsensusStateWithHeight>} consensus_states
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @instance
                     */
                    ClientConsensusStates.prototype.consensus_states = $util.emptyArray;

                    /**
                     * Encodes the specified ClientConsensusStates message. Does not implicitly {@link ibc.core.client.v1.ClientConsensusStates.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {ibc.core.client.v1.IClientConsensusStates} message ClientConsensusStates message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConsensusStates.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.consensus_states != null && message.consensus_states.length)
                            for (let i = 0; i < message.consensus_states.length; ++i)
                                $root.ibc.core.client.v1.ConsensusStateWithHeight.encode(message.consensus_states[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientConsensusStates message, length delimited. Does not implicitly {@link ibc.core.client.v1.ClientConsensusStates.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {ibc.core.client.v1.IClientConsensusStates} message ClientConsensusStates message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConsensusStates.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientConsensusStates message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConsensusStates.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ClientConsensusStates();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                if (!(message.consensus_states && message.consensus_states.length))
                                    message.consensus_states = [];
                                message.consensus_states.push($root.ibc.core.client.v1.ConsensusStateWithHeight.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientConsensusStates message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConsensusStates.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientConsensusStates message.
                     * @function verify
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientConsensusStates.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.consensus_states != null && message.hasOwnProperty("consensus_states")) {
                            if (!Array.isArray(message.consensus_states))
                                return "consensus_states: array expected";
                            for (let i = 0; i < message.consensus_states.length; ++i) {
                                let error = $root.ibc.core.client.v1.ConsensusStateWithHeight.verify(message.consensus_states[i]);
                                if (error)
                                    return "consensus_states." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientConsensusStates message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                     */
                    ClientConsensusStates.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.ClientConsensusStates)
                            return object;
                        let message = new $root.ibc.core.client.v1.ClientConsensusStates();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.consensus_states) {
                            if (!Array.isArray(object.consensus_states))
                                throw TypeError(".ibc.core.client.v1.ClientConsensusStates.consensus_states: array expected");
                            message.consensus_states = [];
                            for (let i = 0; i < object.consensus_states.length; ++i) {
                                if (typeof object.consensus_states[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.ClientConsensusStates.consensus_states: object expected");
                                message.consensus_states[i] = $root.ibc.core.client.v1.ConsensusStateWithHeight.fromObject(object.consensus_states[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientConsensusStates message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {ibc.core.client.v1.ClientConsensusStates} message ClientConsensusStates
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientConsensusStates.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.consensus_states = [];
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.consensus_states && message.consensus_states.length) {
                            object.consensus_states = [];
                            for (let j = 0; j < message.consensus_states.length; ++j)
                                object.consensus_states[j] = $root.ibc.core.client.v1.ConsensusStateWithHeight.toObject(message.consensus_states[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this ClientConsensusStates to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientConsensusStates.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientConsensusStates;
                })();

                v1.ClientUpdateProposal = (function() {

                    /**
                     * Properties of a ClientUpdateProposal.
                     * @memberof ibc.core.client.v1
                     * @interface IClientUpdateProposal
                     * @property {string|null} [title] ClientUpdateProposal title
                     * @property {string|null} [description] ClientUpdateProposal description
                     * @property {string|null} [subject_client_id] ClientUpdateProposal subject_client_id
                     * @property {string|null} [substitute_client_id] ClientUpdateProposal substitute_client_id
                     */

                    /**
                     * Constructs a new ClientUpdateProposal.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ClientUpdateProposal.
                     * @implements IClientUpdateProposal
                     * @constructor
                     * @param {ibc.core.client.v1.IClientUpdateProposal=} [properties] Properties to set
                     */
                    function ClientUpdateProposal(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientUpdateProposal title.
                     * @member {string} title
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.title = "";

                    /**
                     * ClientUpdateProposal description.
                     * @member {string} description
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.description = "";

                    /**
                     * ClientUpdateProposal subject_client_id.
                     * @member {string} subject_client_id
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.subject_client_id = "";

                    /**
                     * ClientUpdateProposal substitute_client_id.
                     * @member {string} substitute_client_id
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.substitute_client_id = "";

                    /**
                     * Encodes the specified ClientUpdateProposal message. Does not implicitly {@link ibc.core.client.v1.ClientUpdateProposal.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {ibc.core.client.v1.IClientUpdateProposal} message ClientUpdateProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientUpdateProposal.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.subject_client_id != null && Object.hasOwnProperty.call(message, "subject_client_id"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.subject_client_id);
                        if (message.substitute_client_id != null && Object.hasOwnProperty.call(message, "substitute_client_id"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.substitute_client_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientUpdateProposal message, length delimited. Does not implicitly {@link ibc.core.client.v1.ClientUpdateProposal.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {ibc.core.client.v1.IClientUpdateProposal} message ClientUpdateProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientUpdateProposal.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientUpdateProposal message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientUpdateProposal.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ClientUpdateProposal();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.title = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            case 3:
                                message.subject_client_id = reader.string();
                                break;
                            case 4:
                                message.substitute_client_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientUpdateProposal message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientUpdateProposal.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientUpdateProposal message.
                     * @function verify
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientUpdateProposal.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.title != null && message.hasOwnProperty("title"))
                            if (!$util.isString(message.title))
                                return "title: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.subject_client_id != null && message.hasOwnProperty("subject_client_id"))
                            if (!$util.isString(message.subject_client_id))
                                return "subject_client_id: string expected";
                        if (message.substitute_client_id != null && message.hasOwnProperty("substitute_client_id"))
                            if (!$util.isString(message.substitute_client_id))
                                return "substitute_client_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a ClientUpdateProposal message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                     */
                    ClientUpdateProposal.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.ClientUpdateProposal)
                            return object;
                        let message = new $root.ibc.core.client.v1.ClientUpdateProposal();
                        if (object.title != null)
                            message.title = String(object.title);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.subject_client_id != null)
                            message.subject_client_id = String(object.subject_client_id);
                        if (object.substitute_client_id != null)
                            message.substitute_client_id = String(object.substitute_client_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientUpdateProposal message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {ibc.core.client.v1.ClientUpdateProposal} message ClientUpdateProposal
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientUpdateProposal.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.title = "";
                            object.description = "";
                            object.subject_client_id = "";
                            object.substitute_client_id = "";
                        }
                        if (message.title != null && message.hasOwnProperty("title"))
                            object.title = message.title;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.subject_client_id != null && message.hasOwnProperty("subject_client_id"))
                            object.subject_client_id = message.subject_client_id;
                        if (message.substitute_client_id != null && message.hasOwnProperty("substitute_client_id"))
                            object.substitute_client_id = message.substitute_client_id;
                        return object;
                    };

                    /**
                     * Converts this ClientUpdateProposal to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientUpdateProposal.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientUpdateProposal;
                })();

                v1.UpgradeProposal = (function() {

                    /**
                     * Properties of an UpgradeProposal.
                     * @memberof ibc.core.client.v1
                     * @interface IUpgradeProposal
                     * @property {string|null} [title] UpgradeProposal title
                     * @property {string|null} [description] UpgradeProposal description
                     * @property {cosmos.upgrade.v1beta1.IPlan|null} [plan] UpgradeProposal plan
                     * @property {google.protobuf.IAny|null} [upgraded_client_state] UpgradeProposal upgraded_client_state
                     */

                    /**
                     * Constructs a new UpgradeProposal.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an UpgradeProposal.
                     * @implements IUpgradeProposal
                     * @constructor
                     * @param {ibc.core.client.v1.IUpgradeProposal=} [properties] Properties to set
                     */
                    function UpgradeProposal(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * UpgradeProposal title.
                     * @member {string} title
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     */
                    UpgradeProposal.prototype.title = "";

                    /**
                     * UpgradeProposal description.
                     * @member {string} description
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     */
                    UpgradeProposal.prototype.description = "";

                    /**
                     * UpgradeProposal plan.
                     * @member {cosmos.upgrade.v1beta1.IPlan|null|undefined} plan
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     */
                    UpgradeProposal.prototype.plan = null;

                    /**
                     * UpgradeProposal upgraded_client_state.
                     * @member {google.protobuf.IAny|null|undefined} upgraded_client_state
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     */
                    UpgradeProposal.prototype.upgraded_client_state = null;

                    /**
                     * Encodes the specified UpgradeProposal message. Does not implicitly {@link ibc.core.client.v1.UpgradeProposal.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {ibc.core.client.v1.IUpgradeProposal} message UpgradeProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpgradeProposal.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.plan != null && Object.hasOwnProperty.call(message, "plan"))
                            $root.cosmos.upgrade.v1beta1.Plan.encode(message.plan, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.upgraded_client_state != null && Object.hasOwnProperty.call(message, "upgraded_client_state"))
                            $root.google.protobuf.Any.encode(message.upgraded_client_state, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified UpgradeProposal message, length delimited. Does not implicitly {@link ibc.core.client.v1.UpgradeProposal.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {ibc.core.client.v1.IUpgradeProposal} message UpgradeProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpgradeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an UpgradeProposal message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpgradeProposal.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.UpgradeProposal();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.title = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            case 3:
                                message.plan = $root.cosmos.upgrade.v1beta1.Plan.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.upgraded_client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an UpgradeProposal message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpgradeProposal.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an UpgradeProposal message.
                     * @function verify
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpgradeProposal.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.title != null && message.hasOwnProperty("title"))
                            if (!$util.isString(message.title))
                                return "title: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.plan != null && message.hasOwnProperty("plan")) {
                            let error = $root.cosmos.upgrade.v1beta1.Plan.verify(message.plan);
                            if (error)
                                return "plan." + error;
                        }
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.upgraded_client_state);
                            if (error)
                                return "upgraded_client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an UpgradeProposal message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                     */
                    UpgradeProposal.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.UpgradeProposal)
                            return object;
                        let message = new $root.ibc.core.client.v1.UpgradeProposal();
                        if (object.title != null)
                            message.title = String(object.title);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.plan != null) {
                            if (typeof object.plan !== "object")
                                throw TypeError(".ibc.core.client.v1.UpgradeProposal.plan: object expected");
                            message.plan = $root.cosmos.upgrade.v1beta1.Plan.fromObject(object.plan);
                        }
                        if (object.upgraded_client_state != null) {
                            if (typeof object.upgraded_client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.UpgradeProposal.upgraded_client_state: object expected");
                            message.upgraded_client_state = $root.google.protobuf.Any.fromObject(object.upgraded_client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an UpgradeProposal message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {ibc.core.client.v1.UpgradeProposal} message UpgradeProposal
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpgradeProposal.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.title = "";
                            object.description = "";
                            object.plan = null;
                            object.upgraded_client_state = null;
                        }
                        if (message.title != null && message.hasOwnProperty("title"))
                            object.title = message.title;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.plan != null && message.hasOwnProperty("plan"))
                            object.plan = $root.cosmos.upgrade.v1beta1.Plan.toObject(message.plan, options);
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state"))
                            object.upgraded_client_state = $root.google.protobuf.Any.toObject(message.upgraded_client_state, options);
                        return object;
                    };

                    /**
                     * Converts this UpgradeProposal to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpgradeProposal.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return UpgradeProposal;
                })();

                v1.Height = (function() {

                    /**
                     * Properties of an Height.
                     * @memberof ibc.core.client.v1
                     * @interface IHeight
                     * @property {Long|null} [revision_number] Height revision_number
                     * @property {Long|null} [revision_height] Height revision_height
                     */

                    /**
                     * Constructs a new Height.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an Height.
                     * @implements IHeight
                     * @constructor
                     * @param {ibc.core.client.v1.IHeight=} [properties] Properties to set
                     */
                    function Height(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Height revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.client.v1.Height
                     * @instance
                     */
                    Height.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Height revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.client.v1.Height
                     * @instance
                     */
                    Height.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified Height message. Does not implicitly {@link ibc.core.client.v1.Height.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {ibc.core.client.v1.IHeight} message Height message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Height.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.revision_number);
                        if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.revision_height);
                        return writer;
                    };

                    /**
                     * Encodes the specified Height message, length delimited. Does not implicitly {@link ibc.core.client.v1.Height.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {ibc.core.client.v1.IHeight} message Height message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Height.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Height message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.Height} Height
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Height.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.Height();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.revision_number = reader.uint64();
                                break;
                            case 2:
                                message.revision_height = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Height message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.Height} Height
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Height.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Height message.
                     * @function verify
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Height.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                return "revision_number: integer|Long expected";
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                return "revision_height: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates an Height message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.Height} Height
                     */
                    Height.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.Height)
                            return object;
                        let message = new $root.ibc.core.client.v1.Height();
                        if (object.revision_number != null)
                            if ($util.Long)
                                (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                            else if (typeof object.revision_number === "string")
                                message.revision_number = parseInt(object.revision_number, 10);
                            else if (typeof object.revision_number === "number")
                                message.revision_number = object.revision_number;
                            else if (typeof object.revision_number === "object")
                                message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                        if (object.revision_height != null)
                            if ($util.Long)
                                (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                            else if (typeof object.revision_height === "string")
                                message.revision_height = parseInt(object.revision_height, 10);
                            else if (typeof object.revision_height === "number")
                                message.revision_height = object.revision_height;
                            else if (typeof object.revision_height === "object")
                                message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from an Height message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {ibc.core.client.v1.Height} message Height
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Height.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_number = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_height = options.longs === String ? "0" : 0;
                        }
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (typeof message.revision_number === "number")
                                object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                            else
                                object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (typeof message.revision_height === "number")
                                object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                            else
                                object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                        return object;
                    };

                    /**
                     * Converts this Height to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.Height
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Height.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Height;
                })();

                v1.Params = (function() {

                    /**
                     * Properties of a Params.
                     * @memberof ibc.core.client.v1
                     * @interface IParams
                     * @property {Array.<string>|null} [allowed_clients] Params allowed_clients
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {ibc.core.client.v1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        this.allowed_clients = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Params allowed_clients.
                     * @member {Array.<string>} allowed_clients
                     * @memberof ibc.core.client.v1.Params
                     * @instance
                     */
                    Params.prototype.allowed_clients = $util.emptyArray;

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link ibc.core.client.v1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {ibc.core.client.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.allowed_clients != null && message.allowed_clients.length)
                            for (let i = 0; i < message.allowed_clients.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowed_clients[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link ibc.core.client.v1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {ibc.core.client.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.Params();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.allowed_clients && message.allowed_clients.length))
                                    message.allowed_clients = [];
                                message.allowed_clients.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.allowed_clients != null && message.hasOwnProperty("allowed_clients")) {
                            if (!Array.isArray(message.allowed_clients))
                                return "allowed_clients: array expected";
                            for (let i = 0; i < message.allowed_clients.length; ++i)
                                if (!$util.isString(message.allowed_clients[i]))
                                    return "allowed_clients: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.Params)
                            return object;
                        let message = new $root.ibc.core.client.v1.Params();
                        if (object.allowed_clients) {
                            if (!Array.isArray(object.allowed_clients))
                                throw TypeError(".ibc.core.client.v1.Params.allowed_clients: array expected");
                            message.allowed_clients = [];
                            for (let i = 0; i < object.allowed_clients.length; ++i)
                                message.allowed_clients[i] = String(object.allowed_clients[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {ibc.core.client.v1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.allowed_clients = [];
                        if (message.allowed_clients && message.allowed_clients.length) {
                            object.allowed_clients = [];
                            for (let j = 0; j < message.allowed_clients.length; ++j)
                                object.allowed_clients[j] = message.allowed_clients[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Params;
                })();

                v1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Msg#createClient}.
                     * @memberof ibc.core.client.v1.Msg
                     * @typedef CreateClientCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.MsgCreateClientResponse} [response] MsgCreateClientResponse
                     */

                    /**
                     * Calls CreateClient.
                     * @function createClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgCreateClient} request MsgCreateClient message or plain object
                     * @param {ibc.core.client.v1.Msg.CreateClientCallback} callback Node-style callback called with the error, if any, and MsgCreateClientResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.createClient = function createClient(request, callback) {
                        return this.rpcCall(createClient, $root.ibc.core.client.v1.MsgCreateClient, $root.ibc.core.client.v1.MsgCreateClientResponse, request, callback);
                    }, "name", { value: "CreateClient" });

                    /**
                     * Calls CreateClient.
                     * @function createClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgCreateClient} request MsgCreateClient message or plain object
                     * @returns {Promise<ibc.core.client.v1.MsgCreateClientResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Msg#updateClient}.
                     * @memberof ibc.core.client.v1.Msg
                     * @typedef UpdateClientCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.MsgUpdateClientResponse} [response] MsgUpdateClientResponse
                     */

                    /**
                     * Calls UpdateClient.
                     * @function updateClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgUpdateClient} request MsgUpdateClient message or plain object
                     * @param {ibc.core.client.v1.Msg.UpdateClientCallback} callback Node-style callback called with the error, if any, and MsgUpdateClientResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.updateClient = function updateClient(request, callback) {
                        return this.rpcCall(updateClient, $root.ibc.core.client.v1.MsgUpdateClient, $root.ibc.core.client.v1.MsgUpdateClientResponse, request, callback);
                    }, "name", { value: "UpdateClient" });

                    /**
                     * Calls UpdateClient.
                     * @function updateClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgUpdateClient} request MsgUpdateClient message or plain object
                     * @returns {Promise<ibc.core.client.v1.MsgUpdateClientResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Msg#upgradeClient}.
                     * @memberof ibc.core.client.v1.Msg
                     * @typedef UpgradeClientCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.MsgUpgradeClientResponse} [response] MsgUpgradeClientResponse
                     */

                    /**
                     * Calls UpgradeClient.
                     * @function upgradeClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} request MsgUpgradeClient message or plain object
                     * @param {ibc.core.client.v1.Msg.UpgradeClientCallback} callback Node-style callback called with the error, if any, and MsgUpgradeClientResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.upgradeClient = function upgradeClient(request, callback) {
                        return this.rpcCall(upgradeClient, $root.ibc.core.client.v1.MsgUpgradeClient, $root.ibc.core.client.v1.MsgUpgradeClientResponse, request, callback);
                    }, "name", { value: "UpgradeClient" });

                    /**
                     * Calls UpgradeClient.
                     * @function upgradeClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} request MsgUpgradeClient message or plain object
                     * @returns {Promise<ibc.core.client.v1.MsgUpgradeClientResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Msg#submitMisbehaviour}.
                     * @memberof ibc.core.client.v1.Msg
                     * @typedef SubmitMisbehaviourCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} [response] MsgSubmitMisbehaviourResponse
                     */

                    /**
                     * Calls SubmitMisbehaviour.
                     * @function submitMisbehaviour
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} request MsgSubmitMisbehaviour message or plain object
                     * @param {ibc.core.client.v1.Msg.SubmitMisbehaviourCallback} callback Node-style callback called with the error, if any, and MsgSubmitMisbehaviourResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.submitMisbehaviour = function submitMisbehaviour(request, callback) {
                        return this.rpcCall(submitMisbehaviour, $root.ibc.core.client.v1.MsgSubmitMisbehaviour, $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse, request, callback);
                    }, "name", { value: "SubmitMisbehaviour" });

                    /**
                     * Calls SubmitMisbehaviour.
                     * @function submitMisbehaviour
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} request MsgSubmitMisbehaviour message or plain object
                     * @returns {Promise<ibc.core.client.v1.MsgSubmitMisbehaviourResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1.MsgCreateClient = (function() {

                    /**
                     * Properties of a MsgCreateClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgCreateClient
                     * @property {google.protobuf.IAny|null} [client_state] MsgCreateClient client_state
                     * @property {google.protobuf.IAny|null} [consensus_state] MsgCreateClient consensus_state
                     * @property {string|null} [signer] MsgCreateClient signer
                     */

                    /**
                     * Constructs a new MsgCreateClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgCreateClient.
                     * @implements IMsgCreateClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgCreateClient=} [properties] Properties to set
                     */
                    function MsgCreateClient(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgCreateClient client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.client_state = null;

                    /**
                     * MsgCreateClient consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.consensus_state = null;

                    /**
                     * MsgCreateClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgCreateClient message. Does not implicitly {@link ibc.core.client.v1.MsgCreateClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClient} message MsgCreateClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClient.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgCreateClient message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgCreateClient.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClient} message MsgCreateClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClient.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgCreateClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgCreateClient} MsgCreateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClient.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgCreateClient();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgCreateClient message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgCreateClient} MsgCreateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClient.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgCreateClient message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgCreateClient.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgCreateClient message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgCreateClient} MsgCreateClient
                     */
                    MsgCreateClient.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgCreateClient)
                            return object;
                        let message = new $root.ibc.core.client.v1.MsgCreateClient();
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgCreateClient.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgCreateClient.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgCreateClient message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {ibc.core.client.v1.MsgCreateClient} message MsgCreateClient
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgCreateClient.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_state = null;
                            object.consensus_state = null;
                            object.signer = "";
                        }
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgCreateClient to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgCreateClient.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgCreateClient;
                })();

                v1.MsgCreateClientResponse = (function() {

                    /**
                     * Properties of a MsgCreateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgCreateClientResponse
                     */

                    /**
                     * Constructs a new MsgCreateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgCreateClientResponse.
                     * @implements IMsgCreateClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgCreateClientResponse=} [properties] Properties to set
                     */
                    function MsgCreateClientResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgCreateClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgCreateClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClientResponse} message MsgCreateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClientResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgCreateClientResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgCreateClientResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClientResponse} message MsgCreateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClientResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgCreateClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgCreateClientResponse} MsgCreateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClientResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgCreateClientResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgCreateClientResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgCreateClientResponse} MsgCreateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClientResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgCreateClientResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgCreateClientResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgCreateClientResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgCreateClientResponse} MsgCreateClientResponse
                     */
                    MsgCreateClientResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgCreateClientResponse)
                            return object;
                        return new $root.ibc.core.client.v1.MsgCreateClientResponse();
                    };

                    /**
                     * Creates a plain object from a MsgCreateClientResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.MsgCreateClientResponse} message MsgCreateClientResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgCreateClientResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgCreateClientResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgCreateClientResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgCreateClientResponse;
                })();

                v1.MsgUpdateClient = (function() {

                    /**
                     * Properties of a MsgUpdateClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpdateClient
                     * @property {string|null} [client_id] MsgUpdateClient client_id
                     * @property {google.protobuf.IAny|null} [header] MsgUpdateClient header
                     * @property {string|null} [signer] MsgUpdateClient signer
                     */

                    /**
                     * Constructs a new MsgUpdateClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpdateClient.
                     * @implements IMsgUpdateClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpdateClient=} [properties] Properties to set
                     */
                    function MsgUpdateClient(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgUpdateClient client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.client_id = "";

                    /**
                     * MsgUpdateClient header.
                     * @member {google.protobuf.IAny|null|undefined} header
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.header = null;

                    /**
                     * MsgUpdateClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgUpdateClient message. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClient} message MsgUpdateClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClient.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                            $root.google.protobuf.Any.encode(message.header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgUpdateClient message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClient.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClient} message MsgUpdateClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClient.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgUpdateClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpdateClient} MsgUpdateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClient.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgUpdateClient();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.header = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgUpdateClient message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgUpdateClient} MsgUpdateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClient.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgUpdateClient message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpdateClient.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.header != null && message.hasOwnProperty("header")) {
                            let error = $root.google.protobuf.Any.verify(message.header);
                            if (error)
                                return "header." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgUpdateClient message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgUpdateClient} MsgUpdateClient
                     */
                    MsgUpdateClient.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgUpdateClient)
                            return object;
                        let message = new $root.ibc.core.client.v1.MsgUpdateClient();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.header != null) {
                            if (typeof object.header !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgUpdateClient.header: object expected");
                            message.header = $root.google.protobuf.Any.fromObject(object.header);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgUpdateClient message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {ibc.core.client.v1.MsgUpdateClient} message MsgUpdateClient
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpdateClient.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.header = null;
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.header != null && message.hasOwnProperty("header"))
                            object.header = $root.google.protobuf.Any.toObject(message.header, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgUpdateClient to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpdateClient.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgUpdateClient;
                })();

                v1.MsgUpdateClientResponse = (function() {

                    /**
                     * Properties of a MsgUpdateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpdateClientResponse
                     */

                    /**
                     * Constructs a new MsgUpdateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpdateClientResponse.
                     * @implements IMsgUpdateClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpdateClientResponse=} [properties] Properties to set
                     */
                    function MsgUpdateClientResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgUpdateClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClientResponse} message MsgUpdateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClientResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgUpdateClientResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClientResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClientResponse} message MsgUpdateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClientResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgUpdateClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpdateClientResponse} MsgUpdateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClientResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgUpdateClientResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgUpdateClientResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgUpdateClientResponse} MsgUpdateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClientResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgUpdateClientResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpdateClientResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgUpdateClientResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgUpdateClientResponse} MsgUpdateClientResponse
                     */
                    MsgUpdateClientResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgUpdateClientResponse)
                            return object;
                        return new $root.ibc.core.client.v1.MsgUpdateClientResponse();
                    };

                    /**
                     * Creates a plain object from a MsgUpdateClientResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.MsgUpdateClientResponse} message MsgUpdateClientResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpdateClientResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgUpdateClientResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpdateClientResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgUpdateClientResponse;
                })();

                v1.MsgUpgradeClient = (function() {

                    /**
                     * Properties of a MsgUpgradeClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpgradeClient
                     * @property {string|null} [client_id] MsgUpgradeClient client_id
                     * @property {google.protobuf.IAny|null} [client_state] MsgUpgradeClient client_state
                     * @property {google.protobuf.IAny|null} [consensus_state] MsgUpgradeClient consensus_state
                     * @property {Uint8Array|null} [proof_upgrade_client] MsgUpgradeClient proof_upgrade_client
                     * @property {Uint8Array|null} [proof_upgrade_consensus_state] MsgUpgradeClient proof_upgrade_consensus_state
                     * @property {string|null} [signer] MsgUpgradeClient signer
                     */

                    /**
                     * Constructs a new MsgUpgradeClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpgradeClient.
                     * @implements IMsgUpgradeClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpgradeClient=} [properties] Properties to set
                     */
                    function MsgUpgradeClient(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgUpgradeClient client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.client_id = "";

                    /**
                     * MsgUpgradeClient client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.client_state = null;

                    /**
                     * MsgUpgradeClient consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.consensus_state = null;

                    /**
                     * MsgUpgradeClient proof_upgrade_client.
                     * @member {Uint8Array} proof_upgrade_client
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.proof_upgrade_client = $util.newBuffer([]);

                    /**
                     * MsgUpgradeClient proof_upgrade_consensus_state.
                     * @member {Uint8Array} proof_upgrade_consensus_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.proof_upgrade_consensus_state = $util.newBuffer([]);

                    /**
                     * MsgUpgradeClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgUpgradeClient message. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} message MsgUpgradeClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClient.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.proof_upgrade_client != null && Object.hasOwnProperty.call(message, "proof_upgrade_client"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.proof_upgrade_client);
                        if (message.proof_upgrade_consensus_state != null && Object.hasOwnProperty.call(message, "proof_upgrade_consensus_state"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.proof_upgrade_consensus_state);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgUpgradeClient message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClient.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} message MsgUpgradeClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClient.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgUpgradeClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpgradeClient} MsgUpgradeClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClient.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgUpgradeClient();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.proof_upgrade_client = reader.bytes();
                                break;
                            case 5:
                                message.proof_upgrade_consensus_state = reader.bytes();
                                break;
                            case 6:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgUpgradeClient message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgUpgradeClient} MsgUpgradeClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClient.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgUpgradeClient message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpgradeClient.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.proof_upgrade_client != null && message.hasOwnProperty("proof_upgrade_client"))
                            if (!(message.proof_upgrade_client && typeof message.proof_upgrade_client.length === "number" || $util.isString(message.proof_upgrade_client)))
                                return "proof_upgrade_client: buffer expected";
                        if (message.proof_upgrade_consensus_state != null && message.hasOwnProperty("proof_upgrade_consensus_state"))
                            if (!(message.proof_upgrade_consensus_state && typeof message.proof_upgrade_consensus_state.length === "number" || $util.isString(message.proof_upgrade_consensus_state)))
                                return "proof_upgrade_consensus_state: buffer expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgUpgradeClient message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgUpgradeClient} MsgUpgradeClient
                     */
                    MsgUpgradeClient.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgUpgradeClient)
                            return object;
                        let message = new $root.ibc.core.client.v1.MsgUpgradeClient();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgUpgradeClient.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgUpgradeClient.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.proof_upgrade_client != null)
                            if (typeof object.proof_upgrade_client === "string")
                                $util.base64.decode(object.proof_upgrade_client, message.proof_upgrade_client = $util.newBuffer($util.base64.length(object.proof_upgrade_client)), 0);
                            else if (object.proof_upgrade_client.length)
                                message.proof_upgrade_client = object.proof_upgrade_client;
                        if (object.proof_upgrade_consensus_state != null)
                            if (typeof object.proof_upgrade_consensus_state === "string")
                                $util.base64.decode(object.proof_upgrade_consensus_state, message.proof_upgrade_consensus_state = $util.newBuffer($util.base64.length(object.proof_upgrade_consensus_state)), 0);
                            else if (object.proof_upgrade_consensus_state.length)
                                message.proof_upgrade_consensus_state = object.proof_upgrade_consensus_state;
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgUpgradeClient message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {ibc.core.client.v1.MsgUpgradeClient} message MsgUpgradeClient
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpgradeClient.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.client_state = null;
                            object.consensus_state = null;
                            if (options.bytes === String)
                                object.proof_upgrade_client = "";
                            else {
                                object.proof_upgrade_client = [];
                                if (options.bytes !== Array)
                                    object.proof_upgrade_client = $util.newBuffer(object.proof_upgrade_client);
                            }
                            if (options.bytes === String)
                                object.proof_upgrade_consensus_state = "";
                            else {
                                object.proof_upgrade_consensus_state = [];
                                if (options.bytes !== Array)
                                    object.proof_upgrade_consensus_state = $util.newBuffer(object.proof_upgrade_consensus_state);
                            }
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.proof_upgrade_client != null && message.hasOwnProperty("proof_upgrade_client"))
                            object.proof_upgrade_client = options.bytes === String ? $util.base64.encode(message.proof_upgrade_client, 0, message.proof_upgrade_client.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_upgrade_client) : message.proof_upgrade_client;
                        if (message.proof_upgrade_consensus_state != null && message.hasOwnProperty("proof_upgrade_consensus_state"))
                            object.proof_upgrade_consensus_state = options.bytes === String ? $util.base64.encode(message.proof_upgrade_consensus_state, 0, message.proof_upgrade_consensus_state.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_upgrade_consensus_state) : message.proof_upgrade_consensus_state;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgUpgradeClient to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpgradeClient.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgUpgradeClient;
                })();

                v1.MsgUpgradeClientResponse = (function() {

                    /**
                     * Properties of a MsgUpgradeClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpgradeClientResponse
                     */

                    /**
                     * Constructs a new MsgUpgradeClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpgradeClientResponse.
                     * @implements IMsgUpgradeClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpgradeClientResponse=} [properties] Properties to set
                     */
                    function MsgUpgradeClientResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgUpgradeClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClientResponse} message MsgUpgradeClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClientResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgUpgradeClientResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClientResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClientResponse} message MsgUpgradeClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClientResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgUpgradeClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpgradeClientResponse} MsgUpgradeClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClientResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgUpgradeClientResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgUpgradeClientResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgUpgradeClientResponse} MsgUpgradeClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClientResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgUpgradeClientResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpgradeClientResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgUpgradeClientResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgUpgradeClientResponse} MsgUpgradeClientResponse
                     */
                    MsgUpgradeClientResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgUpgradeClientResponse)
                            return object;
                        return new $root.ibc.core.client.v1.MsgUpgradeClientResponse();
                    };

                    /**
                     * Creates a plain object from a MsgUpgradeClientResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {ibc.core.client.v1.MsgUpgradeClientResponse} message MsgUpgradeClientResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpgradeClientResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgUpgradeClientResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpgradeClientResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgUpgradeClientResponse;
                })();

                v1.MsgSubmitMisbehaviour = (function() {

                    /**
                     * Properties of a MsgSubmitMisbehaviour.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgSubmitMisbehaviour
                     * @property {string|null} [client_id] MsgSubmitMisbehaviour client_id
                     * @property {google.protobuf.IAny|null} [misbehaviour] MsgSubmitMisbehaviour misbehaviour
                     * @property {string|null} [signer] MsgSubmitMisbehaviour signer
                     */

                    /**
                     * Constructs a new MsgSubmitMisbehaviour.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgSubmitMisbehaviour.
                     * @implements IMsgSubmitMisbehaviour
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour=} [properties] Properties to set
                     */
                    function MsgSubmitMisbehaviour(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgSubmitMisbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.client_id = "";

                    /**
                     * MsgSubmitMisbehaviour misbehaviour.
                     * @member {google.protobuf.IAny|null|undefined} misbehaviour
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.misbehaviour = null;

                    /**
                     * MsgSubmitMisbehaviour signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.signer = "";

                    /**
                     * Encodes the specified MsgSubmitMisbehaviour message. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} message MsgSubmitMisbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviour.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.misbehaviour != null && Object.hasOwnProperty.call(message, "misbehaviour"))
                            $root.google.protobuf.Any.encode(message.misbehaviour, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgSubmitMisbehaviour message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviour.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} message MsgSubmitMisbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviour.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviour} MsgSubmitMisbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviour.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgSubmitMisbehaviour();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.misbehaviour = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviour message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviour} MsgSubmitMisbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviour.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgSubmitMisbehaviour message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSubmitMisbehaviour.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.misbehaviour != null && message.hasOwnProperty("misbehaviour")) {
                            let error = $root.google.protobuf.Any.verify(message.misbehaviour);
                            if (error)
                                return "misbehaviour." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgSubmitMisbehaviour message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviour} MsgSubmitMisbehaviour
                     */
                    MsgSubmitMisbehaviour.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgSubmitMisbehaviour)
                            return object;
                        let message = new $root.ibc.core.client.v1.MsgSubmitMisbehaviour();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.misbehaviour != null) {
                            if (typeof object.misbehaviour !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgSubmitMisbehaviour.misbehaviour: object expected");
                            message.misbehaviour = $root.google.protobuf.Any.fromObject(object.misbehaviour);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgSubmitMisbehaviour message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {ibc.core.client.v1.MsgSubmitMisbehaviour} message MsgSubmitMisbehaviour
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSubmitMisbehaviour.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.misbehaviour = null;
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.misbehaviour != null && message.hasOwnProperty("misbehaviour"))
                            object.misbehaviour = $root.google.protobuf.Any.toObject(message.misbehaviour, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgSubmitMisbehaviour to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSubmitMisbehaviour.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgSubmitMisbehaviour;
                })();

                v1.MsgSubmitMisbehaviourResponse = (function() {

                    /**
                     * Properties of a MsgSubmitMisbehaviourResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgSubmitMisbehaviourResponse
                     */

                    /**
                     * Constructs a new MsgSubmitMisbehaviourResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgSubmitMisbehaviourResponse.
                     * @implements IMsgSubmitMisbehaviourResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviourResponse=} [properties] Properties to set
                     */
                    function MsgSubmitMisbehaviourResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgSubmitMisbehaviourResponse message. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviourResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviourResponse} message MsgSubmitMisbehaviourResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviourResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgSubmitMisbehaviourResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviourResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviourResponse} message MsgSubmitMisbehaviourResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviourResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviourResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} MsgSubmitMisbehaviourResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviourResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviourResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} MsgSubmitMisbehaviourResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviourResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgSubmitMisbehaviourResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSubmitMisbehaviourResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgSubmitMisbehaviourResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} MsgSubmitMisbehaviourResponse
                     */
                    MsgSubmitMisbehaviourResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse)
                            return object;
                        return new $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse();
                    };

                    /**
                     * Creates a plain object from a MsgSubmitMisbehaviourResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} message MsgSubmitMisbehaviourResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSubmitMisbehaviourResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgSubmitMisbehaviourResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSubmitMisbehaviourResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgSubmitMisbehaviourResponse;
                })();

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#clientState}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ClientStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryClientStateResponse} [response] QueryClientStateResponse
                     */

                    /**
                     * Calls ClientState.
                     * @function clientState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} request QueryClientStateRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ClientStateCallback} callback Node-style callback called with the error, if any, and QueryClientStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientState = function clientState(request, callback) {
                        return this.rpcCall(clientState, $root.ibc.core.client.v1.QueryClientStateRequest, $root.ibc.core.client.v1.QueryClientStateResponse, request, callback);
                    }, "name", { value: "ClientState" });

                    /**
                     * Calls ClientState.
                     * @function clientState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} request QueryClientStateRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryClientStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#clientStates}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ClientStatesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryClientStatesResponse} [response] QueryClientStatesResponse
                     */

                    /**
                     * Calls ClientStates.
                     * @function clientStates
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} request QueryClientStatesRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ClientStatesCallback} callback Node-style callback called with the error, if any, and QueryClientStatesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientStates = function clientStates(request, callback) {
                        return this.rpcCall(clientStates, $root.ibc.core.client.v1.QueryClientStatesRequest, $root.ibc.core.client.v1.QueryClientStatesResponse, request, callback);
                    }, "name", { value: "ClientStates" });

                    /**
                     * Calls ClientStates.
                     * @function clientStates
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} request QueryClientStatesRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryClientStatesResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#consensusState}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ConsensusStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryConsensusStateResponse} [response] QueryConsensusStateResponse
                     */

                    /**
                     * Calls ConsensusState.
                     * @function consensusState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} request QueryConsensusStateRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ConsensusStateCallback} callback Node-style callback called with the error, if any, and QueryConsensusStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.consensusState = function consensusState(request, callback) {
                        return this.rpcCall(consensusState, $root.ibc.core.client.v1.QueryConsensusStateRequest, $root.ibc.core.client.v1.QueryConsensusStateResponse, request, callback);
                    }, "name", { value: "ConsensusState" });

                    /**
                     * Calls ConsensusState.
                     * @function consensusState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} request QueryConsensusStateRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryConsensusStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#consensusStates}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ConsensusStatesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryConsensusStatesResponse} [response] QueryConsensusStatesResponse
                     */

                    /**
                     * Calls ConsensusStates.
                     * @function consensusStates
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} request QueryConsensusStatesRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ConsensusStatesCallback} callback Node-style callback called with the error, if any, and QueryConsensusStatesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.consensusStates = function consensusStates(request, callback) {
                        return this.rpcCall(consensusStates, $root.ibc.core.client.v1.QueryConsensusStatesRequest, $root.ibc.core.client.v1.QueryConsensusStatesResponse, request, callback);
                    }, "name", { value: "ConsensusStates" });

                    /**
                     * Calls ConsensusStates.
                     * @function consensusStates
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} request QueryConsensusStatesRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryConsensusStatesResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#clientStatus}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ClientStatusCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryClientStatusResponse} [response] QueryClientStatusResponse
                     */

                    /**
                     * Calls ClientStatus.
                     * @function clientStatus
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest} request QueryClientStatusRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ClientStatusCallback} callback Node-style callback called with the error, if any, and QueryClientStatusResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientStatus = function clientStatus(request, callback) {
                        return this.rpcCall(clientStatus, $root.ibc.core.client.v1.QueryClientStatusRequest, $root.ibc.core.client.v1.QueryClientStatusResponse, request, callback);
                    }, "name", { value: "ClientStatus" });

                    /**
                     * Calls ClientStatus.
                     * @function clientStatus
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest} request QueryClientStatusRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryClientStatusResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#clientParams}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ClientParamsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryClientParamsResponse} [response] QueryClientParamsResponse
                     */

                    /**
                     * Calls ClientParams.
                     * @function clientParams
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} request QueryClientParamsRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ClientParamsCallback} callback Node-style callback called with the error, if any, and QueryClientParamsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientParams = function clientParams(request, callback) {
                        return this.rpcCall(clientParams, $root.ibc.core.client.v1.QueryClientParamsRequest, $root.ibc.core.client.v1.QueryClientParamsResponse, request, callback);
                    }, "name", { value: "ClientParams" });

                    /**
                     * Calls ClientParams.
                     * @function clientParams
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} request QueryClientParamsRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryClientParamsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#upgradedClientState}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef UpgradedClientStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryUpgradedClientStateResponse} [response] QueryUpgradedClientStateResponse
                     */

                    /**
                     * Calls UpgradedClientState.
                     * @function upgradedClientState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest} request QueryUpgradedClientStateRequest message or plain object
                     * @param {ibc.core.client.v1.Query.UpgradedClientStateCallback} callback Node-style callback called with the error, if any, and QueryUpgradedClientStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.upgradedClientState = function upgradedClientState(request, callback) {
                        return this.rpcCall(upgradedClientState, $root.ibc.core.client.v1.QueryUpgradedClientStateRequest, $root.ibc.core.client.v1.QueryUpgradedClientStateResponse, request, callback);
                    }, "name", { value: "UpgradedClientState" });

                    /**
                     * Calls UpgradedClientState.
                     * @function upgradedClientState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest} request QueryUpgradedClientStateRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryUpgradedClientStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#upgradedConsensusState}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef UpgradedConsensusStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} [response] QueryUpgradedConsensusStateResponse
                     */

                    /**
                     * Calls UpgradedConsensusState.
                     * @function upgradedConsensusState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest} request QueryUpgradedConsensusStateRequest message or plain object
                     * @param {ibc.core.client.v1.Query.UpgradedConsensusStateCallback} callback Node-style callback called with the error, if any, and QueryUpgradedConsensusStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.upgradedConsensusState = function upgradedConsensusState(request, callback) {
                        return this.rpcCall(upgradedConsensusState, $root.ibc.core.client.v1.QueryUpgradedConsensusStateRequest, $root.ibc.core.client.v1.QueryUpgradedConsensusStateResponse, request, callback);
                    }, "name", { value: "UpgradedConsensusState" });

                    /**
                     * Calls UpgradedConsensusState.
                     * @function upgradedConsensusState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest} request QueryUpgradedConsensusStateRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryUpgradedConsensusStateResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryClientStateRequest = (function() {

                    /**
                     * Properties of a QueryClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStateRequest
                     * @property {string|null} [client_id] QueryClientStateRequest client_id
                     */

                    /**
                     * Constructs a new QueryClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStateRequest.
                     * @implements IQueryClientStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStateRequest=} [properties] Properties to set
                     */
                    function QueryClientStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStateRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @instance
                     */
                    QueryClientStateRequest.prototype.client_id = "";

                    /**
                     * Encodes the specified QueryClientStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} message QueryClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStateRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} message QueryClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStateRequest} QueryClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStateRequest} QueryClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStateRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStateRequest} QueryClientStateRequest
                     */
                    QueryClientStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStateRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStateRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStateRequest} message QueryClientStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        return object;
                    };

                    /**
                     * Converts this QueryClientStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStateRequest;
                })();

                v1.QueryClientStateResponse = (function() {

                    /**
                     * Properties of a QueryClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStateResponse
                     * @property {google.protobuf.IAny|null} [client_state] QueryClientStateResponse client_state
                     * @property {Uint8Array|null} [proof] QueryClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStateResponse.
                     * @implements IQueryClientStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStateResponse=} [properties] Properties to set
                     */
                    function QueryClientStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStateResponse client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.client_state = null;

                    /**
                     * QueryClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryClientStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateResponse} message QueryClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStateResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateResponse} message QueryClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStateResponse} QueryClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStateResponse} QueryClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStateResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStateResponse} QueryClientStateResponse
                     */
                    QueryClientStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStateResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStateResponse();
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientStateResponse.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStateResponse} message QueryClientStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_state = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStateResponse;
                })();

                v1.QueryClientStatesRequest = (function() {

                    /**
                     * Properties of a QueryClientStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatesRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryClientStatesRequest pagination
                     */

                    /**
                     * Constructs a new QueryClientStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatesRequest.
                     * @implements IQueryClientStatesRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest=} [properties] Properties to set
                     */
                    function QueryClientStatesRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStatesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @instance
                     */
                    QueryClientStatesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryClientStatesRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} message QueryClientStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStatesRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} message QueryClientStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStatesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatesRequest} QueryClientStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStatesRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStatesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStatesRequest} QueryClientStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStatesRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStatesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientStatesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStatesRequest} QueryClientStatesRequest
                     */
                    QueryClientStatesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStatesRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStatesRequest();
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientStatesRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStatesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStatesRequest} message QueryClientStatesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStatesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.pagination = null;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientStatesRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStatesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStatesRequest;
                })();

                v1.QueryClientStatesResponse = (function() {

                    /**
                     * Properties of a QueryClientStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatesResponse
                     * @property {Array.<ibc.core.client.v1.IIdentifiedClientState>|null} [client_states] QueryClientStatesResponse client_states
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryClientStatesResponse pagination
                     */

                    /**
                     * Constructs a new QueryClientStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatesResponse.
                     * @implements IQueryClientStatesResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatesResponse=} [properties] Properties to set
                     */
                    function QueryClientStatesResponse(properties) {
                        this.client_states = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStatesResponse client_states.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedClientState>} client_states
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @instance
                     */
                    QueryClientStatesResponse.prototype.client_states = $util.emptyArray;

                    /**
                     * QueryClientStatesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @instance
                     */
                    QueryClientStatesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryClientStatesResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesResponse} message QueryClientStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_states != null && message.client_states.length)
                            for (let i = 0; i < message.client_states.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedClientState.encode(message.client_states[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStatesResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesResponse} message QueryClientStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStatesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatesResponse} QueryClientStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStatesResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.client_states && message.client_states.length))
                                    message.client_states = [];
                                message.client_states.push($root.ibc.core.client.v1.IdentifiedClientState.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStatesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStatesResponse} QueryClientStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStatesResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStatesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_states != null && message.hasOwnProperty("client_states")) {
                            if (!Array.isArray(message.client_states))
                                return "client_states: array expected";
                            for (let i = 0; i < message.client_states.length; ++i) {
                                let error = $root.ibc.core.client.v1.IdentifiedClientState.verify(message.client_states[i]);
                                if (error)
                                    return "client_states." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientStatesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStatesResponse} QueryClientStatesResponse
                     */
                    QueryClientStatesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStatesResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStatesResponse();
                        if (object.client_states) {
                            if (!Array.isArray(object.client_states))
                                throw TypeError(".ibc.core.client.v1.QueryClientStatesResponse.client_states: array expected");
                            message.client_states = [];
                            for (let i = 0; i < object.client_states.length; ++i) {
                                if (typeof object.client_states[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.QueryClientStatesResponse.client_states: object expected");
                                message.client_states[i] = $root.ibc.core.client.v1.IdentifiedClientState.fromObject(object.client_states[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientStatesResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStatesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStatesResponse} message QueryClientStatesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStatesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.client_states = [];
                        if (options.defaults)
                            object.pagination = null;
                        if (message.client_states && message.client_states.length) {
                            object.client_states = [];
                            for (let j = 0; j < message.client_states.length; ++j)
                                object.client_states[j] = $root.ibc.core.client.v1.IdentifiedClientState.toObject(message.client_states[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientStatesResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStatesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStatesResponse;
                })();

                v1.QueryConsensusStateRequest = (function() {

                    /**
                     * Properties of a QueryConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStateRequest
                     * @property {string|null} [client_id] QueryConsensusStateRequest client_id
                     * @property {Long|null} [revision_number] QueryConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryConsensusStateRequest revision_height
                     * @property {boolean|null} [latest_height] QueryConsensusStateRequest latest_height
                     */

                    /**
                     * Constructs a new QueryConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStateRequest.
                     * @implements IQueryConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest=} [properties] Properties to set
                     */
                    function QueryConsensusStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConsensusStateRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.client_id = "";

                    /**
                     * QueryConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryConsensusStateRequest latest_height.
                     * @member {boolean} latest_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.latest_height = false;

                    /**
                     * Encodes the specified QueryConsensusStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} message QueryConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.revision_number);
                        if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.revision_height);
                        if (message.latest_height != null && Object.hasOwnProperty.call(message, "latest_height"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.latest_height);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConsensusStateRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} message QueryConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStateRequest} QueryConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryConsensusStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.revision_number = reader.uint64();
                                break;
                            case 3:
                                message.revision_height = reader.uint64();
                                break;
                            case 4:
                                message.latest_height = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConsensusStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryConsensusStateRequest} QueryConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConsensusStateRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConsensusStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                return "revision_number: integer|Long expected";
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                return "revision_height: integer|Long expected";
                        if (message.latest_height != null && message.hasOwnProperty("latest_height"))
                            if (typeof message.latest_height !== "boolean")
                                return "latest_height: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a QueryConsensusStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryConsensusStateRequest} QueryConsensusStateRequest
                     */
                    QueryConsensusStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryConsensusStateRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryConsensusStateRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.revision_number != null)
                            if ($util.Long)
                                (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                            else if (typeof object.revision_number === "string")
                                message.revision_number = parseInt(object.revision_number, 10);
                            else if (typeof object.revision_number === "number")
                                message.revision_number = object.revision_number;
                            else if (typeof object.revision_number === "object")
                                message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                        if (object.revision_height != null)
                            if ($util.Long)
                                (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                            else if (typeof object.revision_height === "string")
                                message.revision_height = parseInt(object.revision_height, 10);
                            else if (typeof object.revision_height === "number")
                                message.revision_height = object.revision_height;
                            else if (typeof object.revision_height === "object")
                                message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                        if (object.latest_height != null)
                            message.latest_height = Boolean(object.latest_height);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConsensusStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryConsensusStateRequest} message QueryConsensusStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConsensusStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_number = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_height = options.longs === String ? "0" : 0;
                            object.latest_height = false;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (typeof message.revision_number === "number")
                                object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                            else
                                object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (typeof message.revision_height === "number")
                                object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                            else
                                object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                        if (message.latest_height != null && message.hasOwnProperty("latest_height"))
                            object.latest_height = message.latest_height;
                        return object;
                    };

                    /**
                     * Converts this QueryConsensusStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConsensusStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConsensusStateRequest;
                })();

                v1.QueryConsensusStateResponse = (function() {

                    /**
                     * Properties of a QueryConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryConsensusStateResponse consensus_state
                     * @property {Uint8Array|null} [proof] QueryConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStateResponse.
                     * @implements IQueryConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStateResponse=} [properties] Properties to set
                     */
                    function QueryConsensusStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConsensusStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateResponse} message QueryConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConsensusStateResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateResponse} message QueryConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStateResponse} QueryConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryConsensusStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConsensusStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryConsensusStateResponse} QueryConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConsensusStateResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConsensusStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConsensusStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryConsensusStateResponse} QueryConsensusStateResponse
                     */
                    QueryConsensusStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryConsensusStateResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryConsensusStateResponse();
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStateResponse.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConsensusStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryConsensusStateResponse} message QueryConsensusStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConsensusStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.consensus_state = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConsensusStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConsensusStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConsensusStateResponse;
                })();

                v1.QueryConsensusStatesRequest = (function() {

                    /**
                     * Properties of a QueryConsensusStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStatesRequest
                     * @property {string|null} [client_id] QueryConsensusStatesRequest client_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConsensusStatesRequest pagination
                     */

                    /**
                     * Constructs a new QueryConsensusStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStatesRequest.
                     * @implements IQueryConsensusStatesRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest=} [properties] Properties to set
                     */
                    function QueryConsensusStatesRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConsensusStatesRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @instance
                     */
                    QueryConsensusStatesRequest.prototype.client_id = "";

                    /**
                     * QueryConsensusStatesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @instance
                     */
                    QueryConsensusStatesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConsensusStatesRequest message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} message QueryConsensusStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConsensusStatesRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} message QueryConsensusStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConsensusStatesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStatesRequest} QueryConsensusStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryConsensusStatesRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConsensusStatesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryConsensusStatesRequest} QueryConsensusStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConsensusStatesRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConsensusStatesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConsensusStatesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryConsensusStatesRequest} QueryConsensusStatesRequest
                     */
                    QueryConsensusStatesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryConsensusStatesRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryConsensusStatesRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStatesRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConsensusStatesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryConsensusStatesRequest} message QueryConsensusStatesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConsensusStatesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.pagination = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConsensusStatesRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConsensusStatesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConsensusStatesRequest;
                })();

                v1.QueryConsensusStatesResponse = (function() {

                    /**
                     * Properties of a QueryConsensusStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStatesResponse
                     * @property {Array.<ibc.core.client.v1.IConsensusStateWithHeight>|null} [consensus_states] QueryConsensusStatesResponse consensus_states
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConsensusStatesResponse pagination
                     */

                    /**
                     * Constructs a new QueryConsensusStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStatesResponse.
                     * @implements IQueryConsensusStatesResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStatesResponse=} [properties] Properties to set
                     */
                    function QueryConsensusStatesResponse(properties) {
                        this.consensus_states = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConsensusStatesResponse consensus_states.
                     * @member {Array.<ibc.core.client.v1.IConsensusStateWithHeight>} consensus_states
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @instance
                     */
                    QueryConsensusStatesResponse.prototype.consensus_states = $util.emptyArray;

                    /**
                     * QueryConsensusStatesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @instance
                     */
                    QueryConsensusStatesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConsensusStatesResponse message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesResponse} message QueryConsensusStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consensus_states != null && message.consensus_states.length)
                            for (let i = 0; i < message.consensus_states.length; ++i)
                                $root.ibc.core.client.v1.ConsensusStateWithHeight.encode(message.consensus_states[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConsensusStatesResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesResponse} message QueryConsensusStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConsensusStatesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStatesResponse} QueryConsensusStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryConsensusStatesResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.consensus_states && message.consensus_states.length))
                                    message.consensus_states = [];
                                message.consensus_states.push($root.ibc.core.client.v1.ConsensusStateWithHeight.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConsensusStatesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryConsensusStatesResponse} QueryConsensusStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConsensusStatesResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConsensusStatesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consensus_states != null && message.hasOwnProperty("consensus_states")) {
                            if (!Array.isArray(message.consensus_states))
                                return "consensus_states: array expected";
                            for (let i = 0; i < message.consensus_states.length; ++i) {
                                let error = $root.ibc.core.client.v1.ConsensusStateWithHeight.verify(message.consensus_states[i]);
                                if (error)
                                    return "consensus_states." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConsensusStatesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryConsensusStatesResponse} QueryConsensusStatesResponse
                     */
                    QueryConsensusStatesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryConsensusStatesResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryConsensusStatesResponse();
                        if (object.consensus_states) {
                            if (!Array.isArray(object.consensus_states))
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states: array expected");
                            message.consensus_states = [];
                            for (let i = 0; i < object.consensus_states.length; ++i) {
                                if (typeof object.consensus_states[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states: object expected");
                                message.consensus_states[i] = $root.ibc.core.client.v1.ConsensusStateWithHeight.fromObject(object.consensus_states[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStatesResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConsensusStatesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryConsensusStatesResponse} message QueryConsensusStatesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConsensusStatesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.consensus_states = [];
                        if (options.defaults)
                            object.pagination = null;
                        if (message.consensus_states && message.consensus_states.length) {
                            object.consensus_states = [];
                            for (let j = 0; j < message.consensus_states.length; ++j)
                                object.consensus_states[j] = $root.ibc.core.client.v1.ConsensusStateWithHeight.toObject(message.consensus_states[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConsensusStatesResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConsensusStatesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConsensusStatesResponse;
                })();

                v1.QueryClientStatusRequest = (function() {

                    /**
                     * Properties of a QueryClientStatusRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatusRequest
                     * @property {string|null} [client_id] QueryClientStatusRequest client_id
                     */

                    /**
                     * Constructs a new QueryClientStatusRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatusRequest.
                     * @implements IQueryClientStatusRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest=} [properties] Properties to set
                     */
                    function QueryClientStatusRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStatusRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @instance
                     */
                    QueryClientStatusRequest.prototype.client_id = "";

                    /**
                     * Encodes the specified QueryClientStatusRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatusRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest} message QueryClientStatusRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatusRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStatusRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStatusRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest} message QueryClientStatusRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStatusRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatusRequest} QueryClientStatusRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatusRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStatusRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStatusRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStatusRequest} QueryClientStatusRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatusRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStatusRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStatusRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientStatusRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStatusRequest} QueryClientStatusRequest
                     */
                    QueryClientStatusRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStatusRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStatusRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStatusRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStatusRequest} message QueryClientStatusRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStatusRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        return object;
                    };

                    /**
                     * Converts this QueryClientStatusRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStatusRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStatusRequest;
                })();

                v1.QueryClientStatusResponse = (function() {

                    /**
                     * Properties of a QueryClientStatusResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatusResponse
                     * @property {string|null} [status] QueryClientStatusResponse status
                     */

                    /**
                     * Constructs a new QueryClientStatusResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatusResponse.
                     * @implements IQueryClientStatusResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatusResponse=} [properties] Properties to set
                     */
                    function QueryClientStatusResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStatusResponse status.
                     * @member {string} status
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @instance
                     */
                    QueryClientStatusResponse.prototype.status = "";

                    /**
                     * Encodes the specified QueryClientStatusResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatusResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatusResponse} message QueryClientStatusResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatusResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.status);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStatusResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStatusResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatusResponse} message QueryClientStatusResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStatusResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatusResponse} QueryClientStatusResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatusResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStatusResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.status = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStatusResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStatusResponse} QueryClientStatusResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatusResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStatusResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStatusResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.status != null && message.hasOwnProperty("status"))
                            if (!$util.isString(message.status))
                                return "status: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientStatusResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStatusResponse} QueryClientStatusResponse
                     */
                    QueryClientStatusResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStatusResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStatusResponse();
                        if (object.status != null)
                            message.status = String(object.status);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStatusResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStatusResponse} message QueryClientStatusResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStatusResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.status = "";
                        if (message.status != null && message.hasOwnProperty("status"))
                            object.status = message.status;
                        return object;
                    };

                    /**
                     * Converts this QueryClientStatusResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStatusResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStatusResponse;
                })();

                v1.QueryClientParamsRequest = (function() {

                    /**
                     * Properties of a QueryClientParamsRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientParamsRequest
                     */

                    /**
                     * Constructs a new QueryClientParamsRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientParamsRequest.
                     * @implements IQueryClientParamsRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest=} [properties] Properties to set
                     */
                    function QueryClientParamsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified QueryClientParamsRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} message QueryClientParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientParamsRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} message QueryClientParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientParamsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientParamsRequest} QueryClientParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientParamsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientParamsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientParamsRequest} QueryClientParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientParamsRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientParamsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientParamsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientParamsRequest} QueryClientParamsRequest
                     */
                    QueryClientParamsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientParamsRequest)
                            return object;
                        return new $root.ibc.core.client.v1.QueryClientParamsRequest();
                    };

                    /**
                     * Creates a plain object from a QueryClientParamsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryClientParamsRequest} message QueryClientParamsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientParamsRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryClientParamsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientParamsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientParamsRequest;
                })();

                v1.QueryClientParamsResponse = (function() {

                    /**
                     * Properties of a QueryClientParamsResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientParamsResponse
                     * @property {ibc.core.client.v1.IParams|null} [params] QueryClientParamsResponse params
                     */

                    /**
                     * Constructs a new QueryClientParamsResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientParamsResponse.
                     * @implements IQueryClientParamsResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientParamsResponse=} [properties] Properties to set
                     */
                    function QueryClientParamsResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientParamsResponse params.
                     * @member {ibc.core.client.v1.IParams|null|undefined} params
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @instance
                     */
                    QueryClientParamsResponse.prototype.params = null;

                    /**
                     * Encodes the specified QueryClientParamsResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsResponse} message QueryClientParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.core.client.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientParamsResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsResponse} message QueryClientParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientParamsResponse} QueryClientParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientParamsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.params = $root.ibc.core.client.v1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientParamsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientParamsResponse} QueryClientParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientParamsResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientParamsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.core.client.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientParamsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientParamsResponse} QueryClientParamsResponse
                     */
                    QueryClientParamsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientParamsResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientParamsResponse();
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientParamsResponse.params: object expected");
                            message.params = $root.ibc.core.client.v1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientParamsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryClientParamsResponse} message QueryClientParamsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientParamsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.params = null;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.core.client.v1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientParamsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientParamsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientParamsResponse;
                })();

                v1.QueryUpgradedClientStateRequest = (function() {

                    /**
                     * Properties of a QueryUpgradedClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryUpgradedClientStateRequest
                     */

                    /**
                     * Constructs a new QueryUpgradedClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryUpgradedClientStateRequest.
                     * @implements IQueryUpgradedClientStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest=} [properties] Properties to set
                     */
                    function QueryUpgradedClientStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified QueryUpgradedClientStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest} message QueryUpgradedClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedClientStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUpgradedClientStateRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedClientStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest} message QueryUpgradedClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedClientStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUpgradedClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateRequest} QueryUpgradedClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedClientStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryUpgradedClientStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUpgradedClientStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateRequest} QueryUpgradedClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedClientStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUpgradedClientStateRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUpgradedClientStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryUpgradedClientStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateRequest} QueryUpgradedClientStateRequest
                     */
                    QueryUpgradedClientStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryUpgradedClientStateRequest)
                            return object;
                        return new $root.ibc.core.client.v1.QueryUpgradedClientStateRequest();
                    };

                    /**
                     * Creates a plain object from a QueryUpgradedClientStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryUpgradedClientStateRequest} message QueryUpgradedClientStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUpgradedClientStateRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryUpgradedClientStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUpgradedClientStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUpgradedClientStateRequest;
                })();

                v1.QueryUpgradedClientStateResponse = (function() {

                    /**
                     * Properties of a QueryUpgradedClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryUpgradedClientStateResponse
                     * @property {google.protobuf.IAny|null} [upgraded_client_state] QueryUpgradedClientStateResponse upgraded_client_state
                     */

                    /**
                     * Constructs a new QueryUpgradedClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryUpgradedClientStateResponse.
                     * @implements IQueryUpgradedClientStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateResponse=} [properties] Properties to set
                     */
                    function QueryUpgradedClientStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUpgradedClientStateResponse upgraded_client_state.
                     * @member {google.protobuf.IAny|null|undefined} upgraded_client_state
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @instance
                     */
                    QueryUpgradedClientStateResponse.prototype.upgraded_client_state = null;

                    /**
                     * Encodes the specified QueryUpgradedClientStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateResponse} message QueryUpgradedClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedClientStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.upgraded_client_state != null && Object.hasOwnProperty.call(message, "upgraded_client_state"))
                            $root.google.protobuf.Any.encode(message.upgraded_client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUpgradedClientStateResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedClientStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateResponse} message QueryUpgradedClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedClientStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUpgradedClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateResponse} QueryUpgradedClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedClientStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryUpgradedClientStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.upgraded_client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUpgradedClientStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateResponse} QueryUpgradedClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedClientStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUpgradedClientStateResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUpgradedClientStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.upgraded_client_state);
                            if (error)
                                return "upgraded_client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUpgradedClientStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateResponse} QueryUpgradedClientStateResponse
                     */
                    QueryUpgradedClientStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryUpgradedClientStateResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryUpgradedClientStateResponse();
                        if (object.upgraded_client_state != null) {
                            if (typeof object.upgraded_client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryUpgradedClientStateResponse.upgraded_client_state: object expected");
                            message.upgraded_client_state = $root.google.protobuf.Any.fromObject(object.upgraded_client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUpgradedClientStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryUpgradedClientStateResponse} message QueryUpgradedClientStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUpgradedClientStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.upgraded_client_state = null;
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state"))
                            object.upgraded_client_state = $root.google.protobuf.Any.toObject(message.upgraded_client_state, options);
                        return object;
                    };

                    /**
                     * Converts this QueryUpgradedClientStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUpgradedClientStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUpgradedClientStateResponse;
                })();

                v1.QueryUpgradedConsensusStateRequest = (function() {

                    /**
                     * Properties of a QueryUpgradedConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryUpgradedConsensusStateRequest
                     */

                    /**
                     * Constructs a new QueryUpgradedConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryUpgradedConsensusStateRequest.
                     * @implements IQueryUpgradedConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest=} [properties] Properties to set
                     */
                    function QueryUpgradedConsensusStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified QueryUpgradedConsensusStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest} message QueryUpgradedConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedConsensusStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUpgradedConsensusStateRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedConsensusStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest} message QueryUpgradedConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedConsensusStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUpgradedConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateRequest} QueryUpgradedConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedConsensusStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryUpgradedConsensusStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUpgradedConsensusStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateRequest} QueryUpgradedConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedConsensusStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUpgradedConsensusStateRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUpgradedConsensusStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryUpgradedConsensusStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateRequest} QueryUpgradedConsensusStateRequest
                     */
                    QueryUpgradedConsensusStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryUpgradedConsensusStateRequest)
                            return object;
                        return new $root.ibc.core.client.v1.QueryUpgradedConsensusStateRequest();
                    };

                    /**
                     * Creates a plain object from a QueryUpgradedConsensusStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryUpgradedConsensusStateRequest} message QueryUpgradedConsensusStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUpgradedConsensusStateRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryUpgradedConsensusStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUpgradedConsensusStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUpgradedConsensusStateRequest;
                })();

                v1.QueryUpgradedConsensusStateResponse = (function() {

                    /**
                     * Properties of a QueryUpgradedConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryUpgradedConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [upgraded_consensus_state] QueryUpgradedConsensusStateResponse upgraded_consensus_state
                     */

                    /**
                     * Constructs a new QueryUpgradedConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryUpgradedConsensusStateResponse.
                     * @implements IQueryUpgradedConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateResponse=} [properties] Properties to set
                     */
                    function QueryUpgradedConsensusStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUpgradedConsensusStateResponse upgraded_consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} upgraded_consensus_state
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @instance
                     */
                    QueryUpgradedConsensusStateResponse.prototype.upgraded_consensus_state = null;

                    /**
                     * Encodes the specified QueryUpgradedConsensusStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateResponse} message QueryUpgradedConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedConsensusStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.upgraded_consensus_state != null && Object.hasOwnProperty.call(message, "upgraded_consensus_state"))
                            $root.google.protobuf.Any.encode(message.upgraded_consensus_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUpgradedConsensusStateResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedConsensusStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateResponse} message QueryUpgradedConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedConsensusStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUpgradedConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} QueryUpgradedConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedConsensusStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryUpgradedConsensusStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.upgraded_consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUpgradedConsensusStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} QueryUpgradedConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedConsensusStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUpgradedConsensusStateResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUpgradedConsensusStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.upgraded_consensus_state != null && message.hasOwnProperty("upgraded_consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.upgraded_consensus_state);
                            if (error)
                                return "upgraded_consensus_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUpgradedConsensusStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} QueryUpgradedConsensusStateResponse
                     */
                    QueryUpgradedConsensusStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryUpgradedConsensusStateResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryUpgradedConsensusStateResponse();
                        if (object.upgraded_consensus_state != null) {
                            if (typeof object.upgraded_consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state: object expected");
                            message.upgraded_consensus_state = $root.google.protobuf.Any.fromObject(object.upgraded_consensus_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUpgradedConsensusStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} message QueryUpgradedConsensusStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUpgradedConsensusStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.upgraded_consensus_state = null;
                        if (message.upgraded_consensus_state != null && message.hasOwnProperty("upgraded_consensus_state"))
                            object.upgraded_consensus_state = $root.google.protobuf.Any.toObject(message.upgraded_consensus_state, options);
                        return object;
                    };

                    /**
                     * Converts this QueryUpgradedConsensusStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUpgradedConsensusStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUpgradedConsensusStateResponse;
                })();

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.client.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.client.v1.IIdentifiedClientState>|null} [clients] GenesisState clients
                     * @property {Array.<ibc.core.client.v1.IClientConsensusStates>|null} [clients_consensus] GenesisState clients_consensus
                     * @property {Array.<ibc.core.client.v1.IIdentifiedGenesisMetadata>|null} [clients_metadata] GenesisState clients_metadata
                     * @property {ibc.core.client.v1.IParams|null} [params] GenesisState params
                     * @property {boolean|null} [create_localhost] GenesisState create_localhost
                     * @property {Long|null} [next_client_sequence] GenesisState next_client_sequence
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.client.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.clients = [];
                        this.clients_consensus = [];
                        this.clients_metadata = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState clients.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedClientState>} clients
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients = $util.emptyArray;

                    /**
                     * GenesisState clients_consensus.
                     * @member {Array.<ibc.core.client.v1.IClientConsensusStates>} clients_consensus
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients_consensus = $util.emptyArray;

                    /**
                     * GenesisState clients_metadata.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedGenesisMetadata>} clients_metadata
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients_metadata = $util.emptyArray;

                    /**
                     * GenesisState params.
                     * @member {ibc.core.client.v1.IParams|null|undefined} params
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * GenesisState create_localhost.
                     * @member {boolean} create_localhost
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.create_localhost = false;

                    /**
                     * GenesisState next_client_sequence.
                     * @member {Long} next_client_sequence
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_client_sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.client.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {ibc.core.client.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.clients != null && message.clients.length)
                            for (let i = 0; i < message.clients.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedClientState.encode(message.clients[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.clients_consensus != null && message.clients_consensus.length)
                            for (let i = 0; i < message.clients_consensus.length; ++i)
                                $root.ibc.core.client.v1.ClientConsensusStates.encode(message.clients_consensus[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.clients_metadata != null && message.clients_metadata.length)
                            for (let i = 0; i < message.clients_metadata.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedGenesisMetadata.encode(message.clients_metadata[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.core.client.v1.Params.encode(message.params, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.create_localhost != null && Object.hasOwnProperty.call(message, "create_localhost"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.create_localhost);
                        if (message.next_client_sequence != null && Object.hasOwnProperty.call(message, "next_client_sequence"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.next_client_sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.core.client.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {ibc.core.client.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.clients && message.clients.length))
                                    message.clients = [];
                                message.clients.push($root.ibc.core.client.v1.IdentifiedClientState.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.clients_consensus && message.clients_consensus.length))
                                    message.clients_consensus = [];
                                message.clients_consensus.push($root.ibc.core.client.v1.ClientConsensusStates.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.clients_metadata && message.clients_metadata.length))
                                    message.clients_metadata = [];
                                message.clients_metadata.push($root.ibc.core.client.v1.IdentifiedGenesisMetadata.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                message.params = $root.ibc.core.client.v1.Params.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.create_localhost = reader.bool();
                                break;
                            case 6:
                                message.next_client_sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.clients != null && message.hasOwnProperty("clients")) {
                            if (!Array.isArray(message.clients))
                                return "clients: array expected";
                            for (let i = 0; i < message.clients.length; ++i) {
                                let error = $root.ibc.core.client.v1.IdentifiedClientState.verify(message.clients[i]);
                                if (error)
                                    return "clients." + error;
                            }
                        }
                        if (message.clients_consensus != null && message.hasOwnProperty("clients_consensus")) {
                            if (!Array.isArray(message.clients_consensus))
                                return "clients_consensus: array expected";
                            for (let i = 0; i < message.clients_consensus.length; ++i) {
                                let error = $root.ibc.core.client.v1.ClientConsensusStates.verify(message.clients_consensus[i]);
                                if (error)
                                    return "clients_consensus." + error;
                            }
                        }
                        if (message.clients_metadata != null && message.hasOwnProperty("clients_metadata")) {
                            if (!Array.isArray(message.clients_metadata))
                                return "clients_metadata: array expected";
                            for (let i = 0; i < message.clients_metadata.length; ++i) {
                                let error = $root.ibc.core.client.v1.IdentifiedGenesisMetadata.verify(message.clients_metadata[i]);
                                if (error)
                                    return "clients_metadata." + error;
                            }
                        }
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.core.client.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        if (message.create_localhost != null && message.hasOwnProperty("create_localhost"))
                            if (typeof message.create_localhost !== "boolean")
                                return "create_localhost: boolean expected";
                        if (message.next_client_sequence != null && message.hasOwnProperty("next_client_sequence"))
                            if (!$util.isInteger(message.next_client_sequence) && !(message.next_client_sequence && $util.isInteger(message.next_client_sequence.low) && $util.isInteger(message.next_client_sequence.high)))
                                return "next_client_sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.core.client.v1.GenesisState();
                        if (object.clients) {
                            if (!Array.isArray(object.clients))
                                throw TypeError(".ibc.core.client.v1.GenesisState.clients: array expected");
                            message.clients = [];
                            for (let i = 0; i < object.clients.length; ++i) {
                                if (typeof object.clients[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.GenesisState.clients: object expected");
                                message.clients[i] = $root.ibc.core.client.v1.IdentifiedClientState.fromObject(object.clients[i]);
                            }
                        }
                        if (object.clients_consensus) {
                            if (!Array.isArray(object.clients_consensus))
                                throw TypeError(".ibc.core.client.v1.GenesisState.clients_consensus: array expected");
                            message.clients_consensus = [];
                            for (let i = 0; i < object.clients_consensus.length; ++i) {
                                if (typeof object.clients_consensus[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.GenesisState.clients_consensus: object expected");
                                message.clients_consensus[i] = $root.ibc.core.client.v1.ClientConsensusStates.fromObject(object.clients_consensus[i]);
                            }
                        }
                        if (object.clients_metadata) {
                            if (!Array.isArray(object.clients_metadata))
                                throw TypeError(".ibc.core.client.v1.GenesisState.clients_metadata: array expected");
                            message.clients_metadata = [];
                            for (let i = 0; i < object.clients_metadata.length; ++i) {
                                if (typeof object.clients_metadata[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.GenesisState.clients_metadata: object expected");
                                message.clients_metadata[i] = $root.ibc.core.client.v1.IdentifiedGenesisMetadata.fromObject(object.clients_metadata[i]);
                            }
                        }
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.core.client.v1.GenesisState.params: object expected");
                            message.params = $root.ibc.core.client.v1.Params.fromObject(object.params);
                        }
                        if (object.create_localhost != null)
                            message.create_localhost = Boolean(object.create_localhost);
                        if (object.next_client_sequence != null)
                            if ($util.Long)
                                (message.next_client_sequence = $util.Long.fromValue(object.next_client_sequence)).unsigned = true;
                            else if (typeof object.next_client_sequence === "string")
                                message.next_client_sequence = parseInt(object.next_client_sequence, 10);
                            else if (typeof object.next_client_sequence === "number")
                                message.next_client_sequence = object.next_client_sequence;
                            else if (typeof object.next_client_sequence === "object")
                                message.next_client_sequence = new $util.LongBits(object.next_client_sequence.low >>> 0, object.next_client_sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {ibc.core.client.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.clients = [];
                            object.clients_consensus = [];
                            object.clients_metadata = [];
                        }
                        if (options.defaults) {
                            object.params = null;
                            object.create_localhost = false;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_client_sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_client_sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.clients && message.clients.length) {
                            object.clients = [];
                            for (let j = 0; j < message.clients.length; ++j)
                                object.clients[j] = $root.ibc.core.client.v1.IdentifiedClientState.toObject(message.clients[j], options);
                        }
                        if (message.clients_consensus && message.clients_consensus.length) {
                            object.clients_consensus = [];
                            for (let j = 0; j < message.clients_consensus.length; ++j)
                                object.clients_consensus[j] = $root.ibc.core.client.v1.ClientConsensusStates.toObject(message.clients_consensus[j], options);
                        }
                        if (message.clients_metadata && message.clients_metadata.length) {
                            object.clients_metadata = [];
                            for (let j = 0; j < message.clients_metadata.length; ++j)
                                object.clients_metadata[j] = $root.ibc.core.client.v1.IdentifiedGenesisMetadata.toObject(message.clients_metadata[j], options);
                        }
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.core.client.v1.Params.toObject(message.params, options);
                        if (message.create_localhost != null && message.hasOwnProperty("create_localhost"))
                            object.create_localhost = message.create_localhost;
                        if (message.next_client_sequence != null && message.hasOwnProperty("next_client_sequence"))
                            if (typeof message.next_client_sequence === "number")
                                object.next_client_sequence = options.longs === String ? String(message.next_client_sequence) : message.next_client_sequence;
                            else
                                object.next_client_sequence = options.longs === String ? $util.Long.prototype.toString.call(message.next_client_sequence) : options.longs === Number ? new $util.LongBits(message.next_client_sequence.low >>> 0, message.next_client_sequence.high >>> 0).toNumber(true) : message.next_client_sequence;
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                v1.GenesisMetadata = (function() {

                    /**
                     * Properties of a GenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @interface IGenesisMetadata
                     * @property {Uint8Array|null} [key] GenesisMetadata key
                     * @property {Uint8Array|null} [value] GenesisMetadata value
                     */

                    /**
                     * Constructs a new GenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a GenesisMetadata.
                     * @implements IGenesisMetadata
                     * @constructor
                     * @param {ibc.core.client.v1.IGenesisMetadata=} [properties] Properties to set
                     */
                    function GenesisMetadata(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisMetadata key.
                     * @member {Uint8Array} key
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @instance
                     */
                    GenesisMetadata.prototype.key = $util.newBuffer([]);

                    /**
                     * GenesisMetadata value.
                     * @member {Uint8Array} value
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @instance
                     */
                    GenesisMetadata.prototype.value = $util.newBuffer([]);

                    /**
                     * Encodes the specified GenesisMetadata message. Does not implicitly {@link ibc.core.client.v1.GenesisMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IGenesisMetadata} message GenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisMetadata message, length delimited. Does not implicitly {@link ibc.core.client.v1.GenesisMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IGenesisMetadata} message GenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.GenesisMetadata} GenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.GenesisMetadata();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            case 2:
                                message.value = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.GenesisMetadata} GenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisMetadata message.
                     * @function verify
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                                return "value: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a GenesisMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.GenesisMetadata} GenesisMetadata
                     */
                    GenesisMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.GenesisMetadata)
                            return object;
                        let message = new $root.ibc.core.client.v1.GenesisMetadata();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        if (object.value != null)
                            if (typeof object.value === "string")
                                $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                            else if (object.value.length)
                                message.value = object.value;
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.GenesisMetadata} message GenesisMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                            if (options.bytes === String)
                                object.value = "";
                            else {
                                object.value = [];
                                if (options.bytes !== Array)
                                    object.value = $util.newBuffer(object.value);
                            }
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                        return object;
                    };

                    /**
                     * Converts this GenesisMetadata to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisMetadata;
                })();

                v1.IdentifiedGenesisMetadata = (function() {

                    /**
                     * Properties of an IdentifiedGenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @interface IIdentifiedGenesisMetadata
                     * @property {string|null} [client_id] IdentifiedGenesisMetadata client_id
                     * @property {Array.<ibc.core.client.v1.IGenesisMetadata>|null} [client_metadata] IdentifiedGenesisMetadata client_metadata
                     */

                    /**
                     * Constructs a new IdentifiedGenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an IdentifiedGenesisMetadata.
                     * @implements IIdentifiedGenesisMetadata
                     * @constructor
                     * @param {ibc.core.client.v1.IIdentifiedGenesisMetadata=} [properties] Properties to set
                     */
                    function IdentifiedGenesisMetadata(properties) {
                        this.client_metadata = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IdentifiedGenesisMetadata client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @instance
                     */
                    IdentifiedGenesisMetadata.prototype.client_id = "";

                    /**
                     * IdentifiedGenesisMetadata client_metadata.
                     * @member {Array.<ibc.core.client.v1.IGenesisMetadata>} client_metadata
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @instance
                     */
                    IdentifiedGenesisMetadata.prototype.client_metadata = $util.emptyArray;

                    /**
                     * Encodes the specified IdentifiedGenesisMetadata message. Does not implicitly {@link ibc.core.client.v1.IdentifiedGenesisMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedGenesisMetadata} message IdentifiedGenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedGenesisMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.client_metadata != null && message.client_metadata.length)
                            for (let i = 0; i < message.client_metadata.length; ++i)
                                $root.ibc.core.client.v1.GenesisMetadata.encode(message.client_metadata[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified IdentifiedGenesisMetadata message, length delimited. Does not implicitly {@link ibc.core.client.v1.IdentifiedGenesisMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedGenesisMetadata} message IdentifiedGenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedGenesisMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IdentifiedGenesisMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.IdentifiedGenesisMetadata} IdentifiedGenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedGenesisMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.IdentifiedGenesisMetadata();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                if (!(message.client_metadata && message.client_metadata.length))
                                    message.client_metadata = [];
                                message.client_metadata.push($root.ibc.core.client.v1.GenesisMetadata.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IdentifiedGenesisMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.IdentifiedGenesisMetadata} IdentifiedGenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedGenesisMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IdentifiedGenesisMetadata message.
                     * @function verify
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IdentifiedGenesisMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.client_metadata != null && message.hasOwnProperty("client_metadata")) {
                            if (!Array.isArray(message.client_metadata))
                                return "client_metadata: array expected";
                            for (let i = 0; i < message.client_metadata.length; ++i) {
                                let error = $root.ibc.core.client.v1.GenesisMetadata.verify(message.client_metadata[i]);
                                if (error)
                                    return "client_metadata." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an IdentifiedGenesisMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.IdentifiedGenesisMetadata} IdentifiedGenesisMetadata
                     */
                    IdentifiedGenesisMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.IdentifiedGenesisMetadata)
                            return object;
                        let message = new $root.ibc.core.client.v1.IdentifiedGenesisMetadata();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.client_metadata) {
                            if (!Array.isArray(object.client_metadata))
                                throw TypeError(".ibc.core.client.v1.IdentifiedGenesisMetadata.client_metadata: array expected");
                            message.client_metadata = [];
                            for (let i = 0; i < object.client_metadata.length; ++i) {
                                if (typeof object.client_metadata[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.IdentifiedGenesisMetadata.client_metadata: object expected");
                                message.client_metadata[i] = $root.ibc.core.client.v1.GenesisMetadata.fromObject(object.client_metadata[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an IdentifiedGenesisMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IdentifiedGenesisMetadata} message IdentifiedGenesisMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IdentifiedGenesisMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.client_metadata = [];
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.client_metadata && message.client_metadata.length) {
                            object.client_metadata = [];
                            for (let j = 0; j < message.client_metadata.length; ++j)
                                object.client_metadata[j] = $root.ibc.core.client.v1.GenesisMetadata.toObject(message.client_metadata[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this IdentifiedGenesisMetadata to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IdentifiedGenesisMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IdentifiedGenesisMetadata;
                })();

                return v1;
            })();

            return client;
        })();

        core.channel = (function() {

            /**
             * Namespace channel.
             * @memberof ibc.core
             * @namespace
             */
            const channel = {};

            channel.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.channel
                 * @namespace
                 */
                const v1 = {};

                v1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelOpenInit}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelOpenInitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelOpenInitResponse} [response] MsgChannelOpenInitResponse
                     */

                    /**
                     * Calls ChannelOpenInit.
                     * @function channelOpenInit
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} request MsgChannelOpenInit message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelOpenInitCallback} callback Node-style callback called with the error, if any, and MsgChannelOpenInitResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelOpenInit = function channelOpenInit(request, callback) {
                        return this.rpcCall(channelOpenInit, $root.ibc.core.channel.v1.MsgChannelOpenInit, $root.ibc.core.channel.v1.MsgChannelOpenInitResponse, request, callback);
                    }, "name", { value: "ChannelOpenInit" });

                    /**
                     * Calls ChannelOpenInit.
                     * @function channelOpenInit
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} request MsgChannelOpenInit message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelOpenInitResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelOpenTry}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelOpenTryCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelOpenTryResponse} [response] MsgChannelOpenTryResponse
                     */

                    /**
                     * Calls ChannelOpenTry.
                     * @function channelOpenTry
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} request MsgChannelOpenTry message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelOpenTryCallback} callback Node-style callback called with the error, if any, and MsgChannelOpenTryResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelOpenTry = function channelOpenTry(request, callback) {
                        return this.rpcCall(channelOpenTry, $root.ibc.core.channel.v1.MsgChannelOpenTry, $root.ibc.core.channel.v1.MsgChannelOpenTryResponse, request, callback);
                    }, "name", { value: "ChannelOpenTry" });

                    /**
                     * Calls ChannelOpenTry.
                     * @function channelOpenTry
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} request MsgChannelOpenTry message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelOpenTryResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelOpenAck}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelOpenAckCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelOpenAckResponse} [response] MsgChannelOpenAckResponse
                     */

                    /**
                     * Calls ChannelOpenAck.
                     * @function channelOpenAck
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} request MsgChannelOpenAck message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelOpenAckCallback} callback Node-style callback called with the error, if any, and MsgChannelOpenAckResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelOpenAck = function channelOpenAck(request, callback) {
                        return this.rpcCall(channelOpenAck, $root.ibc.core.channel.v1.MsgChannelOpenAck, $root.ibc.core.channel.v1.MsgChannelOpenAckResponse, request, callback);
                    }, "name", { value: "ChannelOpenAck" });

                    /**
                     * Calls ChannelOpenAck.
                     * @function channelOpenAck
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} request MsgChannelOpenAck message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelOpenAckResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelOpenConfirm}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelOpenConfirmCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} [response] MsgChannelOpenConfirmResponse
                     */

                    /**
                     * Calls ChannelOpenConfirm.
                     * @function channelOpenConfirm
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} request MsgChannelOpenConfirm message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelOpenConfirmCallback} callback Node-style callback called with the error, if any, and MsgChannelOpenConfirmResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelOpenConfirm = function channelOpenConfirm(request, callback) {
                        return this.rpcCall(channelOpenConfirm, $root.ibc.core.channel.v1.MsgChannelOpenConfirm, $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse, request, callback);
                    }, "name", { value: "ChannelOpenConfirm" });

                    /**
                     * Calls ChannelOpenConfirm.
                     * @function channelOpenConfirm
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} request MsgChannelOpenConfirm message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelOpenConfirmResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelCloseInit}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelCloseInitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelCloseInitResponse} [response] MsgChannelCloseInitResponse
                     */

                    /**
                     * Calls ChannelCloseInit.
                     * @function channelCloseInit
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} request MsgChannelCloseInit message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelCloseInitCallback} callback Node-style callback called with the error, if any, and MsgChannelCloseInitResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelCloseInit = function channelCloseInit(request, callback) {
                        return this.rpcCall(channelCloseInit, $root.ibc.core.channel.v1.MsgChannelCloseInit, $root.ibc.core.channel.v1.MsgChannelCloseInitResponse, request, callback);
                    }, "name", { value: "ChannelCloseInit" });

                    /**
                     * Calls ChannelCloseInit.
                     * @function channelCloseInit
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} request MsgChannelCloseInit message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelCloseInitResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelCloseConfirm}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelCloseConfirmCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} [response] MsgChannelCloseConfirmResponse
                     */

                    /**
                     * Calls ChannelCloseConfirm.
                     * @function channelCloseConfirm
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} request MsgChannelCloseConfirm message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelCloseConfirmCallback} callback Node-style callback called with the error, if any, and MsgChannelCloseConfirmResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelCloseConfirm = function channelCloseConfirm(request, callback) {
                        return this.rpcCall(channelCloseConfirm, $root.ibc.core.channel.v1.MsgChannelCloseConfirm, $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse, request, callback);
                    }, "name", { value: "ChannelCloseConfirm" });

                    /**
                     * Calls ChannelCloseConfirm.
                     * @function channelCloseConfirm
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} request MsgChannelCloseConfirm message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelCloseConfirmResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#recvPacket}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef RecvPacketCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgRecvPacketResponse} [response] MsgRecvPacketResponse
                     */

                    /**
                     * Calls RecvPacket.
                     * @function recvPacket
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} request MsgRecvPacket message or plain object
                     * @param {ibc.core.channel.v1.Msg.RecvPacketCallback} callback Node-style callback called with the error, if any, and MsgRecvPacketResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.recvPacket = function recvPacket(request, callback) {
                        return this.rpcCall(recvPacket, $root.ibc.core.channel.v1.MsgRecvPacket, $root.ibc.core.channel.v1.MsgRecvPacketResponse, request, callback);
                    }, "name", { value: "RecvPacket" });

                    /**
                     * Calls RecvPacket.
                     * @function recvPacket
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} request MsgRecvPacket message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgRecvPacketResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#timeout}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef TimeoutCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgTimeoutResponse} [response] MsgTimeoutResponse
                     */

                    /**
                     * Calls Timeout.
                     * @function timeout
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgTimeout} request MsgTimeout message or plain object
                     * @param {ibc.core.channel.v1.Msg.TimeoutCallback} callback Node-style callback called with the error, if any, and MsgTimeoutResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.timeout = function timeout(request, callback) {
                        return this.rpcCall(timeout, $root.ibc.core.channel.v1.MsgTimeout, $root.ibc.core.channel.v1.MsgTimeoutResponse, request, callback);
                    }, "name", { value: "Timeout" });

                    /**
                     * Calls Timeout.
                     * @function timeout
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgTimeout} request MsgTimeout message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgTimeoutResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#timeoutOnClose}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef TimeoutOnCloseCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} [response] MsgTimeoutOnCloseResponse
                     */

                    /**
                     * Calls TimeoutOnClose.
                     * @function timeoutOnClose
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} request MsgTimeoutOnClose message or plain object
                     * @param {ibc.core.channel.v1.Msg.TimeoutOnCloseCallback} callback Node-style callback called with the error, if any, and MsgTimeoutOnCloseResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.timeoutOnClose = function timeoutOnClose(request, callback) {
                        return this.rpcCall(timeoutOnClose, $root.ibc.core.channel.v1.MsgTimeoutOnClose, $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse, request, callback);
                    }, "name", { value: "TimeoutOnClose" });

                    /**
                     * Calls TimeoutOnClose.
                     * @function timeoutOnClose
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} request MsgTimeoutOnClose message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgTimeoutOnCloseResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#acknowledgement}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef AcknowledgementCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgAcknowledgementResponse} [response] MsgAcknowledgementResponse
                     */

                    /**
                     * Calls Acknowledgement.
                     * @function acknowledgement
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} request MsgAcknowledgement message or plain object
                     * @param {ibc.core.channel.v1.Msg.AcknowledgementCallback} callback Node-style callback called with the error, if any, and MsgAcknowledgementResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.acknowledgement = function acknowledgement(request, callback) {
                        return this.rpcCall(acknowledgement, $root.ibc.core.channel.v1.MsgAcknowledgement, $root.ibc.core.channel.v1.MsgAcknowledgementResponse, request, callback);
                    }, "name", { value: "Acknowledgement" });

                    /**
                     * Calls Acknowledgement.
                     * @function acknowledgement
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} request MsgAcknowledgement message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgAcknowledgementResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1.MsgChannelOpenInit = (function() {

                    /**
                     * Properties of a MsgChannelOpenInit.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenInit
                     * @property {string|null} [port_id] MsgChannelOpenInit port_id
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] MsgChannelOpenInit channel
                     * @property {string|null} [signer] MsgChannelOpenInit signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenInit.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenInit.
                     * @implements IMsgChannelOpenInit
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit=} [properties] Properties to set
                     */
                    function MsgChannelOpenInit(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelOpenInit port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.port_id = "";

                    /**
                     * MsgChannelOpenInit channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.channel = null;

                    /**
                     * MsgChannelOpenInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenInit message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} message MsgChannelOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInit.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenInit message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInit.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} message MsgChannelOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInit.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInit} MsgChannelOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInit.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenInit();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenInit message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInit} MsgChannelOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInit.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenInit message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenInit.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenInit message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInit} MsgChannelOpenInit
                     */
                    MsgChannelOpenInit.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenInit)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelOpenInit();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenInit.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenInit message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenInit} message MsgChannelOpenInit
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenInit.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelOpenInit to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenInit.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenInit;
                })();

                v1.MsgChannelOpenInitResponse = (function() {

                    /**
                     * Properties of a MsgChannelOpenInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenInitResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenInitResponse.
                     * @implements IMsgChannelOpenInitResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInitResponse=} [properties] Properties to set
                     */
                    function MsgChannelOpenInitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenInitResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInitResponse} message MsgChannelOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenInitResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInitResponse} message MsgChannelOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInitResponse} MsgChannelOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenInitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenInitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInitResponse} MsgChannelOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenInitResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenInitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenInitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInitResponse} MsgChannelOpenInitResponse
                     */
                    MsgChannelOpenInitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenInitResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelOpenInitResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenInitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenInitResponse} message MsgChannelOpenInitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenInitResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelOpenInitResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenInitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenInitResponse;
                })();

                v1.MsgChannelOpenTry = (function() {

                    /**
                     * Properties of a MsgChannelOpenTry.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenTry
                     * @property {string|null} [port_id] MsgChannelOpenTry port_id
                     * @property {string|null} [previous_channel_id] MsgChannelOpenTry previous_channel_id
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] MsgChannelOpenTry channel
                     * @property {string|null} [counterparty_version] MsgChannelOpenTry counterparty_version
                     * @property {Uint8Array|null} [proof_init] MsgChannelOpenTry proof_init
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenTry proof_height
                     * @property {string|null} [signer] MsgChannelOpenTry signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenTry.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenTry.
                     * @implements IMsgChannelOpenTry
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry=} [properties] Properties to set
                     */
                    function MsgChannelOpenTry(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelOpenTry port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.port_id = "";

                    /**
                     * MsgChannelOpenTry previous_channel_id.
                     * @member {string} previous_channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.previous_channel_id = "";

                    /**
                     * MsgChannelOpenTry channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.channel = null;

                    /**
                     * MsgChannelOpenTry counterparty_version.
                     * @member {string} counterparty_version
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.counterparty_version = "";

                    /**
                     * MsgChannelOpenTry proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenTry proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenTry signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenTry message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTry.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} message MsgChannelOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTry.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.previous_channel_id != null && Object.hasOwnProperty.call(message, "previous_channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.previous_channel_id);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.counterparty_version != null && Object.hasOwnProperty.call(message, "counterparty_version"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.counterparty_version);
                        if (message.proof_init != null && Object.hasOwnProperty.call(message, "proof_init"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.proof_init);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenTry message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTry.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} message MsgChannelOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTry.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenTry message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTry} MsgChannelOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTry.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenTry();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.previous_channel_id = reader.string();
                                break;
                            case 3:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.counterparty_version = reader.string();
                                break;
                            case 5:
                                message.proof_init = reader.bytes();
                                break;
                            case 6:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenTry message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTry} MsgChannelOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTry.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenTry message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenTry.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.previous_channel_id != null && message.hasOwnProperty("previous_channel_id"))
                            if (!$util.isString(message.previous_channel_id))
                                return "previous_channel_id: string expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        if (message.counterparty_version != null && message.hasOwnProperty("counterparty_version"))
                            if (!$util.isString(message.counterparty_version))
                                return "counterparty_version: string expected";
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            if (!(message.proof_init && typeof message.proof_init.length === "number" || $util.isString(message.proof_init)))
                                return "proof_init: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenTry message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTry} MsgChannelOpenTry
                     */
                    MsgChannelOpenTry.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenTry)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelOpenTry();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.previous_channel_id != null)
                            message.previous_channel_id = String(object.previous_channel_id);
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenTry.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        if (object.counterparty_version != null)
                            message.counterparty_version = String(object.counterparty_version);
                        if (object.proof_init != null)
                            if (typeof object.proof_init === "string")
                                $util.base64.decode(object.proof_init, message.proof_init = $util.newBuffer($util.base64.length(object.proof_init)), 0);
                            else if (object.proof_init.length)
                                message.proof_init = object.proof_init;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenTry.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenTry message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenTry} message MsgChannelOpenTry
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenTry.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.previous_channel_id = "";
                            object.channel = null;
                            object.counterparty_version = "";
                            if (options.bytes === String)
                                object.proof_init = "";
                            else {
                                object.proof_init = [];
                                if (options.bytes !== Array)
                                    object.proof_init = $util.newBuffer(object.proof_init);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.previous_channel_id != null && message.hasOwnProperty("previous_channel_id"))
                            object.previous_channel_id = message.previous_channel_id;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        if (message.counterparty_version != null && message.hasOwnProperty("counterparty_version"))
                            object.counterparty_version = message.counterparty_version;
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            object.proof_init = options.bytes === String ? $util.base64.encode(message.proof_init, 0, message.proof_init.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_init) : message.proof_init;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelOpenTry to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenTry.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenTry;
                })();

                v1.MsgChannelOpenTryResponse = (function() {

                    /**
                     * Properties of a MsgChannelOpenTryResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenTryResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenTryResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenTryResponse.
                     * @implements IMsgChannelOpenTryResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTryResponse=} [properties] Properties to set
                     */
                    function MsgChannelOpenTryResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenTryResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTryResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTryResponse} message MsgChannelOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTryResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenTryResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTryResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTryResponse} message MsgChannelOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenTryResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTryResponse} MsgChannelOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTryResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenTryResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenTryResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTryResponse} MsgChannelOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTryResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenTryResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenTryResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenTryResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTryResponse} MsgChannelOpenTryResponse
                     */
                    MsgChannelOpenTryResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenTryResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelOpenTryResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenTryResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenTryResponse} message MsgChannelOpenTryResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenTryResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelOpenTryResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenTryResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenTryResponse;
                })();

                v1.MsgChannelOpenAck = (function() {

                    /**
                     * Properties of a MsgChannelOpenAck.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenAck
                     * @property {string|null} [port_id] MsgChannelOpenAck port_id
                     * @property {string|null} [channel_id] MsgChannelOpenAck channel_id
                     * @property {string|null} [counterparty_channel_id] MsgChannelOpenAck counterparty_channel_id
                     * @property {string|null} [counterparty_version] MsgChannelOpenAck counterparty_version
                     * @property {Uint8Array|null} [proof_try] MsgChannelOpenAck proof_try
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenAck proof_height
                     * @property {string|null} [signer] MsgChannelOpenAck signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenAck.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenAck.
                     * @implements IMsgChannelOpenAck
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck=} [properties] Properties to set
                     */
                    function MsgChannelOpenAck(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelOpenAck port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.port_id = "";

                    /**
                     * MsgChannelOpenAck channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.channel_id = "";

                    /**
                     * MsgChannelOpenAck counterparty_channel_id.
                     * @member {string} counterparty_channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.counterparty_channel_id = "";

                    /**
                     * MsgChannelOpenAck counterparty_version.
                     * @member {string} counterparty_version
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.counterparty_version = "";

                    /**
                     * MsgChannelOpenAck proof_try.
                     * @member {Uint8Array} proof_try
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.proof_try = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenAck proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenAck signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenAck message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAck.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} message MsgChannelOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAck.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.counterparty_channel_id != null && Object.hasOwnProperty.call(message, "counterparty_channel_id"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.counterparty_channel_id);
                        if (message.counterparty_version != null && Object.hasOwnProperty.call(message, "counterparty_version"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.counterparty_version);
                        if (message.proof_try != null && Object.hasOwnProperty.call(message, "proof_try"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.proof_try);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenAck message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAck.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} message MsgChannelOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAck.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenAck message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAck} MsgChannelOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAck.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenAck();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.counterparty_channel_id = reader.string();
                                break;
                            case 4:
                                message.counterparty_version = reader.string();
                                break;
                            case 5:
                                message.proof_try = reader.bytes();
                                break;
                            case 6:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenAck message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAck} MsgChannelOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAck.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenAck message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenAck.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.counterparty_channel_id != null && message.hasOwnProperty("counterparty_channel_id"))
                            if (!$util.isString(message.counterparty_channel_id))
                                return "counterparty_channel_id: string expected";
                        if (message.counterparty_version != null && message.hasOwnProperty("counterparty_version"))
                            if (!$util.isString(message.counterparty_version))
                                return "counterparty_version: string expected";
                        if (message.proof_try != null && message.hasOwnProperty("proof_try"))
                            if (!(message.proof_try && typeof message.proof_try.length === "number" || $util.isString(message.proof_try)))
                                return "proof_try: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenAck message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAck} MsgChannelOpenAck
                     */
                    MsgChannelOpenAck.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenAck)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelOpenAck();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.counterparty_channel_id != null)
                            message.counterparty_channel_id = String(object.counterparty_channel_id);
                        if (object.counterparty_version != null)
                            message.counterparty_version = String(object.counterparty_version);
                        if (object.proof_try != null)
                            if (typeof object.proof_try === "string")
                                $util.base64.decode(object.proof_try, message.proof_try = $util.newBuffer($util.base64.length(object.proof_try)), 0);
                            else if (object.proof_try.length)
                                message.proof_try = object.proof_try;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenAck.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenAck message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenAck} message MsgChannelOpenAck
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenAck.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            object.counterparty_channel_id = "";
                            object.counterparty_version = "";
                            if (options.bytes === String)
                                object.proof_try = "";
                            else {
                                object.proof_try = [];
                                if (options.bytes !== Array)
                                    object.proof_try = $util.newBuffer(object.proof_try);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.counterparty_channel_id != null && message.hasOwnProperty("counterparty_channel_id"))
                            object.counterparty_channel_id = message.counterparty_channel_id;
                        if (message.counterparty_version != null && message.hasOwnProperty("counterparty_version"))
                            object.counterparty_version = message.counterparty_version;
                        if (message.proof_try != null && message.hasOwnProperty("proof_try"))
                            object.proof_try = options.bytes === String ? $util.base64.encode(message.proof_try, 0, message.proof_try.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_try) : message.proof_try;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelOpenAck to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenAck.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenAck;
                })();

                v1.MsgChannelOpenAckResponse = (function() {

                    /**
                     * Properties of a MsgChannelOpenAckResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenAckResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenAckResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenAckResponse.
                     * @implements IMsgChannelOpenAckResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAckResponse=} [properties] Properties to set
                     */
                    function MsgChannelOpenAckResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenAckResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAckResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAckResponse} message MsgChannelOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAckResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenAckResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAckResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAckResponse} message MsgChannelOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAckResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenAckResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAckResponse} MsgChannelOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAckResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenAckResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenAckResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAckResponse} MsgChannelOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAckResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenAckResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenAckResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenAckResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAckResponse} MsgChannelOpenAckResponse
                     */
                    MsgChannelOpenAckResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenAckResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelOpenAckResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenAckResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenAckResponse} message MsgChannelOpenAckResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenAckResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelOpenAckResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenAckResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenAckResponse;
                })();

                v1.MsgChannelOpenConfirm = (function() {

                    /**
                     * Properties of a MsgChannelOpenConfirm.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenConfirm
                     * @property {string|null} [port_id] MsgChannelOpenConfirm port_id
                     * @property {string|null} [channel_id] MsgChannelOpenConfirm channel_id
                     * @property {Uint8Array|null} [proof_ack] MsgChannelOpenConfirm proof_ack
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenConfirm proof_height
                     * @property {string|null} [signer] MsgChannelOpenConfirm signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenConfirm.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenConfirm.
                     * @implements IMsgChannelOpenConfirm
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm=} [properties] Properties to set
                     */
                    function MsgChannelOpenConfirm(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelOpenConfirm port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.port_id = "";

                    /**
                     * MsgChannelOpenConfirm channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.channel_id = "";

                    /**
                     * MsgChannelOpenConfirm proof_ack.
                     * @member {Uint8Array} proof_ack
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.proof_ack = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenConfirm message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} message MsgChannelOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirm.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.proof_ack != null && Object.hasOwnProperty.call(message, "proof_ack"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof_ack);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenConfirm message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirm.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} message MsgChannelOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirm.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirm} MsgChannelOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirm.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenConfirm();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.proof_ack = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirm message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirm} MsgChannelOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirm.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenConfirm message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenConfirm.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.proof_ack != null && message.hasOwnProperty("proof_ack"))
                            if (!(message.proof_ack && typeof message.proof_ack.length === "number" || $util.isString(message.proof_ack)))
                                return "proof_ack: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenConfirm message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirm} MsgChannelOpenConfirm
                     */
                    MsgChannelOpenConfirm.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenConfirm)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelOpenConfirm();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.proof_ack != null)
                            if (typeof object.proof_ack === "string")
                                $util.base64.decode(object.proof_ack, message.proof_ack = $util.newBuffer($util.base64.length(object.proof_ack)), 0);
                            else if (object.proof_ack.length)
                                message.proof_ack = object.proof_ack;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenConfirm.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenConfirm message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenConfirm} message MsgChannelOpenConfirm
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenConfirm.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if (options.bytes === String)
                                object.proof_ack = "";
                            else {
                                object.proof_ack = [];
                                if (options.bytes !== Array)
                                    object.proof_ack = $util.newBuffer(object.proof_ack);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.proof_ack != null && message.hasOwnProperty("proof_ack"))
                            object.proof_ack = options.bytes === String ? $util.base64.encode(message.proof_ack, 0, message.proof_ack.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_ack) : message.proof_ack;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelOpenConfirm to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenConfirm.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenConfirm;
                })();

                v1.MsgChannelOpenConfirmResponse = (function() {

                    /**
                     * Properties of a MsgChannelOpenConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenConfirmResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenConfirmResponse.
                     * @implements IMsgChannelOpenConfirmResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirmResponse=} [properties] Properties to set
                     */
                    function MsgChannelOpenConfirmResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenConfirmResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirmResponse} message MsgChannelOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirmResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenConfirmResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirmResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirmResponse} message MsgChannelOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} MsgChannelOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirmResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirmResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} MsgChannelOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenConfirmResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenConfirmResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenConfirmResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} MsgChannelOpenConfirmResponse
                     */
                    MsgChannelOpenConfirmResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenConfirmResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} message MsgChannelOpenConfirmResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenConfirmResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelOpenConfirmResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenConfirmResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenConfirmResponse;
                })();

                v1.MsgChannelCloseInit = (function() {

                    /**
                     * Properties of a MsgChannelCloseInit.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseInit
                     * @property {string|null} [port_id] MsgChannelCloseInit port_id
                     * @property {string|null} [channel_id] MsgChannelCloseInit channel_id
                     * @property {string|null} [signer] MsgChannelCloseInit signer
                     */

                    /**
                     * Constructs a new MsgChannelCloseInit.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseInit.
                     * @implements IMsgChannelCloseInit
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit=} [properties] Properties to set
                     */
                    function MsgChannelCloseInit(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelCloseInit port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.port_id = "";

                    /**
                     * MsgChannelCloseInit channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.channel_id = "";

                    /**
                     * MsgChannelCloseInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelCloseInit message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} message MsgChannelCloseInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInit.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelCloseInit message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInit.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} message MsgChannelCloseInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInit.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelCloseInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInit} MsgChannelCloseInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInit.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelCloseInit();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelCloseInit message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInit} MsgChannelCloseInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInit.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelCloseInit message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelCloseInit.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelCloseInit message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInit} MsgChannelCloseInit
                     */
                    MsgChannelCloseInit.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelCloseInit)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelCloseInit();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelCloseInit message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelCloseInit} message MsgChannelCloseInit
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelCloseInit.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelCloseInit to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelCloseInit.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelCloseInit;
                })();

                v1.MsgChannelCloseInitResponse = (function() {

                    /**
                     * Properties of a MsgChannelCloseInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseInitResponse
                     */

                    /**
                     * Constructs a new MsgChannelCloseInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseInitResponse.
                     * @implements IMsgChannelCloseInitResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInitResponse=} [properties] Properties to set
                     */
                    function MsgChannelCloseInitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelCloseInitResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInitResponse} message MsgChannelCloseInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelCloseInitResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInitResponse} message MsgChannelCloseInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelCloseInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInitResponse} MsgChannelCloseInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelCloseInitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelCloseInitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInitResponse} MsgChannelCloseInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelCloseInitResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelCloseInitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelCloseInitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInitResponse} MsgChannelCloseInitResponse
                     */
                    MsgChannelCloseInitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelCloseInitResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelCloseInitResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelCloseInitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelCloseInitResponse} message MsgChannelCloseInitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelCloseInitResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelCloseInitResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelCloseInitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelCloseInitResponse;
                })();

                v1.MsgChannelCloseConfirm = (function() {

                    /**
                     * Properties of a MsgChannelCloseConfirm.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseConfirm
                     * @property {string|null} [port_id] MsgChannelCloseConfirm port_id
                     * @property {string|null} [channel_id] MsgChannelCloseConfirm channel_id
                     * @property {Uint8Array|null} [proof_init] MsgChannelCloseConfirm proof_init
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelCloseConfirm proof_height
                     * @property {string|null} [signer] MsgChannelCloseConfirm signer
                     */

                    /**
                     * Constructs a new MsgChannelCloseConfirm.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseConfirm.
                     * @implements IMsgChannelCloseConfirm
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm=} [properties] Properties to set
                     */
                    function MsgChannelCloseConfirm(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelCloseConfirm port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.port_id = "";

                    /**
                     * MsgChannelCloseConfirm channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.channel_id = "";

                    /**
                     * MsgChannelCloseConfirm proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgChannelCloseConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.proof_height = null;

                    /**
                     * MsgChannelCloseConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelCloseConfirm message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} message MsgChannelCloseConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirm.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.proof_init != null && Object.hasOwnProperty.call(message, "proof_init"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof_init);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelCloseConfirm message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirm.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} message MsgChannelCloseConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirm.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirm} MsgChannelCloseConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirm.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelCloseConfirm();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.proof_init = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirm message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirm} MsgChannelCloseConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirm.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelCloseConfirm message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelCloseConfirm.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            if (!(message.proof_init && typeof message.proof_init.length === "number" || $util.isString(message.proof_init)))
                                return "proof_init: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelCloseConfirm message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirm} MsgChannelCloseConfirm
                     */
                    MsgChannelCloseConfirm.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelCloseConfirm)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelCloseConfirm();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.proof_init != null)
                            if (typeof object.proof_init === "string")
                                $util.base64.decode(object.proof_init, message.proof_init = $util.newBuffer($util.base64.length(object.proof_init)), 0);
                            else if (object.proof_init.length)
                                message.proof_init = object.proof_init;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelCloseConfirm.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelCloseConfirm message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelCloseConfirm} message MsgChannelCloseConfirm
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelCloseConfirm.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if (options.bytes === String)
                                object.proof_init = "";
                            else {
                                object.proof_init = [];
                                if (options.bytes !== Array)
                                    object.proof_init = $util.newBuffer(object.proof_init);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            object.proof_init = options.bytes === String ? $util.base64.encode(message.proof_init, 0, message.proof_init.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_init) : message.proof_init;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelCloseConfirm to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelCloseConfirm.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelCloseConfirm;
                })();

                v1.MsgChannelCloseConfirmResponse = (function() {

                    /**
                     * Properties of a MsgChannelCloseConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseConfirmResponse
                     */

                    /**
                     * Constructs a new MsgChannelCloseConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseConfirmResponse.
                     * @implements IMsgChannelCloseConfirmResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirmResponse=} [properties] Properties to set
                     */
                    function MsgChannelCloseConfirmResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelCloseConfirmResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirmResponse} message MsgChannelCloseConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirmResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelCloseConfirmResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirmResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirmResponse} message MsgChannelCloseConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} MsgChannelCloseConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirmResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirmResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} MsgChannelCloseConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelCloseConfirmResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelCloseConfirmResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelCloseConfirmResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} MsgChannelCloseConfirmResponse
                     */
                    MsgChannelCloseConfirmResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelCloseConfirmResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} message MsgChannelCloseConfirmResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelCloseConfirmResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelCloseConfirmResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelCloseConfirmResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelCloseConfirmResponse;
                })();

                v1.MsgRecvPacket = (function() {

                    /**
                     * Properties of a MsgRecvPacket.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgRecvPacket
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgRecvPacket packet
                     * @property {Uint8Array|null} [proof_commitment] MsgRecvPacket proof_commitment
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgRecvPacket proof_height
                     * @property {string|null} [signer] MsgRecvPacket signer
                     */

                    /**
                     * Constructs a new MsgRecvPacket.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgRecvPacket.
                     * @implements IMsgRecvPacket
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgRecvPacket=} [properties] Properties to set
                     */
                    function MsgRecvPacket(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgRecvPacket packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.packet = null;

                    /**
                     * MsgRecvPacket proof_commitment.
                     * @member {Uint8Array} proof_commitment
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.proof_commitment = $util.newBuffer([]);

                    /**
                     * MsgRecvPacket proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.proof_height = null;

                    /**
                     * MsgRecvPacket signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.signer = "";

                    /**
                     * Encodes the specified MsgRecvPacket message. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacket.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} message MsgRecvPacket message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacket.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof_commitment != null && Object.hasOwnProperty.call(message, "proof_commitment"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof_commitment);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgRecvPacket message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacket.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} message MsgRecvPacket message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacket.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgRecvPacket message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgRecvPacket} MsgRecvPacket
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacket.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgRecvPacket();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof_commitment = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgRecvPacket message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgRecvPacket} MsgRecvPacket
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacket.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgRecvPacket message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgRecvPacket.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packet != null && message.hasOwnProperty("packet")) {
                            let error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                            if (error)
                                return "packet." + error;
                        }
                        if (message.proof_commitment != null && message.hasOwnProperty("proof_commitment"))
                            if (!(message.proof_commitment && typeof message.proof_commitment.length === "number" || $util.isString(message.proof_commitment)))
                                return "proof_commitment: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgRecvPacket message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgRecvPacket} MsgRecvPacket
                     */
                    MsgRecvPacket.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgRecvPacket)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgRecvPacket();
                        if (object.packet != null) {
                            if (typeof object.packet !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgRecvPacket.packet: object expected");
                            message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                        }
                        if (object.proof_commitment != null)
                            if (typeof object.proof_commitment === "string")
                                $util.base64.decode(object.proof_commitment, message.proof_commitment = $util.newBuffer($util.base64.length(object.proof_commitment)), 0);
                            else if (object.proof_commitment.length)
                                message.proof_commitment = object.proof_commitment;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgRecvPacket.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgRecvPacket message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {ibc.core.channel.v1.MsgRecvPacket} message MsgRecvPacket
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgRecvPacket.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.packet = null;
                            if (options.bytes === String)
                                object.proof_commitment = "";
                            else {
                                object.proof_commitment = [];
                                if (options.bytes !== Array)
                                    object.proof_commitment = $util.newBuffer(object.proof_commitment);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.packet != null && message.hasOwnProperty("packet"))
                            object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                        if (message.proof_commitment != null && message.hasOwnProperty("proof_commitment"))
                            object.proof_commitment = options.bytes === String ? $util.base64.encode(message.proof_commitment, 0, message.proof_commitment.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_commitment) : message.proof_commitment;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgRecvPacket to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgRecvPacket.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgRecvPacket;
                })();

                v1.MsgRecvPacketResponse = (function() {

                    /**
                     * Properties of a MsgRecvPacketResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgRecvPacketResponse
                     */

                    /**
                     * Constructs a new MsgRecvPacketResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgRecvPacketResponse.
                     * @implements IMsgRecvPacketResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgRecvPacketResponse=} [properties] Properties to set
                     */
                    function MsgRecvPacketResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgRecvPacketResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacketResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacketResponse} message MsgRecvPacketResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacketResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgRecvPacketResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacketResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacketResponse} message MsgRecvPacketResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacketResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgRecvPacketResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgRecvPacketResponse} MsgRecvPacketResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacketResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgRecvPacketResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgRecvPacketResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgRecvPacketResponse} MsgRecvPacketResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacketResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgRecvPacketResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgRecvPacketResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgRecvPacketResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgRecvPacketResponse} MsgRecvPacketResponse
                     */
                    MsgRecvPacketResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgRecvPacketResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgRecvPacketResponse();
                    };

                    /**
                     * Creates a plain object from a MsgRecvPacketResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgRecvPacketResponse} message MsgRecvPacketResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgRecvPacketResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgRecvPacketResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgRecvPacketResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgRecvPacketResponse;
                })();

                v1.MsgTimeout = (function() {

                    /**
                     * Properties of a MsgTimeout.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeout
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgTimeout packet
                     * @property {Uint8Array|null} [proof_unreceived] MsgTimeout proof_unreceived
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgTimeout proof_height
                     * @property {Long|null} [next_sequence_recv] MsgTimeout next_sequence_recv
                     * @property {string|null} [signer] MsgTimeout signer
                     */

                    /**
                     * Constructs a new MsgTimeout.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeout.
                     * @implements IMsgTimeout
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeout=} [properties] Properties to set
                     */
                    function MsgTimeout(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgTimeout packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.packet = null;

                    /**
                     * MsgTimeout proof_unreceived.
                     * @member {Uint8Array} proof_unreceived
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.proof_unreceived = $util.newBuffer([]);

                    /**
                     * MsgTimeout proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.proof_height = null;

                    /**
                     * MsgTimeout next_sequence_recv.
                     * @member {Long} next_sequence_recv
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.next_sequence_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * MsgTimeout signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.signer = "";

                    /**
                     * Encodes the specified MsgTimeout message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeout.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeout} message MsgTimeout message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeout.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof_unreceived != null && Object.hasOwnProperty.call(message, "proof_unreceived"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof_unreceived);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.next_sequence_recv != null && Object.hasOwnProperty.call(message, "next_sequence_recv"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.next_sequence_recv);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTimeout message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgTimeout.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeout} message MsgTimeout message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeout.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTimeout message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeout} MsgTimeout
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeout.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgTimeout();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof_unreceived = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.next_sequence_recv = reader.uint64();
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTimeout message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgTimeout} MsgTimeout
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeout.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTimeout message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTimeout.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packet != null && message.hasOwnProperty("packet")) {
                            let error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                            if (error)
                                return "packet." + error;
                        }
                        if (message.proof_unreceived != null && message.hasOwnProperty("proof_unreceived"))
                            if (!(message.proof_unreceived && typeof message.proof_unreceived.length === "number" || $util.isString(message.proof_unreceived)))
                                return "proof_unreceived: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.next_sequence_recv != null && message.hasOwnProperty("next_sequence_recv"))
                            if (!$util.isInteger(message.next_sequence_recv) && !(message.next_sequence_recv && $util.isInteger(message.next_sequence_recv.low) && $util.isInteger(message.next_sequence_recv.high)))
                                return "next_sequence_recv: integer|Long expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTimeout message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgTimeout} MsgTimeout
                     */
                    MsgTimeout.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgTimeout)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgTimeout();
                        if (object.packet != null) {
                            if (typeof object.packet !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgTimeout.packet: object expected");
                            message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                        }
                        if (object.proof_unreceived != null)
                            if (typeof object.proof_unreceived === "string")
                                $util.base64.decode(object.proof_unreceived, message.proof_unreceived = $util.newBuffer($util.base64.length(object.proof_unreceived)), 0);
                            else if (object.proof_unreceived.length)
                                message.proof_unreceived = object.proof_unreceived;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgTimeout.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.next_sequence_recv != null)
                            if ($util.Long)
                                (message.next_sequence_recv = $util.Long.fromValue(object.next_sequence_recv)).unsigned = true;
                            else if (typeof object.next_sequence_recv === "string")
                                message.next_sequence_recv = parseInt(object.next_sequence_recv, 10);
                            else if (typeof object.next_sequence_recv === "number")
                                message.next_sequence_recv = object.next_sequence_recv;
                            else if (typeof object.next_sequence_recv === "object")
                                message.next_sequence_recv = new $util.LongBits(object.next_sequence_recv.low >>> 0, object.next_sequence_recv.high >>> 0).toNumber(true);
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgTimeout message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {ibc.core.channel.v1.MsgTimeout} message MsgTimeout
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTimeout.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.packet = null;
                            if (options.bytes === String)
                                object.proof_unreceived = "";
                            else {
                                object.proof_unreceived = [];
                                if (options.bytes !== Array)
                                    object.proof_unreceived = $util.newBuffer(object.proof_unreceived);
                            }
                            object.proof_height = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_sequence_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_sequence_recv = options.longs === String ? "0" : 0;
                            object.signer = "";
                        }
                        if (message.packet != null && message.hasOwnProperty("packet"))
                            object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                        if (message.proof_unreceived != null && message.hasOwnProperty("proof_unreceived"))
                            object.proof_unreceived = options.bytes === String ? $util.base64.encode(message.proof_unreceived, 0, message.proof_unreceived.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_unreceived) : message.proof_unreceived;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.next_sequence_recv != null && message.hasOwnProperty("next_sequence_recv"))
                            if (typeof message.next_sequence_recv === "number")
                                object.next_sequence_recv = options.longs === String ? String(message.next_sequence_recv) : message.next_sequence_recv;
                            else
                                object.next_sequence_recv = options.longs === String ? $util.Long.prototype.toString.call(message.next_sequence_recv) : options.longs === Number ? new $util.LongBits(message.next_sequence_recv.low >>> 0, message.next_sequence_recv.high >>> 0).toNumber(true) : message.next_sequence_recv;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgTimeout to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTimeout.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTimeout;
                })();

                v1.MsgTimeoutResponse = (function() {

                    /**
                     * Properties of a MsgTimeoutResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutResponse
                     */

                    /**
                     * Constructs a new MsgTimeoutResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutResponse.
                     * @implements IMsgTimeoutResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutResponse=} [properties] Properties to set
                     */
                    function MsgTimeoutResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgTimeoutResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutResponse} message MsgTimeoutResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTimeoutResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutResponse} message MsgTimeoutResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTimeoutResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutResponse} MsgTimeoutResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgTimeoutResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTimeoutResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgTimeoutResponse} MsgTimeoutResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTimeoutResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTimeoutResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTimeoutResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgTimeoutResponse} MsgTimeoutResponse
                     */
                    MsgTimeoutResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgTimeoutResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgTimeoutResponse();
                    };

                    /**
                     * Creates a plain object from a MsgTimeoutResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgTimeoutResponse} message MsgTimeoutResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTimeoutResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgTimeoutResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTimeoutResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTimeoutResponse;
                })();

                v1.MsgTimeoutOnClose = (function() {

                    /**
                     * Properties of a MsgTimeoutOnClose.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutOnClose
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgTimeoutOnClose packet
                     * @property {Uint8Array|null} [proof_unreceived] MsgTimeoutOnClose proof_unreceived
                     * @property {Uint8Array|null} [proof_close] MsgTimeoutOnClose proof_close
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgTimeoutOnClose proof_height
                     * @property {Long|null} [next_sequence_recv] MsgTimeoutOnClose next_sequence_recv
                     * @property {string|null} [signer] MsgTimeoutOnClose signer
                     */

                    /**
                     * Constructs a new MsgTimeoutOnClose.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutOnClose.
                     * @implements IMsgTimeoutOnClose
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose=} [properties] Properties to set
                     */
                    function MsgTimeoutOnClose(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgTimeoutOnClose packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.packet = null;

                    /**
                     * MsgTimeoutOnClose proof_unreceived.
                     * @member {Uint8Array} proof_unreceived
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_unreceived = $util.newBuffer([]);

                    /**
                     * MsgTimeoutOnClose proof_close.
                     * @member {Uint8Array} proof_close
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_close = $util.newBuffer([]);

                    /**
                     * MsgTimeoutOnClose proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_height = null;

                    /**
                     * MsgTimeoutOnClose next_sequence_recv.
                     * @member {Long} next_sequence_recv
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.next_sequence_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * MsgTimeoutOnClose signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.signer = "";

                    /**
                     * Encodes the specified MsgTimeoutOnClose message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnClose.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} message MsgTimeoutOnClose message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnClose.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof_unreceived != null && Object.hasOwnProperty.call(message, "proof_unreceived"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof_unreceived);
                        if (message.proof_close != null && Object.hasOwnProperty.call(message, "proof_close"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof_close);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.next_sequence_recv != null && Object.hasOwnProperty.call(message, "next_sequence_recv"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.next_sequence_recv);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTimeoutOnClose message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnClose.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} message MsgTimeoutOnClose message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnClose.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTimeoutOnClose message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnClose} MsgTimeoutOnClose
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnClose.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgTimeoutOnClose();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof_unreceived = reader.bytes();
                                break;
                            case 3:
                                message.proof_close = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.next_sequence_recv = reader.uint64();
                                break;
                            case 6:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTimeoutOnClose message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnClose} MsgTimeoutOnClose
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnClose.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTimeoutOnClose message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTimeoutOnClose.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packet != null && message.hasOwnProperty("packet")) {
                            let error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                            if (error)
                                return "packet." + error;
                        }
                        if (message.proof_unreceived != null && message.hasOwnProperty("proof_unreceived"))
                            if (!(message.proof_unreceived && typeof message.proof_unreceived.length === "number" || $util.isString(message.proof_unreceived)))
                                return "proof_unreceived: buffer expected";
                        if (message.proof_close != null && message.hasOwnProperty("proof_close"))
                            if (!(message.proof_close && typeof message.proof_close.length === "number" || $util.isString(message.proof_close)))
                                return "proof_close: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.next_sequence_recv != null && message.hasOwnProperty("next_sequence_recv"))
                            if (!$util.isInteger(message.next_sequence_recv) && !(message.next_sequence_recv && $util.isInteger(message.next_sequence_recv.low) && $util.isInteger(message.next_sequence_recv.high)))
                                return "next_sequence_recv: integer|Long expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTimeoutOnClose message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnClose} MsgTimeoutOnClose
                     */
                    MsgTimeoutOnClose.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgTimeoutOnClose)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgTimeoutOnClose();
                        if (object.packet != null) {
                            if (typeof object.packet !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgTimeoutOnClose.packet: object expected");
                            message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                        }
                        if (object.proof_unreceived != null)
                            if (typeof object.proof_unreceived === "string")
                                $util.base64.decode(object.proof_unreceived, message.proof_unreceived = $util.newBuffer($util.base64.length(object.proof_unreceived)), 0);
                            else if (object.proof_unreceived.length)
                                message.proof_unreceived = object.proof_unreceived;
                        if (object.proof_close != null)
                            if (typeof object.proof_close === "string")
                                $util.base64.decode(object.proof_close, message.proof_close = $util.newBuffer($util.base64.length(object.proof_close)), 0);
                            else if (object.proof_close.length)
                                message.proof_close = object.proof_close;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgTimeoutOnClose.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.next_sequence_recv != null)
                            if ($util.Long)
                                (message.next_sequence_recv = $util.Long.fromValue(object.next_sequence_recv)).unsigned = true;
                            else if (typeof object.next_sequence_recv === "string")
                                message.next_sequence_recv = parseInt(object.next_sequence_recv, 10);
                            else if (typeof object.next_sequence_recv === "number")
                                message.next_sequence_recv = object.next_sequence_recv;
                            else if (typeof object.next_sequence_recv === "object")
                                message.next_sequence_recv = new $util.LongBits(object.next_sequence_recv.low >>> 0, object.next_sequence_recv.high >>> 0).toNumber(true);
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgTimeoutOnClose message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {ibc.core.channel.v1.MsgTimeoutOnClose} message MsgTimeoutOnClose
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTimeoutOnClose.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.packet = null;
                            if (options.bytes === String)
                                object.proof_unreceived = "";
                            else {
                                object.proof_unreceived = [];
                                if (options.bytes !== Array)
                                    object.proof_unreceived = $util.newBuffer(object.proof_unreceived);
                            }
                            if (options.bytes === String)
                                object.proof_close = "";
                            else {
                                object.proof_close = [];
                                if (options.bytes !== Array)
                                    object.proof_close = $util.newBuffer(object.proof_close);
                            }
                            object.proof_height = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_sequence_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_sequence_recv = options.longs === String ? "0" : 0;
                            object.signer = "";
                        }
                        if (message.packet != null && message.hasOwnProperty("packet"))
                            object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                        if (message.proof_unreceived != null && message.hasOwnProperty("proof_unreceived"))
                            object.proof_unreceived = options.bytes === String ? $util.base64.encode(message.proof_unreceived, 0, message.proof_unreceived.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_unreceived) : message.proof_unreceived;
                        if (message.proof_close != null && message.hasOwnProperty("proof_close"))
                            object.proof_close = options.bytes === String ? $util.base64.encode(message.proof_close, 0, message.proof_close.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_close) : message.proof_close;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.next_sequence_recv != null && message.hasOwnProperty("next_sequence_recv"))
                            if (typeof message.next_sequence_recv === "number")
                                object.next_sequence_recv = options.longs === String ? String(message.next_sequence_recv) : message.next_sequence_recv;
                            else
                                object.next_sequence_recv = options.longs === String ? $util.Long.prototype.toString.call(message.next_sequence_recv) : options.longs === Number ? new $util.LongBits(message.next_sequence_recv.low >>> 0, message.next_sequence_recv.high >>> 0).toNumber(true) : message.next_sequence_recv;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgTimeoutOnClose to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTimeoutOnClose.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTimeoutOnClose;
                })();

                v1.MsgTimeoutOnCloseResponse = (function() {

                    /**
                     * Properties of a MsgTimeoutOnCloseResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutOnCloseResponse
                     */

                    /**
                     * Constructs a new MsgTimeoutOnCloseResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutOnCloseResponse.
                     * @implements IMsgTimeoutOnCloseResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnCloseResponse=} [properties] Properties to set
                     */
                    function MsgTimeoutOnCloseResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgTimeoutOnCloseResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnCloseResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnCloseResponse} message MsgTimeoutOnCloseResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnCloseResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTimeoutOnCloseResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnCloseResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnCloseResponse} message MsgTimeoutOnCloseResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnCloseResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTimeoutOnCloseResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} MsgTimeoutOnCloseResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnCloseResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTimeoutOnCloseResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} MsgTimeoutOnCloseResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnCloseResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTimeoutOnCloseResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTimeoutOnCloseResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTimeoutOnCloseResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} MsgTimeoutOnCloseResponse
                     */
                    MsgTimeoutOnCloseResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse();
                    };

                    /**
                     * Creates a plain object from a MsgTimeoutOnCloseResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} message MsgTimeoutOnCloseResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTimeoutOnCloseResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgTimeoutOnCloseResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTimeoutOnCloseResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTimeoutOnCloseResponse;
                })();

                v1.MsgAcknowledgement = (function() {

                    /**
                     * Properties of a MsgAcknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgAcknowledgement
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgAcknowledgement packet
                     * @property {Uint8Array|null} [acknowledgement] MsgAcknowledgement acknowledgement
                     * @property {Uint8Array|null} [proof_acked] MsgAcknowledgement proof_acked
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgAcknowledgement proof_height
                     * @property {string|null} [signer] MsgAcknowledgement signer
                     */

                    /**
                     * Constructs a new MsgAcknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgAcknowledgement.
                     * @implements IMsgAcknowledgement
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement=} [properties] Properties to set
                     */
                    function MsgAcknowledgement(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgAcknowledgement packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.packet = null;

                    /**
                     * MsgAcknowledgement acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * MsgAcknowledgement proof_acked.
                     * @member {Uint8Array} proof_acked
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.proof_acked = $util.newBuffer([]);

                    /**
                     * MsgAcknowledgement proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.proof_height = null;

                    /**
                     * MsgAcknowledgement signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.signer = "";

                    /**
                     * Encodes the specified MsgAcknowledgement message. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgement.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} message MsgAcknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgement.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.acknowledgement != null && Object.hasOwnProperty.call(message, "acknowledgement"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.acknowledgement);
                        if (message.proof_acked != null && Object.hasOwnProperty.call(message, "proof_acked"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof_acked);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgAcknowledgement message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgement.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} message MsgAcknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgement.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgAcknowledgement message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgAcknowledgement} MsgAcknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgement.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgAcknowledgement();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.acknowledgement = reader.bytes();
                                break;
                            case 3:
                                message.proof_acked = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgAcknowledgement message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgAcknowledgement} MsgAcknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgement.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgAcknowledgement message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgAcknowledgement.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packet != null && message.hasOwnProperty("packet")) {
                            let error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                            if (error)
                                return "packet." + error;
                        }
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            if (!(message.acknowledgement && typeof message.acknowledgement.length === "number" || $util.isString(message.acknowledgement)))
                                return "acknowledgement: buffer expected";
                        if (message.proof_acked != null && message.hasOwnProperty("proof_acked"))
                            if (!(message.proof_acked && typeof message.proof_acked.length === "number" || $util.isString(message.proof_acked)))
                                return "proof_acked: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgAcknowledgement message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgAcknowledgement} MsgAcknowledgement
                     */
                    MsgAcknowledgement.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgAcknowledgement)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgAcknowledgement();
                        if (object.packet != null) {
                            if (typeof object.packet !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgAcknowledgement.packet: object expected");
                            message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                        }
                        if (object.acknowledgement != null)
                            if (typeof object.acknowledgement === "string")
                                $util.base64.decode(object.acknowledgement, message.acknowledgement = $util.newBuffer($util.base64.length(object.acknowledgement)), 0);
                            else if (object.acknowledgement.length)
                                message.acknowledgement = object.acknowledgement;
                        if (object.proof_acked != null)
                            if (typeof object.proof_acked === "string")
                                $util.base64.decode(object.proof_acked, message.proof_acked = $util.newBuffer($util.base64.length(object.proof_acked)), 0);
                            else if (object.proof_acked.length)
                                message.proof_acked = object.proof_acked;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgAcknowledgement.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgAcknowledgement message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.MsgAcknowledgement} message MsgAcknowledgement
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgAcknowledgement.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.packet = null;
                            if (options.bytes === String)
                                object.acknowledgement = "";
                            else {
                                object.acknowledgement = [];
                                if (options.bytes !== Array)
                                    object.acknowledgement = $util.newBuffer(object.acknowledgement);
                            }
                            if (options.bytes === String)
                                object.proof_acked = "";
                            else {
                                object.proof_acked = [];
                                if (options.bytes !== Array)
                                    object.proof_acked = $util.newBuffer(object.proof_acked);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.packet != null && message.hasOwnProperty("packet"))
                            object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            object.acknowledgement = options.bytes === String ? $util.base64.encode(message.acknowledgement, 0, message.acknowledgement.length) : options.bytes === Array ? Array.prototype.slice.call(message.acknowledgement) : message.acknowledgement;
                        if (message.proof_acked != null && message.hasOwnProperty("proof_acked"))
                            object.proof_acked = options.bytes === String ? $util.base64.encode(message.proof_acked, 0, message.proof_acked.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_acked) : message.proof_acked;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgAcknowledgement to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgAcknowledgement.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgAcknowledgement;
                })();

                v1.MsgAcknowledgementResponse = (function() {

                    /**
                     * Properties of a MsgAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgAcknowledgementResponse
                     */

                    /**
                     * Constructs a new MsgAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgAcknowledgementResponse.
                     * @implements IMsgAcknowledgementResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgAcknowledgementResponse=} [properties] Properties to set
                     */
                    function MsgAcknowledgementResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgAcknowledgementResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgementResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgementResponse} message MsgAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgementResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgAcknowledgementResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgementResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgementResponse} message MsgAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgementResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgAcknowledgementResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgAcknowledgementResponse} MsgAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgementResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgAcknowledgementResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgAcknowledgementResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgAcknowledgementResponse} MsgAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgementResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgAcknowledgementResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgAcknowledgementResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgAcknowledgementResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgAcknowledgementResponse} MsgAcknowledgementResponse
                     */
                    MsgAcknowledgementResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgAcknowledgementResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgAcknowledgementResponse();
                    };

                    /**
                     * Creates a plain object from a MsgAcknowledgementResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgAcknowledgementResponse} message MsgAcknowledgementResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgAcknowledgementResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgAcknowledgementResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgAcknowledgementResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgAcknowledgementResponse;
                })();

                v1.Channel = (function() {

                    /**
                     * Properties of a Channel.
                     * @memberof ibc.core.channel.v1
                     * @interface IChannel
                     * @property {ibc.core.channel.v1.State|null} [state] Channel state
                     * @property {ibc.core.channel.v1.Order|null} [ordering] Channel ordering
                     * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] Channel counterparty
                     * @property {Array.<string>|null} [connection_hops] Channel connection_hops
                     * @property {string|null} [version] Channel version
                     */

                    /**
                     * Constructs a new Channel.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Channel.
                     * @implements IChannel
                     * @constructor
                     * @param {ibc.core.channel.v1.IChannel=} [properties] Properties to set
                     */
                    function Channel(properties) {
                        this.connection_hops = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Channel state.
                     * @member {ibc.core.channel.v1.State} state
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.state = 0;

                    /**
                     * Channel ordering.
                     * @member {ibc.core.channel.v1.Order} ordering
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.ordering = 0;

                    /**
                     * Channel counterparty.
                     * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.counterparty = null;

                    /**
                     * Channel connection_hops.
                     * @member {Array.<string>} connection_hops
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.connection_hops = $util.emptyArray;

                    /**
                     * Channel version.
                     * @member {string} version
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.version = "";

                    /**
                     * Encodes the specified Channel message. Does not implicitly {@link ibc.core.channel.v1.Channel.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {ibc.core.channel.v1.IChannel} message Channel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Channel.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                        if (message.ordering != null && Object.hasOwnProperty.call(message, "ordering"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ordering);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.channel.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.connection_hops != null && message.connection_hops.length)
                            for (let i = 0; i < message.connection_hops.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.connection_hops[i]);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                        return writer;
                    };

                    /**
                     * Encodes the specified Channel message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Channel.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {ibc.core.channel.v1.IChannel} message Channel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Channel.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Channel message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Channel} Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Channel.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Channel();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.state = reader.int32();
                                break;
                            case 2:
                                message.ordering = reader.int32();
                                break;
                            case 3:
                                message.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.connection_hops && message.connection_hops.length))
                                    message.connection_hops = [];
                                message.connection_hops.push(reader.string());
                                break;
                            case 5:
                                message.version = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Channel message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.Channel} Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Channel.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Channel message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Channel.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            switch (message.ordering) {
                            default:
                                return "ordering: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.channel.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.connection_hops != null && message.hasOwnProperty("connection_hops")) {
                            if (!Array.isArray(message.connection_hops))
                                return "connection_hops: array expected";
                            for (let i = 0; i < message.connection_hops.length; ++i)
                                if (!$util.isString(message.connection_hops[i]))
                                    return "connection_hops: string[] expected";
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isString(message.version))
                                return "version: string expected";
                        return null;
                    };

                    /**
                     * Creates a Channel message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.Channel} Channel
                     */
                    Channel.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.Channel)
                            return object;
                        let message = new $root.ibc.core.channel.v1.Channel();
                        switch (object.state) {
                        case "STATE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "STATE_INIT":
                        case 1:
                            message.state = 1;
                            break;
                        case "STATE_TRYOPEN":
                        case 2:
                            message.state = 2;
                            break;
                        case "STATE_OPEN":
                        case 3:
                            message.state = 3;
                            break;
                        case "STATE_CLOSED":
                        case 4:
                            message.state = 4;
                            break;
                        }
                        switch (object.ordering) {
                        case "ORDER_NONE_UNSPECIFIED":
                        case 0:
                            message.ordering = 0;
                            break;
                        case "ORDER_UNORDERED":
                        case 1:
                            message.ordering = 1;
                            break;
                        case "ORDER_ORDERED":
                        case 2:
                            message.ordering = 2;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.channel.v1.Channel.counterparty: object expected");
                            message.counterparty = $root.ibc.core.channel.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.connection_hops) {
                            if (!Array.isArray(object.connection_hops))
                                throw TypeError(".ibc.core.channel.v1.Channel.connection_hops: array expected");
                            message.connection_hops = [];
                            for (let i = 0; i < object.connection_hops.length; ++i)
                                message.connection_hops[i] = String(object.connection_hops[i]);
                        }
                        if (object.version != null)
                            message.version = String(object.version);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Channel message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {ibc.core.channel.v1.Channel} message Channel
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Channel.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.connection_hops = [];
                        if (options.defaults) {
                            object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                            object.ordering = options.enums === String ? "ORDER_NONE_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            object.version = "";
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.ibc.core.channel.v1.State[message.state] : message.state;
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            object.ordering = options.enums === String ? $root.ibc.core.channel.v1.Order[message.ordering] : message.ordering;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.channel.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.connection_hops && message.connection_hops.length) {
                            object.connection_hops = [];
                            for (let j = 0; j < message.connection_hops.length; ++j)
                                object.connection_hops[j] = message.connection_hops[j];
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        return object;
                    };

                    /**
                     * Converts this Channel to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Channel.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Channel;
                })();

                v1.IdentifiedChannel = (function() {

                    /**
                     * Properties of an IdentifiedChannel.
                     * @memberof ibc.core.channel.v1
                     * @interface IIdentifiedChannel
                     * @property {ibc.core.channel.v1.State|null} [state] IdentifiedChannel state
                     * @property {ibc.core.channel.v1.Order|null} [ordering] IdentifiedChannel ordering
                     * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] IdentifiedChannel counterparty
                     * @property {Array.<string>|null} [connection_hops] IdentifiedChannel connection_hops
                     * @property {string|null} [version] IdentifiedChannel version
                     * @property {string|null} [port_id] IdentifiedChannel port_id
                     * @property {string|null} [channel_id] IdentifiedChannel channel_id
                     */

                    /**
                     * Constructs a new IdentifiedChannel.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents an IdentifiedChannel.
                     * @implements IIdentifiedChannel
                     * @constructor
                     * @param {ibc.core.channel.v1.IIdentifiedChannel=} [properties] Properties to set
                     */
                    function IdentifiedChannel(properties) {
                        this.connection_hops = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IdentifiedChannel state.
                     * @member {ibc.core.channel.v1.State} state
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.state = 0;

                    /**
                     * IdentifiedChannel ordering.
                     * @member {ibc.core.channel.v1.Order} ordering
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.ordering = 0;

                    /**
                     * IdentifiedChannel counterparty.
                     * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.counterparty = null;

                    /**
                     * IdentifiedChannel connection_hops.
                     * @member {Array.<string>} connection_hops
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.connection_hops = $util.emptyArray;

                    /**
                     * IdentifiedChannel version.
                     * @member {string} version
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.version = "";

                    /**
                     * IdentifiedChannel port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.port_id = "";

                    /**
                     * IdentifiedChannel channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.channel_id = "";

                    /**
                     * Encodes the specified IdentifiedChannel message. Does not implicitly {@link ibc.core.channel.v1.IdentifiedChannel.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {ibc.core.channel.v1.IIdentifiedChannel} message IdentifiedChannel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedChannel.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                        if (message.ordering != null && Object.hasOwnProperty.call(message, "ordering"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ordering);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.channel.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.connection_hops != null && message.connection_hops.length)
                            for (let i = 0; i < message.connection_hops.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.connection_hops[i]);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified IdentifiedChannel message, length delimited. Does not implicitly {@link ibc.core.channel.v1.IdentifiedChannel.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {ibc.core.channel.v1.IIdentifiedChannel} message IdentifiedChannel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedChannel.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IdentifiedChannel message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedChannel.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.IdentifiedChannel();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.state = reader.int32();
                                break;
                            case 2:
                                message.ordering = reader.int32();
                                break;
                            case 3:
                                message.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.connection_hops && message.connection_hops.length))
                                    message.connection_hops = [];
                                message.connection_hops.push(reader.string());
                                break;
                            case 5:
                                message.version = reader.string();
                                break;
                            case 6:
                                message.port_id = reader.string();
                                break;
                            case 7:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IdentifiedChannel message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedChannel.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IdentifiedChannel message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IdentifiedChannel.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            switch (message.ordering) {
                            default:
                                return "ordering: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.channel.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.connection_hops != null && message.hasOwnProperty("connection_hops")) {
                            if (!Array.isArray(message.connection_hops))
                                return "connection_hops: array expected";
                            for (let i = 0; i < message.connection_hops.length; ++i)
                                if (!$util.isString(message.connection_hops[i]))
                                    return "connection_hops: string[] expected";
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isString(message.version))
                                return "version: string expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates an IdentifiedChannel message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                     */
                    IdentifiedChannel.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.IdentifiedChannel)
                            return object;
                        let message = new $root.ibc.core.channel.v1.IdentifiedChannel();
                        switch (object.state) {
                        case "STATE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "STATE_INIT":
                        case 1:
                            message.state = 1;
                            break;
                        case "STATE_TRYOPEN":
                        case 2:
                            message.state = 2;
                            break;
                        case "STATE_OPEN":
                        case 3:
                            message.state = 3;
                            break;
                        case "STATE_CLOSED":
                        case 4:
                            message.state = 4;
                            break;
                        }
                        switch (object.ordering) {
                        case "ORDER_NONE_UNSPECIFIED":
                        case 0:
                            message.ordering = 0;
                            break;
                        case "ORDER_UNORDERED":
                        case 1:
                            message.ordering = 1;
                            break;
                        case "ORDER_ORDERED":
                        case 2:
                            message.ordering = 2;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.channel.v1.IdentifiedChannel.counterparty: object expected");
                            message.counterparty = $root.ibc.core.channel.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.connection_hops) {
                            if (!Array.isArray(object.connection_hops))
                                throw TypeError(".ibc.core.channel.v1.IdentifiedChannel.connection_hops: array expected");
                            message.connection_hops = [];
                            for (let i = 0; i < object.connection_hops.length; ++i)
                                message.connection_hops[i] = String(object.connection_hops[i]);
                        }
                        if (object.version != null)
                            message.version = String(object.version);
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from an IdentifiedChannel message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {ibc.core.channel.v1.IdentifiedChannel} message IdentifiedChannel
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IdentifiedChannel.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.connection_hops = [];
                        if (options.defaults) {
                            object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                            object.ordering = options.enums === String ? "ORDER_NONE_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            object.version = "";
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.ibc.core.channel.v1.State[message.state] : message.state;
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            object.ordering = options.enums === String ? $root.ibc.core.channel.v1.Order[message.ordering] : message.ordering;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.channel.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.connection_hops && message.connection_hops.length) {
                            object.connection_hops = [];
                            for (let j = 0; j < message.connection_hops.length; ++j)
                                object.connection_hops[j] = message.connection_hops[j];
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this IdentifiedChannel to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IdentifiedChannel.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IdentifiedChannel;
                })();

                /**
                 * State enum.
                 * @name ibc.core.channel.v1.State
                 * @enum {number}
                 * @property {number} STATE_UNINITIALIZED_UNSPECIFIED=0 STATE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} STATE_INIT=1 STATE_INIT value
                 * @property {number} STATE_TRYOPEN=2 STATE_TRYOPEN value
                 * @property {number} STATE_OPEN=3 STATE_OPEN value
                 * @property {number} STATE_CLOSED=4 STATE_CLOSED value
                 */
                v1.State = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STATE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "STATE_INIT"] = 1;
                    values[valuesById[2] = "STATE_TRYOPEN"] = 2;
                    values[valuesById[3] = "STATE_OPEN"] = 3;
                    values[valuesById[4] = "STATE_CLOSED"] = 4;
                    return values;
                })();

                /**
                 * Order enum.
                 * @name ibc.core.channel.v1.Order
                 * @enum {number}
                 * @property {number} ORDER_NONE_UNSPECIFIED=0 ORDER_NONE_UNSPECIFIED value
                 * @property {number} ORDER_UNORDERED=1 ORDER_UNORDERED value
                 * @property {number} ORDER_ORDERED=2 ORDER_ORDERED value
                 */
                v1.Order = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ORDER_NONE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORDER_UNORDERED"] = 1;
                    values[valuesById[2] = "ORDER_ORDERED"] = 2;
                    return values;
                })();

                v1.Counterparty = (function() {

                    /**
                     * Properties of a Counterparty.
                     * @memberof ibc.core.channel.v1
                     * @interface ICounterparty
                     * @property {string|null} [port_id] Counterparty port_id
                     * @property {string|null} [channel_id] Counterparty channel_id
                     */

                    /**
                     * Constructs a new Counterparty.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Counterparty.
                     * @implements ICounterparty
                     * @constructor
                     * @param {ibc.core.channel.v1.ICounterparty=} [properties] Properties to set
                     */
                    function Counterparty(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Counterparty port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.port_id = "";

                    /**
                     * Counterparty channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.channel_id = "";

                    /**
                     * Encodes the specified Counterparty message. Does not implicitly {@link ibc.core.channel.v1.Counterparty.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {ibc.core.channel.v1.ICounterparty} message Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified Counterparty message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Counterparty.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {ibc.core.channel.v1.ICounterparty} message Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Counterparty();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Counterparty message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Counterparty.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a Counterparty message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                     */
                    Counterparty.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.Counterparty)
                            return object;
                        let message = new $root.ibc.core.channel.v1.Counterparty();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Counterparty message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {ibc.core.channel.v1.Counterparty} message Counterparty
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Counterparty.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this Counterparty to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Counterparty.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Counterparty;
                })();

                v1.Packet = (function() {

                    /**
                     * Properties of a Packet.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacket
                     * @property {Long|null} [sequence] Packet sequence
                     * @property {string|null} [source_port] Packet source_port
                     * @property {string|null} [source_channel] Packet source_channel
                     * @property {string|null} [destination_port] Packet destination_port
                     * @property {string|null} [destination_channel] Packet destination_channel
                     * @property {Uint8Array|null} [data] Packet data
                     * @property {ibc.core.client.v1.IHeight|null} [timeout_height] Packet timeout_height
                     * @property {Long|null} [timeout_timestamp] Packet timeout_timestamp
                     */

                    /**
                     * Constructs a new Packet.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Packet.
                     * @implements IPacket
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacket=} [properties] Properties to set
                     */
                    function Packet(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Packet sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Packet source_port.
                     * @member {string} source_port
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.source_port = "";

                    /**
                     * Packet source_channel.
                     * @member {string} source_channel
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.source_channel = "";

                    /**
                     * Packet destination_port.
                     * @member {string} destination_port
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.destination_port = "";

                    /**
                     * Packet destination_channel.
                     * @member {string} destination_channel
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.destination_channel = "";

                    /**
                     * Packet data.
                     * @member {Uint8Array} data
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.data = $util.newBuffer([]);

                    /**
                     * Packet timeout_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} timeout_height
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.timeout_height = null;

                    /**
                     * Packet timeout_timestamp.
                     * @member {Long} timeout_timestamp
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified Packet message. Does not implicitly {@link ibc.core.channel.v1.Packet.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {ibc.core.channel.v1.IPacket} message Packet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Packet.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.source_port != null && Object.hasOwnProperty.call(message, "source_port"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_port);
                        if (message.source_channel != null && Object.hasOwnProperty.call(message, "source_channel"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.source_channel);
                        if (message.destination_port != null && Object.hasOwnProperty.call(message, "destination_port"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.destination_port);
                        if (message.destination_channel != null && Object.hasOwnProperty.call(message, "destination_channel"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.destination_channel);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.data);
                        if (message.timeout_height != null && Object.hasOwnProperty.call(message, "timeout_height"))
                            $root.ibc.core.client.v1.Height.encode(message.timeout_height, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.timeout_timestamp != null && Object.hasOwnProperty.call(message, "timeout_timestamp"))
                            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.timeout_timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified Packet message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Packet.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {ibc.core.channel.v1.IPacket} message Packet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Packet.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Packet message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Packet} Packet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Packet.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Packet();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.source_port = reader.string();
                                break;
                            case 3:
                                message.source_channel = reader.string();
                                break;
                            case 4:
                                message.destination_port = reader.string();
                                break;
                            case 5:
                                message.destination_channel = reader.string();
                                break;
                            case 6:
                                message.data = reader.bytes();
                                break;
                            case 7:
                                message.timeout_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.timeout_timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Packet message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.Packet} Packet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Packet.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Packet message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Packet.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.source_port != null && message.hasOwnProperty("source_port"))
                            if (!$util.isString(message.source_port))
                                return "source_port: string expected";
                        if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                            if (!$util.isString(message.source_channel))
                                return "source_channel: string expected";
                        if (message.destination_port != null && message.hasOwnProperty("destination_port"))
                            if (!$util.isString(message.destination_port))
                                return "destination_port: string expected";
                        if (message.destination_channel != null && message.hasOwnProperty("destination_channel"))
                            if (!$util.isString(message.destination_channel))
                                return "destination_channel: string expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.timeout_height != null && message.hasOwnProperty("timeout_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.timeout_height);
                            if (error)
                                return "timeout_height." + error;
                        }
                        if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                            if (!$util.isInteger(message.timeout_timestamp) && !(message.timeout_timestamp && $util.isInteger(message.timeout_timestamp.low) && $util.isInteger(message.timeout_timestamp.high)))
                                return "timeout_timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a Packet message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.Packet} Packet
                     */
                    Packet.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.Packet)
                            return object;
                        let message = new $root.ibc.core.channel.v1.Packet();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.source_port != null)
                            message.source_port = String(object.source_port);
                        if (object.source_channel != null)
                            message.source_channel = String(object.source_channel);
                        if (object.destination_port != null)
                            message.destination_port = String(object.destination_port);
                        if (object.destination_channel != null)
                            message.destination_channel = String(object.destination_channel);
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.timeout_height != null) {
                            if (typeof object.timeout_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.Packet.timeout_height: object expected");
                            message.timeout_height = $root.ibc.core.client.v1.Height.fromObject(object.timeout_height);
                        }
                        if (object.timeout_timestamp != null)
                            if ($util.Long)
                                (message.timeout_timestamp = $util.Long.fromValue(object.timeout_timestamp)).unsigned = true;
                            else if (typeof object.timeout_timestamp === "string")
                                message.timeout_timestamp = parseInt(object.timeout_timestamp, 10);
                            else if (typeof object.timeout_timestamp === "number")
                                message.timeout_timestamp = object.timeout_timestamp;
                            else if (typeof object.timeout_timestamp === "object")
                                message.timeout_timestamp = new $util.LongBits(object.timeout_timestamp.low >>> 0, object.timeout_timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Packet message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {ibc.core.channel.v1.Packet} message Packet
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Packet.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            object.source_port = "";
                            object.source_channel = "";
                            object.destination_port = "";
                            object.destination_channel = "";
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            object.timeout_height = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timeout_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timeout_timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.source_port != null && message.hasOwnProperty("source_port"))
                            object.source_port = message.source_port;
                        if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                            object.source_channel = message.source_channel;
                        if (message.destination_port != null && message.hasOwnProperty("destination_port"))
                            object.destination_port = message.destination_port;
                        if (message.destination_channel != null && message.hasOwnProperty("destination_channel"))
                            object.destination_channel = message.destination_channel;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                            object.timeout_height = $root.ibc.core.client.v1.Height.toObject(message.timeout_height, options);
                        if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                            if (typeof message.timeout_timestamp === "number")
                                object.timeout_timestamp = options.longs === String ? String(message.timeout_timestamp) : message.timeout_timestamp;
                            else
                                object.timeout_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeout_timestamp) : options.longs === Number ? new $util.LongBits(message.timeout_timestamp.low >>> 0, message.timeout_timestamp.high >>> 0).toNumber(true) : message.timeout_timestamp;
                        return object;
                    };

                    /**
                     * Converts this Packet to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Packet.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Packet;
                })();

                v1.PacketState = (function() {

                    /**
                     * Properties of a PacketState.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacketState
                     * @property {string|null} [port_id] PacketState port_id
                     * @property {string|null} [channel_id] PacketState channel_id
                     * @property {Long|null} [sequence] PacketState sequence
                     * @property {Uint8Array|null} [data] PacketState data
                     */

                    /**
                     * Constructs a new PacketState.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a PacketState.
                     * @implements IPacketState
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacketState=} [properties] Properties to set
                     */
                    function PacketState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketState port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.port_id = "";

                    /**
                     * PacketState channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.channel_id = "";

                    /**
                     * PacketState sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PacketState data.
                     * @member {Uint8Array} data
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketState message. Does not implicitly {@link ibc.core.channel.v1.PacketState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {ibc.core.channel.v1.IPacketState} message PacketState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketState message, length delimited. Does not implicitly {@link ibc.core.channel.v1.PacketState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {ibc.core.channel.v1.IPacketState} message PacketState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.PacketState} PacketState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.PacketState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            case 4:
                                message.data = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.PacketState} PacketState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketState message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.PacketState} PacketState
                     */
                    PacketState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.PacketState)
                            return object;
                        let message = new $root.ibc.core.channel.v1.PacketState();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {ibc.core.channel.v1.PacketState} message PacketState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        return object;
                    };

                    /**
                     * Converts this PacketState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketState;
                })();

                v1.Acknowledgement = (function() {

                    /**
                     * Properties of an Acknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @interface IAcknowledgement
                     * @property {Uint8Array|null} [result] Acknowledgement result
                     * @property {string|null} [error] Acknowledgement error
                     */

                    /**
                     * Constructs a new Acknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents an Acknowledgement.
                     * @implements IAcknowledgement
                     * @constructor
                     * @param {ibc.core.channel.v1.IAcknowledgement=} [properties] Properties to set
                     */
                    function Acknowledgement(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Acknowledgement result.
                     * @member {Uint8Array|null|undefined} result
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Acknowledgement.prototype.result = null;

                    /**
                     * Acknowledgement error.
                     * @member {string|null|undefined} error
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Acknowledgement.prototype.error = null;

                    // OneOf field names bound to virtual getters and setters
                    let $oneOfFields;

                    /**
                     * Acknowledgement response.
                     * @member {"result"|"error"|undefined} response
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Object.defineProperty(Acknowledgement.prototype, "response", {
                        get: $util.oneOfGetter($oneOfFields = ["result", "error"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Encodes the specified Acknowledgement message. Does not implicitly {@link ibc.core.channel.v1.Acknowledgement.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IAcknowledgement} message Acknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Acknowledgement.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 21, wireType 2 =*/170).bytes(message.result);
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            writer.uint32(/* id 22, wireType 2 =*/178).string(message.error);
                        return writer;
                    };

                    /**
                     * Encodes the specified Acknowledgement message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Acknowledgement.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IAcknowledgement} message Acknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Acknowledgement.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Acknowledgement message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Acknowledgement.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Acknowledgement();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 21:
                                message.result = reader.bytes();
                                break;
                            case 22:
                                message.error = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Acknowledgement message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Acknowledgement.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Acknowledgement message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Acknowledgement.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        let properties = {};
                        if (message.result != null && message.hasOwnProperty("result")) {
                            properties.response = 1;
                            if (!(message.result && typeof message.result.length === "number" || $util.isString(message.result)))
                                return "result: buffer expected";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            if (properties.response === 1)
                                return "response: multiple values";
                            properties.response = 1;
                            if (!$util.isString(message.error))
                                return "error: string expected";
                        }
                        return null;
                    };

                    /**
                     * Creates an Acknowledgement message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                     */
                    Acknowledgement.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.Acknowledgement)
                            return object;
                        let message = new $root.ibc.core.channel.v1.Acknowledgement();
                        if (object.result != null)
                            if (typeof object.result === "string")
                                $util.base64.decode(object.result, message.result = $util.newBuffer($util.base64.length(object.result)), 0);
                            else if (object.result.length)
                                message.result = object.result;
                        if (object.error != null)
                            message.error = String(object.error);
                        return message;
                    };

                    /**
                     * Creates a plain object from an Acknowledgement message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.Acknowledgement} message Acknowledgement
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Acknowledgement.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (message.result != null && message.hasOwnProperty("result")) {
                            object.result = options.bytes === String ? $util.base64.encode(message.result, 0, message.result.length) : options.bytes === Array ? Array.prototype.slice.call(message.result) : message.result;
                            if (options.oneofs)
                                object.response = "result";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            object.error = message.error;
                            if (options.oneofs)
                                object.response = "error";
                        }
                        return object;
                    };

                    /**
                     * Converts this Acknowledgement to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Acknowledgement.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Acknowledgement;
                })();

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#channel}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ChannelCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryChannelResponse} [response] QueryChannelResponse
                     */

                    /**
                     * Calls Channel.
                     * @function channel
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} request QueryChannelRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ChannelCallback} callback Node-style callback called with the error, if any, and QueryChannelResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.channel = function channel(request, callback) {
                        return this.rpcCall(channel, $root.ibc.core.channel.v1.QueryChannelRequest, $root.ibc.core.channel.v1.QueryChannelResponse, request, callback);
                    }, "name", { value: "Channel" });

                    /**
                     * Calls Channel.
                     * @function channel
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} request QueryChannelRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryChannelResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#channels}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ChannelsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryChannelsResponse} [response] QueryChannelsResponse
                     */

                    /**
                     * Calls Channels.
                     * @function channels
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} request QueryChannelsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ChannelsCallback} callback Node-style callback called with the error, if any, and QueryChannelsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.channels = function channels(request, callback) {
                        return this.rpcCall(channels, $root.ibc.core.channel.v1.QueryChannelsRequest, $root.ibc.core.channel.v1.QueryChannelsResponse, request, callback);
                    }, "name", { value: "Channels" });

                    /**
                     * Calls Channels.
                     * @function channels
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} request QueryChannelsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryChannelsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#connectionChannels}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ConnectionChannelsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryConnectionChannelsResponse} [response] QueryConnectionChannelsResponse
                     */

                    /**
                     * Calls ConnectionChannels.
                     * @function connectionChannels
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} request QueryConnectionChannelsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ConnectionChannelsCallback} callback Node-style callback called with the error, if any, and QueryConnectionChannelsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connectionChannels = function connectionChannels(request, callback) {
                        return this.rpcCall(connectionChannels, $root.ibc.core.channel.v1.QueryConnectionChannelsRequest, $root.ibc.core.channel.v1.QueryConnectionChannelsResponse, request, callback);
                    }, "name", { value: "ConnectionChannels" });

                    /**
                     * Calls ConnectionChannels.
                     * @function connectionChannels
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} request QueryConnectionChannelsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryConnectionChannelsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#channelClientState}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ChannelClientStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryChannelClientStateResponse} [response] QueryChannelClientStateResponse
                     */

                    /**
                     * Calls ChannelClientState.
                     * @function channelClientState
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} request QueryChannelClientStateRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ChannelClientStateCallback} callback Node-style callback called with the error, if any, and QueryChannelClientStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.channelClientState = function channelClientState(request, callback) {
                        return this.rpcCall(channelClientState, $root.ibc.core.channel.v1.QueryChannelClientStateRequest, $root.ibc.core.channel.v1.QueryChannelClientStateResponse, request, callback);
                    }, "name", { value: "ChannelClientState" });

                    /**
                     * Calls ChannelClientState.
                     * @function channelClientState
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} request QueryChannelClientStateRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryChannelClientStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#channelConsensusState}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ChannelConsensusStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryChannelConsensusStateResponse} [response] QueryChannelConsensusStateResponse
                     */

                    /**
                     * Calls ChannelConsensusState.
                     * @function channelConsensusState
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} request QueryChannelConsensusStateRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ChannelConsensusStateCallback} callback Node-style callback called with the error, if any, and QueryChannelConsensusStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.channelConsensusState = function channelConsensusState(request, callback) {
                        return this.rpcCall(channelConsensusState, $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest, $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse, request, callback);
                    }, "name", { value: "ChannelConsensusState" });

                    /**
                     * Calls ChannelConsensusState.
                     * @function channelConsensusState
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} request QueryChannelConsensusStateRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryChannelConsensusStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetCommitment}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketCommitmentCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentResponse} [response] QueryPacketCommitmentResponse
                     */

                    /**
                     * Calls PacketCommitment.
                     * @function packetCommitment
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} request QueryPacketCommitmentRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketCommitmentCallback} callback Node-style callback called with the error, if any, and QueryPacketCommitmentResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetCommitment = function packetCommitment(request, callback) {
                        return this.rpcCall(packetCommitment, $root.ibc.core.channel.v1.QueryPacketCommitmentRequest, $root.ibc.core.channel.v1.QueryPacketCommitmentResponse, request, callback);
                    }, "name", { value: "PacketCommitment" });

                    /**
                     * Calls PacketCommitment.
                     * @function packetCommitment
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} request QueryPacketCommitmentRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketCommitmentResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetCommitments}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketCommitmentsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentsResponse} [response] QueryPacketCommitmentsResponse
                     */

                    /**
                     * Calls PacketCommitments.
                     * @function packetCommitments
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} request QueryPacketCommitmentsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketCommitmentsCallback} callback Node-style callback called with the error, if any, and QueryPacketCommitmentsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetCommitments = function packetCommitments(request, callback) {
                        return this.rpcCall(packetCommitments, $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest, $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse, request, callback);
                    }, "name", { value: "PacketCommitments" });

                    /**
                     * Calls PacketCommitments.
                     * @function packetCommitments
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} request QueryPacketCommitmentsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketCommitmentsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetReceipt}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketReceiptCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketReceiptResponse} [response] QueryPacketReceiptResponse
                     */

                    /**
                     * Calls PacketReceipt.
                     * @function packetReceipt
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} request QueryPacketReceiptRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketReceiptCallback} callback Node-style callback called with the error, if any, and QueryPacketReceiptResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetReceipt = function packetReceipt(request, callback) {
                        return this.rpcCall(packetReceipt, $root.ibc.core.channel.v1.QueryPacketReceiptRequest, $root.ibc.core.channel.v1.QueryPacketReceiptResponse, request, callback);
                    }, "name", { value: "PacketReceipt" });

                    /**
                     * Calls PacketReceipt.
                     * @function packetReceipt
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} request QueryPacketReceiptRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketReceiptResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetAcknowledgement}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketAcknowledgementCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} [response] QueryPacketAcknowledgementResponse
                     */

                    /**
                     * Calls PacketAcknowledgement.
                     * @function packetAcknowledgement
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} request QueryPacketAcknowledgementRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketAcknowledgementCallback} callback Node-style callback called with the error, if any, and QueryPacketAcknowledgementResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetAcknowledgement = function packetAcknowledgement(request, callback) {
                        return this.rpcCall(packetAcknowledgement, $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest, $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse, request, callback);
                    }, "name", { value: "PacketAcknowledgement" });

                    /**
                     * Calls PacketAcknowledgement.
                     * @function packetAcknowledgement
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} request QueryPacketAcknowledgementRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketAcknowledgementResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetAcknowledgements}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketAcknowledgementsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} [response] QueryPacketAcknowledgementsResponse
                     */

                    /**
                     * Calls PacketAcknowledgements.
                     * @function packetAcknowledgements
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} request QueryPacketAcknowledgementsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketAcknowledgementsCallback} callback Node-style callback called with the error, if any, and QueryPacketAcknowledgementsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetAcknowledgements = function packetAcknowledgements(request, callback) {
                        return this.rpcCall(packetAcknowledgements, $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest, $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse, request, callback);
                    }, "name", { value: "PacketAcknowledgements" });

                    /**
                     * Calls PacketAcknowledgements.
                     * @function packetAcknowledgements
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} request QueryPacketAcknowledgementsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketAcknowledgementsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#unreceivedPackets}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef UnreceivedPacketsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} [response] QueryUnreceivedPacketsResponse
                     */

                    /**
                     * Calls UnreceivedPackets.
                     * @function unreceivedPackets
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} request QueryUnreceivedPacketsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.UnreceivedPacketsCallback} callback Node-style callback called with the error, if any, and QueryUnreceivedPacketsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.unreceivedPackets = function unreceivedPackets(request, callback) {
                        return this.rpcCall(unreceivedPackets, $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest, $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse, request, callback);
                    }, "name", { value: "UnreceivedPackets" });

                    /**
                     * Calls UnreceivedPackets.
                     * @function unreceivedPackets
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} request QueryUnreceivedPacketsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryUnreceivedPacketsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#unreceivedAcks}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef UnreceivedAcksCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryUnreceivedAcksResponse} [response] QueryUnreceivedAcksResponse
                     */

                    /**
                     * Calls UnreceivedAcks.
                     * @function unreceivedAcks
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} request QueryUnreceivedAcksRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.UnreceivedAcksCallback} callback Node-style callback called with the error, if any, and QueryUnreceivedAcksResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.unreceivedAcks = function unreceivedAcks(request, callback) {
                        return this.rpcCall(unreceivedAcks, $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest, $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse, request, callback);
                    }, "name", { value: "UnreceivedAcks" });

                    /**
                     * Calls UnreceivedAcks.
                     * @function unreceivedAcks
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} request QueryUnreceivedAcksRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryUnreceivedAcksResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#nextSequenceReceive}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef NextSequenceReceiveCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} [response] QueryNextSequenceReceiveResponse
                     */

                    /**
                     * Calls NextSequenceReceive.
                     * @function nextSequenceReceive
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} request QueryNextSequenceReceiveRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.NextSequenceReceiveCallback} callback Node-style callback called with the error, if any, and QueryNextSequenceReceiveResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.nextSequenceReceive = function nextSequenceReceive(request, callback) {
                        return this.rpcCall(nextSequenceReceive, $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest, $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse, request, callback);
                    }, "name", { value: "NextSequenceReceive" });

                    /**
                     * Calls NextSequenceReceive.
                     * @function nextSequenceReceive
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} request QueryNextSequenceReceiveRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryNextSequenceReceiveResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryChannelRequest = (function() {

                    /**
                     * Properties of a QueryChannelRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelRequest
                     * @property {string|null} [port_id] QueryChannelRequest port_id
                     * @property {string|null} [channel_id] QueryChannelRequest channel_id
                     */

                    /**
                     * Constructs a new QueryChannelRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelRequest.
                     * @implements IQueryChannelRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelRequest=} [properties] Properties to set
                     */
                    function QueryChannelRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @instance
                     */
                    QueryChannelRequest.prototype.port_id = "";

                    /**
                     * QueryChannelRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @instance
                     */
                    QueryChannelRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryChannelRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} message QueryChannelRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} message QueryChannelRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelRequest} QueryChannelRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelRequest} QueryChannelRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryChannelRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelRequest} QueryChannelRequest
                     */
                    QueryChannelRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelRequest} message QueryChannelRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this QueryChannelRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelRequest;
                })();

                v1.QueryChannelResponse = (function() {

                    /**
                     * Properties of a QueryChannelResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelResponse
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] QueryChannelResponse channel
                     * @property {Uint8Array|null} [proof] QueryChannelResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelResponse.
                     * @implements IQueryChannelResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelResponse=} [properties] Properties to set
                     */
                    function QueryChannelResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelResponse channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.channel = null;

                    /**
                     * QueryChannelResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelResponse} message QueryChannelResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelResponse} message QueryChannelResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelResponse} QueryChannelResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelResponse} QueryChannelResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelResponse} QueryChannelResponse
                     */
                    QueryChannelResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelResponse();
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelResponse.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelResponse} message QueryChannelResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.channel = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelResponse;
                })();

                v1.QueryChannelsRequest = (function() {

                    /**
                     * Properties of a QueryChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelsRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryChannelsRequest pagination
                     */

                    /**
                     * Constructs a new QueryChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelsRequest.
                     * @implements IQueryChannelsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest=} [properties] Properties to set
                     */
                    function QueryChannelsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @instance
                     */
                    QueryChannelsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryChannelsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} message QueryChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} message QueryChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelsRequest} QueryChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelsRequest} QueryChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelsRequest} QueryChannelsRequest
                     */
                    QueryChannelsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelsRequest();
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelsRequest} message QueryChannelsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.pagination = null;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelsRequest;
                })();

                v1.QueryChannelsResponse = (function() {

                    /**
                     * Properties of a QueryChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelsResponse
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] QueryChannelsResponse channels
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryChannelsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryChannelsResponse height
                     */

                    /**
                     * Constructs a new QueryChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelsResponse.
                     * @implements IQueryChannelsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelsResponse=} [properties] Properties to set
                     */
                    function QueryChannelsResponse(properties) {
                        this.channels = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelsResponse channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.channels = $util.emptyArray;

                    /**
                     * QueryChannelsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.pagination = null;

                    /**
                     * QueryChannelsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryChannelsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsResponse} message QueryChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channels != null && message.channels.length)
                            for (let i = 0; i < message.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(message.channels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsResponse} message QueryChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelsResponse} QueryChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.channels && message.channels.length))
                                    message.channels = [];
                                message.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelsResponse} QueryChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channels != null && message.hasOwnProperty("channels")) {
                            if (!Array.isArray(message.channels))
                                return "channels: array expected";
                            for (let i = 0; i < message.channels.length; ++i) {
                                let error = $root.ibc.core.channel.v1.IdentifiedChannel.verify(message.channels[i]);
                                if (error)
                                    return "channels." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelsResponse} QueryChannelsResponse
                     */
                    QueryChannelsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelsResponse();
                        if (object.channels) {
                            if (!Array.isArray(object.channels))
                                throw TypeError(".ibc.core.channel.v1.QueryChannelsResponse.channels: array expected");
                            message.channels = [];
                            for (let i = 0; i < object.channels.length; ++i) {
                                if (typeof object.channels[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.QueryChannelsResponse.channels: object expected");
                                message.channels[i] = $root.ibc.core.channel.v1.IdentifiedChannel.fromObject(object.channels[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelsResponse} message QueryChannelsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.channels = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.channels && message.channels.length) {
                            object.channels = [];
                            for (let j = 0; j < message.channels.length; ++j)
                                object.channels[j] = $root.ibc.core.channel.v1.IdentifiedChannel.toObject(message.channels[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelsResponse;
                })();

                v1.QueryConnectionChannelsRequest = (function() {

                    /**
                     * Properties of a QueryConnectionChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryConnectionChannelsRequest
                     * @property {string|null} [connection] QueryConnectionChannelsRequest connection
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConnectionChannelsRequest pagination
                     */

                    /**
                     * Constructs a new QueryConnectionChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryConnectionChannelsRequest.
                     * @implements IQueryConnectionChannelsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest=} [properties] Properties to set
                     */
                    function QueryConnectionChannelsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionChannelsRequest connection.
                     * @member {string} connection
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @instance
                     */
                    QueryConnectionChannelsRequest.prototype.connection = "";

                    /**
                     * QueryConnectionChannelsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @instance
                     */
                    QueryConnectionChannelsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConnectionChannelsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} message QueryConnectionChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection != null && Object.hasOwnProperty.call(message, "connection"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection);
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionChannelsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} message QueryConnectionChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionChannelsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsRequest} QueryConnectionChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryConnectionChannelsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection = reader.string();
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionChannelsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsRequest} QueryConnectionChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionChannelsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionChannelsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            if (!$util.isString(message.connection))
                                return "connection: string expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionChannelsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsRequest} QueryConnectionChannelsRequest
                     */
                    QueryConnectionChannelsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryConnectionChannelsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryConnectionChannelsRequest();
                        if (object.connection != null)
                            message.connection = String(object.connection);
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionChannelsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryConnectionChannelsRequest} message QueryConnectionChannelsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionChannelsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection = "";
                            object.pagination = null;
                        }
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            object.connection = message.connection;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionChannelsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionChannelsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionChannelsRequest;
                })();

                v1.QueryConnectionChannelsResponse = (function() {

                    /**
                     * Properties of a QueryConnectionChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryConnectionChannelsResponse
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] QueryConnectionChannelsResponse channels
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConnectionChannelsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryConnectionChannelsResponse height
                     */

                    /**
                     * Constructs a new QueryConnectionChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryConnectionChannelsResponse.
                     * @implements IQueryConnectionChannelsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsResponse=} [properties] Properties to set
                     */
                    function QueryConnectionChannelsResponse(properties) {
                        this.channels = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionChannelsResponse channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.channels = $util.emptyArray;

                    /**
                     * QueryConnectionChannelsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.pagination = null;

                    /**
                     * QueryConnectionChannelsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryConnectionChannelsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsResponse} message QueryConnectionChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channels != null && message.channels.length)
                            for (let i = 0; i < message.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(message.channels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionChannelsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsResponse} message QueryConnectionChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionChannelsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsResponse} QueryConnectionChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryConnectionChannelsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.channels && message.channels.length))
                                    message.channels = [];
                                message.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionChannelsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsResponse} QueryConnectionChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionChannelsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionChannelsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channels != null && message.hasOwnProperty("channels")) {
                            if (!Array.isArray(message.channels))
                                return "channels: array expected";
                            for (let i = 0; i < message.channels.length; ++i) {
                                let error = $root.ibc.core.channel.v1.IdentifiedChannel.verify(message.channels[i]);
                                if (error)
                                    return "channels." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionChannelsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsResponse} QueryConnectionChannelsResponse
                     */
                    QueryConnectionChannelsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryConnectionChannelsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryConnectionChannelsResponse();
                        if (object.channels) {
                            if (!Array.isArray(object.channels))
                                throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsResponse.channels: array expected");
                            message.channels = [];
                            for (let i = 0; i < object.channels.length; ++i) {
                                if (typeof object.channels[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsResponse.channels: object expected");
                                message.channels[i] = $root.ibc.core.channel.v1.IdentifiedChannel.fromObject(object.channels[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionChannelsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryConnectionChannelsResponse} message QueryConnectionChannelsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionChannelsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.channels = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.channels && message.channels.length) {
                            object.channels = [];
                            for (let j = 0; j < message.channels.length; ++j)
                                object.channels[j] = $root.ibc.core.channel.v1.IdentifiedChannel.toObject(message.channels[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionChannelsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionChannelsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionChannelsResponse;
                })();

                v1.QueryChannelClientStateRequest = (function() {

                    /**
                     * Properties of a QueryChannelClientStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelClientStateRequest
                     * @property {string|null} [port_id] QueryChannelClientStateRequest port_id
                     * @property {string|null} [channel_id] QueryChannelClientStateRequest channel_id
                     */

                    /**
                     * Constructs a new QueryChannelClientStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelClientStateRequest.
                     * @implements IQueryChannelClientStateRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest=} [properties] Properties to set
                     */
                    function QueryChannelClientStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelClientStateRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @instance
                     */
                    QueryChannelClientStateRequest.prototype.port_id = "";

                    /**
                     * QueryChannelClientStateRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @instance
                     */
                    QueryChannelClientStateRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryChannelClientStateRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} message QueryChannelClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelClientStateRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} message QueryChannelClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateRequest} QueryChannelClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelClientStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelClientStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateRequest} QueryChannelClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelClientStateRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelClientStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryChannelClientStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateRequest} QueryChannelClientStateRequest
                     */
                    QueryChannelClientStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelClientStateRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelClientStateRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelClientStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelClientStateRequest} message QueryChannelClientStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelClientStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this QueryChannelClientStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelClientStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelClientStateRequest;
                })();

                v1.QueryChannelClientStateResponse = (function() {

                    /**
                     * Properties of a QueryChannelClientStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelClientStateResponse
                     * @property {ibc.core.client.v1.IIdentifiedClientState|null} [identified_client_state] QueryChannelClientStateResponse identified_client_state
                     * @property {Uint8Array|null} [proof] QueryChannelClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelClientStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelClientStateResponse.
                     * @implements IQueryChannelClientStateResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateResponse=} [properties] Properties to set
                     */
                    function QueryChannelClientStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelClientStateResponse identified_client_state.
                     * @member {ibc.core.client.v1.IIdentifiedClientState|null|undefined} identified_client_state
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.identified_client_state = null;

                    /**
                     * QueryChannelClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelClientStateResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateResponse} message QueryChannelClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identified_client_state != null && Object.hasOwnProperty.call(message, "identified_client_state"))
                            $root.ibc.core.client.v1.IdentifiedClientState.encode(message.identified_client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelClientStateResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateResponse} message QueryChannelClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateResponse} QueryChannelClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelClientStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelClientStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateResponse} QueryChannelClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelClientStateResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelClientStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identified_client_state != null && message.hasOwnProperty("identified_client_state")) {
                            let error = $root.ibc.core.client.v1.IdentifiedClientState.verify(message.identified_client_state);
                            if (error)
                                return "identified_client_state." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelClientStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateResponse} QueryChannelClientStateResponse
                     */
                    QueryChannelClientStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelClientStateResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelClientStateResponse();
                        if (object.identified_client_state != null) {
                            if (typeof object.identified_client_state !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelClientStateResponse.identified_client_state: object expected");
                            message.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.fromObject(object.identified_client_state);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelClientStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelClientStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelClientStateResponse} message QueryChannelClientStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelClientStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.identified_client_state = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.identified_client_state != null && message.hasOwnProperty("identified_client_state"))
                            object.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.toObject(message.identified_client_state, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelClientStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelClientStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelClientStateResponse;
                })();

                v1.QueryChannelConsensusStateRequest = (function() {

                    /**
                     * Properties of a QueryChannelConsensusStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelConsensusStateRequest
                     * @property {string|null} [port_id] QueryChannelConsensusStateRequest port_id
                     * @property {string|null} [channel_id] QueryChannelConsensusStateRequest channel_id
                     * @property {Long|null} [revision_number] QueryChannelConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryChannelConsensusStateRequest revision_height
                     */

                    /**
                     * Constructs a new QueryChannelConsensusStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelConsensusStateRequest.
                     * @implements IQueryChannelConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest=} [properties] Properties to set
                     */
                    function QueryChannelConsensusStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelConsensusStateRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.port_id = "";

                    /**
                     * QueryChannelConsensusStateRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.channel_id = "";

                    /**
                     * QueryChannelConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryChannelConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryChannelConsensusStateRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} message QueryChannelConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.revision_number);
                        if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.revision_height);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelConsensusStateRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} message QueryChannelConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateRequest} QueryChannelConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.revision_number = reader.uint64();
                                break;
                            case 4:
                                message.revision_height = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateRequest} QueryChannelConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelConsensusStateRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelConsensusStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                return "revision_number: integer|Long expected";
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                return "revision_height: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryChannelConsensusStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateRequest} QueryChannelConsensusStateRequest
                     */
                    QueryChannelConsensusStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.revision_number != null)
                            if ($util.Long)
                                (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                            else if (typeof object.revision_number === "string")
                                message.revision_number = parseInt(object.revision_number, 10);
                            else if (typeof object.revision_number === "number")
                                message.revision_number = object.revision_number;
                            else if (typeof object.revision_number === "object")
                                message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                        if (object.revision_height != null)
                            if ($util.Long)
                                (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                            else if (typeof object.revision_height === "string")
                                message.revision_height = parseInt(object.revision_height, 10);
                            else if (typeof object.revision_height === "number")
                                message.revision_height = object.revision_height;
                            else if (typeof object.revision_height === "object")
                                message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelConsensusStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelConsensusStateRequest} message QueryChannelConsensusStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelConsensusStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_number = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_height = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (typeof message.revision_number === "number")
                                object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                            else
                                object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (typeof message.revision_height === "number")
                                object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                            else
                                object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                        return object;
                    };

                    /**
                     * Converts this QueryChannelConsensusStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelConsensusStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelConsensusStateRequest;
                })();

                v1.QueryChannelConsensusStateResponse = (function() {

                    /**
                     * Properties of a QueryChannelConsensusStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryChannelConsensusStateResponse consensus_state
                     * @property {string|null} [client_id] QueryChannelConsensusStateResponse client_id
                     * @property {Uint8Array|null} [proof] QueryChannelConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelConsensusStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelConsensusStateResponse.
                     * @implements IQueryChannelConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateResponse=} [properties] Properties to set
                     */
                    function QueryChannelConsensusStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryChannelConsensusStateResponse client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.client_id = "";

                    /**
                     * QueryChannelConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelConsensusStateResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateResponse} message QueryChannelConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.client_id);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelConsensusStateResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateResponse} message QueryChannelConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateResponse} QueryChannelConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.client_id = reader.string();
                                break;
                            case 3:
                                message.proof = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateResponse} QueryChannelConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelConsensusStateResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelConsensusStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelConsensusStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateResponse} QueryChannelConsensusStateResponse
                     */
                    QueryChannelConsensusStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse();
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelConsensusStateResponse.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelConsensusStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelConsensusStateResponse} message QueryChannelConsensusStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelConsensusStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.consensus_state = null;
                            object.client_id = "";
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelConsensusStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelConsensusStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelConsensusStateResponse;
                })();

                v1.QueryPacketCommitmentRequest = (function() {

                    /**
                     * Properties of a QueryPacketCommitmentRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentRequest
                     * @property {string|null} [port_id] QueryPacketCommitmentRequest port_id
                     * @property {string|null} [channel_id] QueryPacketCommitmentRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketCommitmentRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentRequest.
                     * @implements IQueryPacketCommitmentRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest=} [properties] Properties to set
                     */
                    function QueryPacketCommitmentRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketCommitmentRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.port_id = "";

                    /**
                     * QueryPacketCommitmentRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketCommitmentRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryPacketCommitmentRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} message QueryPacketCommitmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketCommitmentRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} message QueryPacketCommitmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketCommitmentRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentRequest} QueryPacketCommitmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketCommitmentRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentRequest} QueryPacketCommitmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketCommitmentRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketCommitmentRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryPacketCommitmentRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentRequest} QueryPacketCommitmentRequest
                     */
                    QueryPacketCommitmentRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketCommitmentRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketCommitmentRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketCommitmentRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentRequest} message QueryPacketCommitmentRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketCommitmentRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        return object;
                    };

                    /**
                     * Converts this QueryPacketCommitmentRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketCommitmentRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketCommitmentRequest;
                })();

                v1.QueryPacketCommitmentResponse = (function() {

                    /**
                     * Properties of a QueryPacketCommitmentResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentResponse
                     * @property {Uint8Array|null} [commitment] QueryPacketCommitmentResponse commitment
                     * @property {Uint8Array|null} [proof] QueryPacketCommitmentResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketCommitmentResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentResponse.
                     * @implements IQueryPacketCommitmentResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentResponse=} [properties] Properties to set
                     */
                    function QueryPacketCommitmentResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketCommitmentResponse commitment.
                     * @member {Uint8Array} commitment
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.commitment = $util.newBuffer([]);

                    /**
                     * QueryPacketCommitmentResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketCommitmentResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentResponse} message QueryPacketCommitmentResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.commitment != null && Object.hasOwnProperty.call(message, "commitment"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.commitment);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketCommitmentResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentResponse} message QueryPacketCommitmentResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketCommitmentResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentResponse} QueryPacketCommitmentResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketCommitmentResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.commitment = reader.bytes();
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentResponse} QueryPacketCommitmentResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketCommitmentResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketCommitmentResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            if (!(message.commitment && typeof message.commitment.length === "number" || $util.isString(message.commitment)))
                                return "commitment: buffer expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketCommitmentResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentResponse} QueryPacketCommitmentResponse
                     */
                    QueryPacketCommitmentResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketCommitmentResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketCommitmentResponse();
                        if (object.commitment != null)
                            if (typeof object.commitment === "string")
                                $util.base64.decode(object.commitment, message.commitment = $util.newBuffer($util.base64.length(object.commitment)), 0);
                            else if (object.commitment.length)
                                message.commitment = object.commitment;
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketCommitmentResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentResponse} message QueryPacketCommitmentResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketCommitmentResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.commitment = "";
                            else {
                                object.commitment = [];
                                if (options.bytes !== Array)
                                    object.commitment = $util.newBuffer(object.commitment);
                            }
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            object.commitment = options.bytes === String ? $util.base64.encode(message.commitment, 0, message.commitment.length) : options.bytes === Array ? Array.prototype.slice.call(message.commitment) : message.commitment;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketCommitmentResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketCommitmentResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketCommitmentResponse;
                })();

                v1.QueryPacketCommitmentsRequest = (function() {

                    /**
                     * Properties of a QueryPacketCommitmentsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentsRequest
                     * @property {string|null} [port_id] QueryPacketCommitmentsRequest port_id
                     * @property {string|null} [channel_id] QueryPacketCommitmentsRequest channel_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPacketCommitmentsRequest pagination
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentsRequest.
                     * @implements IQueryPacketCommitmentsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest=} [properties] Properties to set
                     */
                    function QueryPacketCommitmentsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketCommitmentsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.port_id = "";

                    /**
                     * QueryPacketCommitmentsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketCommitmentsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} message QueryPacketCommitmentsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketCommitmentsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} message QueryPacketCommitmentsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsRequest} QueryPacketCommitmentsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsRequest} QueryPacketCommitmentsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketCommitmentsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketCommitmentsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketCommitmentsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsRequest} QueryPacketCommitmentsRequest
                     */
                    QueryPacketCommitmentsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketCommitmentsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentsRequest} message QueryPacketCommitmentsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketCommitmentsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            object.pagination = null;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketCommitmentsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketCommitmentsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketCommitmentsRequest;
                })();

                v1.QueryPacketCommitmentsResponse = (function() {

                    /**
                     * Properties of a QueryPacketCommitmentsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentsResponse
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [commitments] QueryPacketCommitmentsResponse commitments
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPacketCommitmentsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryPacketCommitmentsResponse height
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentsResponse.
                     * @implements IQueryPacketCommitmentsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsResponse=} [properties] Properties to set
                     */
                    function QueryPacketCommitmentsResponse(properties) {
                        this.commitments = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketCommitmentsResponse commitments.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} commitments
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.commitments = $util.emptyArray;

                    /**
                     * QueryPacketCommitmentsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.pagination = null;

                    /**
                     * QueryPacketCommitmentsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsResponse} message QueryPacketCommitmentsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.commitments != null && message.commitments.length)
                            for (let i = 0; i < message.commitments.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.commitments[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketCommitmentsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsResponse} message QueryPacketCommitmentsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsResponse} QueryPacketCommitmentsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.commitments && message.commitments.length))
                                    message.commitments = [];
                                message.commitments.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsResponse} QueryPacketCommitmentsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketCommitmentsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketCommitmentsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.commitments != null && message.hasOwnProperty("commitments")) {
                            if (!Array.isArray(message.commitments))
                                return "commitments: array expected";
                            for (let i = 0; i < message.commitments.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.commitments[i]);
                                if (error)
                                    return "commitments." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketCommitmentsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsResponse} QueryPacketCommitmentsResponse
                     */
                    QueryPacketCommitmentsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse();
                        if (object.commitments) {
                            if (!Array.isArray(object.commitments))
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments: array expected");
                            message.commitments = [];
                            for (let i = 0; i < object.commitments.length; ++i) {
                                if (typeof object.commitments[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments: object expected");
                                message.commitments[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.commitments[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketCommitmentsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentsResponse} message QueryPacketCommitmentsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketCommitmentsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.commitments = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.commitments && message.commitments.length) {
                            object.commitments = [];
                            for (let j = 0; j < message.commitments.length; ++j)
                                object.commitments[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.commitments[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketCommitmentsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketCommitmentsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketCommitmentsResponse;
                })();

                v1.QueryPacketReceiptRequest = (function() {

                    /**
                     * Properties of a QueryPacketReceiptRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketReceiptRequest
                     * @property {string|null} [port_id] QueryPacketReceiptRequest port_id
                     * @property {string|null} [channel_id] QueryPacketReceiptRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketReceiptRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketReceiptRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketReceiptRequest.
                     * @implements IQueryPacketReceiptRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest=} [properties] Properties to set
                     */
                    function QueryPacketReceiptRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketReceiptRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.port_id = "";

                    /**
                     * QueryPacketReceiptRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketReceiptRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryPacketReceiptRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} message QueryPacketReceiptRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketReceiptRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} message QueryPacketReceiptRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketReceiptRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptRequest} QueryPacketReceiptRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketReceiptRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketReceiptRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptRequest} QueryPacketReceiptRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketReceiptRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketReceiptRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryPacketReceiptRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptRequest} QueryPacketReceiptRequest
                     */
                    QueryPacketReceiptRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketReceiptRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketReceiptRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketReceiptRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketReceiptRequest} message QueryPacketReceiptRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketReceiptRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        return object;
                    };

                    /**
                     * Converts this QueryPacketReceiptRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketReceiptRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketReceiptRequest;
                })();

                v1.QueryPacketReceiptResponse = (function() {

                    /**
                     * Properties of a QueryPacketReceiptResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketReceiptResponse
                     * @property {boolean|null} [received] QueryPacketReceiptResponse received
                     * @property {Uint8Array|null} [proof] QueryPacketReceiptResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketReceiptResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketReceiptResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketReceiptResponse.
                     * @implements IQueryPacketReceiptResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptResponse=} [properties] Properties to set
                     */
                    function QueryPacketReceiptResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketReceiptResponse received.
                     * @member {boolean} received
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.received = false;

                    /**
                     * QueryPacketReceiptResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketReceiptResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketReceiptResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptResponse} message QueryPacketReceiptResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.received != null && Object.hasOwnProperty.call(message, "received"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.received);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketReceiptResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptResponse} message QueryPacketReceiptResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketReceiptResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptResponse} QueryPacketReceiptResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketReceiptResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2:
                                message.received = reader.bool();
                                break;
                            case 3:
                                message.proof = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketReceiptResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptResponse} QueryPacketReceiptResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketReceiptResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketReceiptResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.received != null && message.hasOwnProperty("received"))
                            if (typeof message.received !== "boolean")
                                return "received: boolean expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketReceiptResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptResponse} QueryPacketReceiptResponse
                     */
                    QueryPacketReceiptResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketReceiptResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketReceiptResponse();
                        if (object.received != null)
                            message.received = Boolean(object.received);
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketReceiptResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketReceiptResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketReceiptResponse} message QueryPacketReceiptResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketReceiptResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.received = false;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.received != null && message.hasOwnProperty("received"))
                            object.received = message.received;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketReceiptResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketReceiptResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketReceiptResponse;
                })();

                v1.QueryPacketAcknowledgementRequest = (function() {

                    /**
                     * Properties of a QueryPacketAcknowledgementRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementRequest
                     * @property {string|null} [port_id] QueryPacketAcknowledgementRequest port_id
                     * @property {string|null} [channel_id] QueryPacketAcknowledgementRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketAcknowledgementRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementRequest.
                     * @implements IQueryPacketAcknowledgementRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest=} [properties] Properties to set
                     */
                    function QueryPacketAcknowledgementRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.port_id = "";

                    /**
                     * QueryPacketAcknowledgementRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketAcknowledgementRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} message QueryPacketAcknowledgementRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketAcknowledgementRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} message QueryPacketAcknowledgementRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} QueryPacketAcknowledgementRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} QueryPacketAcknowledgementRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketAcknowledgementRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketAcknowledgementRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryPacketAcknowledgementRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} QueryPacketAcknowledgementRequest
                     */
                    QueryPacketAcknowledgementRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketAcknowledgementRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} message QueryPacketAcknowledgementRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketAcknowledgementRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        return object;
                    };

                    /**
                     * Converts this QueryPacketAcknowledgementRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketAcknowledgementRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketAcknowledgementRequest;
                })();

                v1.QueryPacketAcknowledgementResponse = (function() {

                    /**
                     * Properties of a QueryPacketAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementResponse
                     * @property {Uint8Array|null} [acknowledgement] QueryPacketAcknowledgementResponse acknowledgement
                     * @property {Uint8Array|null} [proof] QueryPacketAcknowledgementResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketAcknowledgementResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementResponse.
                     * @implements IQueryPacketAcknowledgementResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementResponse=} [properties] Properties to set
                     */
                    function QueryPacketAcknowledgementResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementResponse acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * QueryPacketAcknowledgementResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketAcknowledgementResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementResponse} message QueryPacketAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.acknowledgement != null && Object.hasOwnProperty.call(message, "acknowledgement"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.acknowledgement);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketAcknowledgementResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementResponse} message QueryPacketAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} QueryPacketAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.acknowledgement = reader.bytes();
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} QueryPacketAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketAcknowledgementResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketAcknowledgementResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            if (!(message.acknowledgement && typeof message.acknowledgement.length === "number" || $util.isString(message.acknowledgement)))
                                return "acknowledgement: buffer expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketAcknowledgementResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} QueryPacketAcknowledgementResponse
                     */
                    QueryPacketAcknowledgementResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse();
                        if (object.acknowledgement != null)
                            if (typeof object.acknowledgement === "string")
                                $util.base64.decode(object.acknowledgement, message.acknowledgement = $util.newBuffer($util.base64.length(object.acknowledgement)), 0);
                            else if (object.acknowledgement.length)
                                message.acknowledgement = object.acknowledgement;
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketAcknowledgementResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} message QueryPacketAcknowledgementResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketAcknowledgementResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.acknowledgement = "";
                            else {
                                object.acknowledgement = [];
                                if (options.bytes !== Array)
                                    object.acknowledgement = $util.newBuffer(object.acknowledgement);
                            }
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            object.acknowledgement = options.bytes === String ? $util.base64.encode(message.acknowledgement, 0, message.acknowledgement.length) : options.bytes === Array ? Array.prototype.slice.call(message.acknowledgement) : message.acknowledgement;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketAcknowledgementResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketAcknowledgementResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketAcknowledgementResponse;
                })();

                v1.QueryPacketAcknowledgementsRequest = (function() {

                    /**
                     * Properties of a QueryPacketAcknowledgementsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementsRequest
                     * @property {string|null} [port_id] QueryPacketAcknowledgementsRequest port_id
                     * @property {string|null} [channel_id] QueryPacketAcknowledgementsRequest channel_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPacketAcknowledgementsRequest pagination
                     * @property {Array.<Long>|null} [packet_commitment_sequences] QueryPacketAcknowledgementsRequest packet_commitment_sequences
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementsRequest.
                     * @implements IQueryPacketAcknowledgementsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest=} [properties] Properties to set
                     */
                    function QueryPacketAcknowledgementsRequest(properties) {
                        this.packet_commitment_sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.port_id = "";

                    /**
                     * QueryPacketAcknowledgementsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketAcknowledgementsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.pagination = null;

                    /**
                     * QueryPacketAcknowledgementsRequest packet_commitment_sequences.
                     * @member {Array.<Long>} packet_commitment_sequences
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.packet_commitment_sequences = $util.emptyArray;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} message QueryPacketAcknowledgementsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.packet_commitment_sequences != null && message.packet_commitment_sequences.length) {
                            writer.uint32(/* id 4, wireType 2 =*/34).fork();
                            for (let i = 0; i < message.packet_commitment_sequences.length; ++i)
                                writer.uint64(message.packet_commitment_sequences[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} message QueryPacketAcknowledgementsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} QueryPacketAcknowledgementsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.packet_commitment_sequences && message.packet_commitment_sequences.length))
                                    message.packet_commitment_sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.packet_commitment_sequences.push(reader.uint64());
                                } else
                                    message.packet_commitment_sequences.push(reader.uint64());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} QueryPacketAcknowledgementsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketAcknowledgementsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketAcknowledgementsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.packet_commitment_sequences != null && message.hasOwnProperty("packet_commitment_sequences")) {
                            if (!Array.isArray(message.packet_commitment_sequences))
                                return "packet_commitment_sequences: array expected";
                            for (let i = 0; i < message.packet_commitment_sequences.length; ++i)
                                if (!$util.isInteger(message.packet_commitment_sequences[i]) && !(message.packet_commitment_sequences[i] && $util.isInteger(message.packet_commitment_sequences[i].low) && $util.isInteger(message.packet_commitment_sequences[i].high)))
                                    return "packet_commitment_sequences: integer|Long[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketAcknowledgementsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} QueryPacketAcknowledgementsRequest
                     */
                    QueryPacketAcknowledgementsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        if (object.packet_commitment_sequences) {
                            if (!Array.isArray(object.packet_commitment_sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.packet_commitment_sequences: array expected");
                            message.packet_commitment_sequences = [];
                            for (let i = 0; i < object.packet_commitment_sequences.length; ++i)
                                if ($util.Long)
                                    (message.packet_commitment_sequences[i] = $util.Long.fromValue(object.packet_commitment_sequences[i])).unsigned = true;
                                else if (typeof object.packet_commitment_sequences[i] === "string")
                                    message.packet_commitment_sequences[i] = parseInt(object.packet_commitment_sequences[i], 10);
                                else if (typeof object.packet_commitment_sequences[i] === "number")
                                    message.packet_commitment_sequences[i] = object.packet_commitment_sequences[i];
                                else if (typeof object.packet_commitment_sequences[i] === "object")
                                    message.packet_commitment_sequences[i] = new $util.LongBits(object.packet_commitment_sequences[i].low >>> 0, object.packet_commitment_sequences[i].high >>> 0).toNumber(true);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketAcknowledgementsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} message QueryPacketAcknowledgementsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketAcknowledgementsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.packet_commitment_sequences = [];
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            object.pagination = null;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        if (message.packet_commitment_sequences && message.packet_commitment_sequences.length) {
                            object.packet_commitment_sequences = [];
                            for (let j = 0; j < message.packet_commitment_sequences.length; ++j)
                                if (typeof message.packet_commitment_sequences[j] === "number")
                                    object.packet_commitment_sequences[j] = options.longs === String ? String(message.packet_commitment_sequences[j]) : message.packet_commitment_sequences[j];
                                else
                                    object.packet_commitment_sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.packet_commitment_sequences[j]) : options.longs === Number ? new $util.LongBits(message.packet_commitment_sequences[j].low >>> 0, message.packet_commitment_sequences[j].high >>> 0).toNumber(true) : message.packet_commitment_sequences[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryPacketAcknowledgementsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketAcknowledgementsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketAcknowledgementsRequest;
                })();

                v1.QueryPacketAcknowledgementsResponse = (function() {

                    /**
                     * Properties of a QueryPacketAcknowledgementsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementsResponse
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [acknowledgements] QueryPacketAcknowledgementsResponse acknowledgements
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPacketAcknowledgementsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryPacketAcknowledgementsResponse height
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementsResponse.
                     * @implements IQueryPacketAcknowledgementsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsResponse=} [properties] Properties to set
                     */
                    function QueryPacketAcknowledgementsResponse(properties) {
                        this.acknowledgements = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementsResponse acknowledgements.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} acknowledgements
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.acknowledgements = $util.emptyArray;

                    /**
                     * QueryPacketAcknowledgementsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.pagination = null;

                    /**
                     * QueryPacketAcknowledgementsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsResponse} message QueryPacketAcknowledgementsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.acknowledgements != null && message.acknowledgements.length)
                            for (let i = 0; i < message.acknowledgements.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.acknowledgements[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsResponse} message QueryPacketAcknowledgementsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} QueryPacketAcknowledgementsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.acknowledgements && message.acknowledgements.length))
                                    message.acknowledgements = [];
                                message.acknowledgements.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} QueryPacketAcknowledgementsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketAcknowledgementsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketAcknowledgementsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.acknowledgements != null && message.hasOwnProperty("acknowledgements")) {
                            if (!Array.isArray(message.acknowledgements))
                                return "acknowledgements: array expected";
                            for (let i = 0; i < message.acknowledgements.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.acknowledgements[i]);
                                if (error)
                                    return "acknowledgements." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketAcknowledgementsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} QueryPacketAcknowledgementsResponse
                     */
                    QueryPacketAcknowledgementsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse();
                        if (object.acknowledgements) {
                            if (!Array.isArray(object.acknowledgements))
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements: array expected");
                            message.acknowledgements = [];
                            for (let i = 0; i < object.acknowledgements.length; ++i) {
                                if (typeof object.acknowledgements[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements: object expected");
                                message.acknowledgements[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.acknowledgements[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketAcknowledgementsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} message QueryPacketAcknowledgementsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketAcknowledgementsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.acknowledgements = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.acknowledgements && message.acknowledgements.length) {
                            object.acknowledgements = [];
                            for (let j = 0; j < message.acknowledgements.length; ++j)
                                object.acknowledgements[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.acknowledgements[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketAcknowledgementsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketAcknowledgementsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketAcknowledgementsResponse;
                })();

                v1.QueryUnreceivedPacketsRequest = (function() {

                    /**
                     * Properties of a QueryUnreceivedPacketsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedPacketsRequest
                     * @property {string|null} [port_id] QueryUnreceivedPacketsRequest port_id
                     * @property {string|null} [channel_id] QueryUnreceivedPacketsRequest channel_id
                     * @property {Array.<Long>|null} [packet_commitment_sequences] QueryUnreceivedPacketsRequest packet_commitment_sequences
                     */

                    /**
                     * Constructs a new QueryUnreceivedPacketsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedPacketsRequest.
                     * @implements IQueryUnreceivedPacketsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest=} [properties] Properties to set
                     */
                    function QueryUnreceivedPacketsRequest(properties) {
                        this.packet_commitment_sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUnreceivedPacketsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.port_id = "";

                    /**
                     * QueryUnreceivedPacketsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.channel_id = "";

                    /**
                     * QueryUnreceivedPacketsRequest packet_commitment_sequences.
                     * @member {Array.<Long>} packet_commitment_sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.packet_commitment_sequences = $util.emptyArray;

                    /**
                     * Encodes the specified QueryUnreceivedPacketsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} message QueryUnreceivedPacketsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.packet_commitment_sequences != null && message.packet_commitment_sequences.length) {
                            writer.uint32(/* id 3, wireType 2 =*/26).fork();
                            for (let i = 0; i < message.packet_commitment_sequences.length; ++i)
                                writer.uint64(message.packet_commitment_sequences[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUnreceivedPacketsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} message QueryUnreceivedPacketsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} QueryUnreceivedPacketsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                if (!(message.packet_commitment_sequences && message.packet_commitment_sequences.length))
                                    message.packet_commitment_sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.packet_commitment_sequences.push(reader.uint64());
                                } else
                                    message.packet_commitment_sequences.push(reader.uint64());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} QueryUnreceivedPacketsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUnreceivedPacketsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUnreceivedPacketsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.packet_commitment_sequences != null && message.hasOwnProperty("packet_commitment_sequences")) {
                            if (!Array.isArray(message.packet_commitment_sequences))
                                return "packet_commitment_sequences: array expected";
                            for (let i = 0; i < message.packet_commitment_sequences.length; ++i)
                                if (!$util.isInteger(message.packet_commitment_sequences[i]) && !(message.packet_commitment_sequences[i] && $util.isInteger(message.packet_commitment_sequences[i].low) && $util.isInteger(message.packet_commitment_sequences[i].high)))
                                    return "packet_commitment_sequences: integer|Long[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUnreceivedPacketsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} QueryUnreceivedPacketsRequest
                     */
                    QueryUnreceivedPacketsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.packet_commitment_sequences) {
                            if (!Array.isArray(object.packet_commitment_sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedPacketsRequest.packet_commitment_sequences: array expected");
                            message.packet_commitment_sequences = [];
                            for (let i = 0; i < object.packet_commitment_sequences.length; ++i)
                                if ($util.Long)
                                    (message.packet_commitment_sequences[i] = $util.Long.fromValue(object.packet_commitment_sequences[i])).unsigned = true;
                                else if (typeof object.packet_commitment_sequences[i] === "string")
                                    message.packet_commitment_sequences[i] = parseInt(object.packet_commitment_sequences[i], 10);
                                else if (typeof object.packet_commitment_sequences[i] === "number")
                                    message.packet_commitment_sequences[i] = object.packet_commitment_sequences[i];
                                else if (typeof object.packet_commitment_sequences[i] === "object")
                                    message.packet_commitment_sequences[i] = new $util.LongBits(object.packet_commitment_sequences[i].low >>> 0, object.packet_commitment_sequences[i].high >>> 0).toNumber(true);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUnreceivedPacketsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} message QueryUnreceivedPacketsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUnreceivedPacketsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.packet_commitment_sequences = [];
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.packet_commitment_sequences && message.packet_commitment_sequences.length) {
                            object.packet_commitment_sequences = [];
                            for (let j = 0; j < message.packet_commitment_sequences.length; ++j)
                                if (typeof message.packet_commitment_sequences[j] === "number")
                                    object.packet_commitment_sequences[j] = options.longs === String ? String(message.packet_commitment_sequences[j]) : message.packet_commitment_sequences[j];
                                else
                                    object.packet_commitment_sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.packet_commitment_sequences[j]) : options.longs === Number ? new $util.LongBits(message.packet_commitment_sequences[j].low >>> 0, message.packet_commitment_sequences[j].high >>> 0).toNumber(true) : message.packet_commitment_sequences[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryUnreceivedPacketsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUnreceivedPacketsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUnreceivedPacketsRequest;
                })();

                v1.QueryUnreceivedPacketsResponse = (function() {

                    /**
                     * Properties of a QueryUnreceivedPacketsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedPacketsResponse
                     * @property {Array.<Long>|null} [sequences] QueryUnreceivedPacketsResponse sequences
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryUnreceivedPacketsResponse height
                     */

                    /**
                     * Constructs a new QueryUnreceivedPacketsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedPacketsResponse.
                     * @implements IQueryUnreceivedPacketsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsResponse=} [properties] Properties to set
                     */
                    function QueryUnreceivedPacketsResponse(properties) {
                        this.sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUnreceivedPacketsResponse sequences.
                     * @member {Array.<Long>} sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @instance
                     */
                    QueryUnreceivedPacketsResponse.prototype.sequences = $util.emptyArray;

                    /**
                     * QueryUnreceivedPacketsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @instance
                     */
                    QueryUnreceivedPacketsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryUnreceivedPacketsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsResponse} message QueryUnreceivedPacketsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequences != null && message.sequences.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (let i = 0; i < message.sequences.length; ++i)
                                writer.uint64(message.sequences[i]);
                            writer.ldelim();
                        }
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUnreceivedPacketsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsResponse} message QueryUnreceivedPacketsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} QueryUnreceivedPacketsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sequences && message.sequences.length))
                                    message.sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.sequences.push(reader.uint64());
                                } else
                                    message.sequences.push(reader.uint64());
                                break;
                            case 2:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} QueryUnreceivedPacketsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUnreceivedPacketsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUnreceivedPacketsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequences != null && message.hasOwnProperty("sequences")) {
                            if (!Array.isArray(message.sequences))
                                return "sequences: array expected";
                            for (let i = 0; i < message.sequences.length; ++i)
                                if (!$util.isInteger(message.sequences[i]) && !(message.sequences[i] && $util.isInteger(message.sequences[i].low) && $util.isInteger(message.sequences[i].high)))
                                    return "sequences: integer|Long[] expected";
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUnreceivedPacketsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} QueryUnreceivedPacketsResponse
                     */
                    QueryUnreceivedPacketsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse();
                        if (object.sequences) {
                            if (!Array.isArray(object.sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedPacketsResponse.sequences: array expected");
                            message.sequences = [];
                            for (let i = 0; i < object.sequences.length; ++i)
                                if ($util.Long)
                                    (message.sequences[i] = $util.Long.fromValue(object.sequences[i])).unsigned = true;
                                else if (typeof object.sequences[i] === "string")
                                    message.sequences[i] = parseInt(object.sequences[i], 10);
                                else if (typeof object.sequences[i] === "number")
                                    message.sequences[i] = object.sequences[i];
                                else if (typeof object.sequences[i] === "object")
                                    message.sequences[i] = new $util.LongBits(object.sequences[i].low >>> 0, object.sequences[i].high >>> 0).toNumber(true);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedPacketsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUnreceivedPacketsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} message QueryUnreceivedPacketsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUnreceivedPacketsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.sequences = [];
                        if (options.defaults)
                            object.height = null;
                        if (message.sequences && message.sequences.length) {
                            object.sequences = [];
                            for (let j = 0; j < message.sequences.length; ++j)
                                if (typeof message.sequences[j] === "number")
                                    object.sequences[j] = options.longs === String ? String(message.sequences[j]) : message.sequences[j];
                                else
                                    object.sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.sequences[j]) : options.longs === Number ? new $util.LongBits(message.sequences[j].low >>> 0, message.sequences[j].high >>> 0).toNumber(true) : message.sequences[j];
                        }
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryUnreceivedPacketsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUnreceivedPacketsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUnreceivedPacketsResponse;
                })();

                v1.QueryUnreceivedAcksRequest = (function() {

                    /**
                     * Properties of a QueryUnreceivedAcksRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedAcksRequest
                     * @property {string|null} [port_id] QueryUnreceivedAcksRequest port_id
                     * @property {string|null} [channel_id] QueryUnreceivedAcksRequest channel_id
                     * @property {Array.<Long>|null} [packet_ack_sequences] QueryUnreceivedAcksRequest packet_ack_sequences
                     */

                    /**
                     * Constructs a new QueryUnreceivedAcksRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedAcksRequest.
                     * @implements IQueryUnreceivedAcksRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest=} [properties] Properties to set
                     */
                    function QueryUnreceivedAcksRequest(properties) {
                        this.packet_ack_sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUnreceivedAcksRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.port_id = "";

                    /**
                     * QueryUnreceivedAcksRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.channel_id = "";

                    /**
                     * QueryUnreceivedAcksRequest packet_ack_sequences.
                     * @member {Array.<Long>} packet_ack_sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.packet_ack_sequences = $util.emptyArray;

                    /**
                     * Encodes the specified QueryUnreceivedAcksRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} message QueryUnreceivedAcksRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.packet_ack_sequences != null && message.packet_ack_sequences.length) {
                            writer.uint32(/* id 3, wireType 2 =*/26).fork();
                            for (let i = 0; i < message.packet_ack_sequences.length; ++i)
                                writer.uint64(message.packet_ack_sequences[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUnreceivedAcksRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} message QueryUnreceivedAcksRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksRequest} QueryUnreceivedAcksRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                if (!(message.packet_ack_sequences && message.packet_ack_sequences.length))
                                    message.packet_ack_sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.packet_ack_sequences.push(reader.uint64());
                                } else
                                    message.packet_ack_sequences.push(reader.uint64());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksRequest} QueryUnreceivedAcksRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUnreceivedAcksRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUnreceivedAcksRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.packet_ack_sequences != null && message.hasOwnProperty("packet_ack_sequences")) {
                            if (!Array.isArray(message.packet_ack_sequences))
                                return "packet_ack_sequences: array expected";
                            for (let i = 0; i < message.packet_ack_sequences.length; ++i)
                                if (!$util.isInteger(message.packet_ack_sequences[i]) && !(message.packet_ack_sequences[i] && $util.isInteger(message.packet_ack_sequences[i].low) && $util.isInteger(message.packet_ack_sequences[i].high)))
                                    return "packet_ack_sequences: integer|Long[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUnreceivedAcksRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksRequest} QueryUnreceivedAcksRequest
                     */
                    QueryUnreceivedAcksRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.packet_ack_sequences) {
                            if (!Array.isArray(object.packet_ack_sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedAcksRequest.packet_ack_sequences: array expected");
                            message.packet_ack_sequences = [];
                            for (let i = 0; i < object.packet_ack_sequences.length; ++i)
                                if ($util.Long)
                                    (message.packet_ack_sequences[i] = $util.Long.fromValue(object.packet_ack_sequences[i])).unsigned = true;
                                else if (typeof object.packet_ack_sequences[i] === "string")
                                    message.packet_ack_sequences[i] = parseInt(object.packet_ack_sequences[i], 10);
                                else if (typeof object.packet_ack_sequences[i] === "number")
                                    message.packet_ack_sequences[i] = object.packet_ack_sequences[i];
                                else if (typeof object.packet_ack_sequences[i] === "object")
                                    message.packet_ack_sequences[i] = new $util.LongBits(object.packet_ack_sequences[i].low >>> 0, object.packet_ack_sequences[i].high >>> 0).toNumber(true);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUnreceivedAcksRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryUnreceivedAcksRequest} message QueryUnreceivedAcksRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUnreceivedAcksRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.packet_ack_sequences = [];
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.packet_ack_sequences && message.packet_ack_sequences.length) {
                            object.packet_ack_sequences = [];
                            for (let j = 0; j < message.packet_ack_sequences.length; ++j)
                                if (typeof message.packet_ack_sequences[j] === "number")
                                    object.packet_ack_sequences[j] = options.longs === String ? String(message.packet_ack_sequences[j]) : message.packet_ack_sequences[j];
                                else
                                    object.packet_ack_sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.packet_ack_sequences[j]) : options.longs === Number ? new $util.LongBits(message.packet_ack_sequences[j].low >>> 0, message.packet_ack_sequences[j].high >>> 0).toNumber(true) : message.packet_ack_sequences[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryUnreceivedAcksRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUnreceivedAcksRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUnreceivedAcksRequest;
                })();

                v1.QueryUnreceivedAcksResponse = (function() {

                    /**
                     * Properties of a QueryUnreceivedAcksResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedAcksResponse
                     * @property {Array.<Long>|null} [sequences] QueryUnreceivedAcksResponse sequences
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryUnreceivedAcksResponse height
                     */

                    /**
                     * Constructs a new QueryUnreceivedAcksResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedAcksResponse.
                     * @implements IQueryUnreceivedAcksResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksResponse=} [properties] Properties to set
                     */
                    function QueryUnreceivedAcksResponse(properties) {
                        this.sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUnreceivedAcksResponse sequences.
                     * @member {Array.<Long>} sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @instance
                     */
                    QueryUnreceivedAcksResponse.prototype.sequences = $util.emptyArray;

                    /**
                     * QueryUnreceivedAcksResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @instance
                     */
                    QueryUnreceivedAcksResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryUnreceivedAcksResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksResponse} message QueryUnreceivedAcksResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequences != null && message.sequences.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (let i = 0; i < message.sequences.length; ++i)
                                writer.uint64(message.sequences[i]);
                            writer.ldelim();
                        }
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUnreceivedAcksResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksResponse} message QueryUnreceivedAcksResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksResponse} QueryUnreceivedAcksResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sequences && message.sequences.length))
                                    message.sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.sequences.push(reader.uint64());
                                } else
                                    message.sequences.push(reader.uint64());
                                break;
                            case 2:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksResponse} QueryUnreceivedAcksResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUnreceivedAcksResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUnreceivedAcksResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequences != null && message.hasOwnProperty("sequences")) {
                            if (!Array.isArray(message.sequences))
                                return "sequences: array expected";
                            for (let i = 0; i < message.sequences.length; ++i)
                                if (!$util.isInteger(message.sequences[i]) && !(message.sequences[i] && $util.isInteger(message.sequences[i].low) && $util.isInteger(message.sequences[i].high)))
                                    return "sequences: integer|Long[] expected";
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUnreceivedAcksResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksResponse} QueryUnreceivedAcksResponse
                     */
                    QueryUnreceivedAcksResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse();
                        if (object.sequences) {
                            if (!Array.isArray(object.sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedAcksResponse.sequences: array expected");
                            message.sequences = [];
                            for (let i = 0; i < object.sequences.length; ++i)
                                if ($util.Long)
                                    (message.sequences[i] = $util.Long.fromValue(object.sequences[i])).unsigned = true;
                                else if (typeof object.sequences[i] === "string")
                                    message.sequences[i] = parseInt(object.sequences[i], 10);
                                else if (typeof object.sequences[i] === "number")
                                    message.sequences[i] = object.sequences[i];
                                else if (typeof object.sequences[i] === "object")
                                    message.sequences[i] = new $util.LongBits(object.sequences[i].low >>> 0, object.sequences[i].high >>> 0).toNumber(true);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedAcksResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUnreceivedAcksResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryUnreceivedAcksResponse} message QueryUnreceivedAcksResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUnreceivedAcksResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.sequences = [];
                        if (options.defaults)
                            object.height = null;
                        if (message.sequences && message.sequences.length) {
                            object.sequences = [];
                            for (let j = 0; j < message.sequences.length; ++j)
                                if (typeof message.sequences[j] === "number")
                                    object.sequences[j] = options.longs === String ? String(message.sequences[j]) : message.sequences[j];
                                else
                                    object.sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.sequences[j]) : options.longs === Number ? new $util.LongBits(message.sequences[j].low >>> 0, message.sequences[j].high >>> 0).toNumber(true) : message.sequences[j];
                        }
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryUnreceivedAcksResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUnreceivedAcksResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUnreceivedAcksResponse;
                })();

                v1.QueryNextSequenceReceiveRequest = (function() {

                    /**
                     * Properties of a QueryNextSequenceReceiveRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryNextSequenceReceiveRequest
                     * @property {string|null} [port_id] QueryNextSequenceReceiveRequest port_id
                     * @property {string|null} [channel_id] QueryNextSequenceReceiveRequest channel_id
                     */

                    /**
                     * Constructs a new QueryNextSequenceReceiveRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryNextSequenceReceiveRequest.
                     * @implements IQueryNextSequenceReceiveRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest=} [properties] Properties to set
                     */
                    function QueryNextSequenceReceiveRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryNextSequenceReceiveRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @instance
                     */
                    QueryNextSequenceReceiveRequest.prototype.port_id = "";

                    /**
                     * QueryNextSequenceReceiveRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @instance
                     */
                    QueryNextSequenceReceiveRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryNextSequenceReceiveRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} message QueryNextSequenceReceiveRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryNextSequenceReceiveRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} message QueryNextSequenceReceiveRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} QueryNextSequenceReceiveRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} QueryNextSequenceReceiveRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryNextSequenceReceiveRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryNextSequenceReceiveRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryNextSequenceReceiveRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} QueryNextSequenceReceiveRequest
                     */
                    QueryNextSequenceReceiveRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryNextSequenceReceiveRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} message QueryNextSequenceReceiveRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryNextSequenceReceiveRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this QueryNextSequenceReceiveRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryNextSequenceReceiveRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryNextSequenceReceiveRequest;
                })();

                v1.QueryNextSequenceReceiveResponse = (function() {

                    /**
                     * Properties of a QueryNextSequenceReceiveResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryNextSequenceReceiveResponse
                     * @property {Long|null} [next_sequence_receive] QueryNextSequenceReceiveResponse next_sequence_receive
                     * @property {Uint8Array|null} [proof] QueryNextSequenceReceiveResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryNextSequenceReceiveResponse proof_height
                     */

                    /**
                     * Constructs a new QueryNextSequenceReceiveResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryNextSequenceReceiveResponse.
                     * @implements IQueryNextSequenceReceiveResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveResponse=} [properties] Properties to set
                     */
                    function QueryNextSequenceReceiveResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryNextSequenceReceiveResponse next_sequence_receive.
                     * @member {Long} next_sequence_receive
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.next_sequence_receive = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryNextSequenceReceiveResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryNextSequenceReceiveResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryNextSequenceReceiveResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveResponse} message QueryNextSequenceReceiveResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.next_sequence_receive != null && Object.hasOwnProperty.call(message, "next_sequence_receive"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.next_sequence_receive);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryNextSequenceReceiveResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveResponse} message QueryNextSequenceReceiveResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} QueryNextSequenceReceiveResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.next_sequence_receive = reader.uint64();
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} QueryNextSequenceReceiveResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryNextSequenceReceiveResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryNextSequenceReceiveResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.next_sequence_receive != null && message.hasOwnProperty("next_sequence_receive"))
                            if (!$util.isInteger(message.next_sequence_receive) && !(message.next_sequence_receive && $util.isInteger(message.next_sequence_receive.low) && $util.isInteger(message.next_sequence_receive.high)))
                                return "next_sequence_receive: integer|Long expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryNextSequenceReceiveResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} QueryNextSequenceReceiveResponse
                     */
                    QueryNextSequenceReceiveResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse();
                        if (object.next_sequence_receive != null)
                            if ($util.Long)
                                (message.next_sequence_receive = $util.Long.fromValue(object.next_sequence_receive)).unsigned = true;
                            else if (typeof object.next_sequence_receive === "string")
                                message.next_sequence_receive = parseInt(object.next_sequence_receive, 10);
                            else if (typeof object.next_sequence_receive === "number")
                                message.next_sequence_receive = object.next_sequence_receive;
                            else if (typeof object.next_sequence_receive === "object")
                                message.next_sequence_receive = new $util.LongBits(object.next_sequence_receive.low >>> 0, object.next_sequence_receive.high >>> 0).toNumber(true);
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryNextSequenceReceiveResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} message QueryNextSequenceReceiveResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryNextSequenceReceiveResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_sequence_receive = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_sequence_receive = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.next_sequence_receive != null && message.hasOwnProperty("next_sequence_receive"))
                            if (typeof message.next_sequence_receive === "number")
                                object.next_sequence_receive = options.longs === String ? String(message.next_sequence_receive) : message.next_sequence_receive;
                            else
                                object.next_sequence_receive = options.longs === String ? $util.Long.prototype.toString.call(message.next_sequence_receive) : options.longs === Number ? new $util.LongBits(message.next_sequence_receive.low >>> 0, message.next_sequence_receive.high >>> 0).toNumber(true) : message.next_sequence_receive;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryNextSequenceReceiveResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryNextSequenceReceiveResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryNextSequenceReceiveResponse;
                })();

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.channel.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] GenesisState channels
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [acknowledgements] GenesisState acknowledgements
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [commitments] GenesisState commitments
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [receipts] GenesisState receipts
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [send_sequences] GenesisState send_sequences
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [recv_sequences] GenesisState recv_sequences
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [ack_sequences] GenesisState ack_sequences
                     * @property {Long|null} [next_channel_sequence] GenesisState next_channel_sequence
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.channel.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.channels = [];
                        this.acknowledgements = [];
                        this.commitments = [];
                        this.receipts = [];
                        this.send_sequences = [];
                        this.recv_sequences = [];
                        this.ack_sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.channels = $util.emptyArray;

                    /**
                     * GenesisState acknowledgements.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} acknowledgements
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.acknowledgements = $util.emptyArray;

                    /**
                     * GenesisState commitments.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} commitments
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.commitments = $util.emptyArray;

                    /**
                     * GenesisState receipts.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} receipts
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.receipts = $util.emptyArray;

                    /**
                     * GenesisState send_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} send_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.send_sequences = $util.emptyArray;

                    /**
                     * GenesisState recv_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} recv_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.recv_sequences = $util.emptyArray;

                    /**
                     * GenesisState ack_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} ack_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.ack_sequences = $util.emptyArray;

                    /**
                     * GenesisState next_channel_sequence.
                     * @member {Long} next_channel_sequence
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_channel_sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.channel.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {ibc.core.channel.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channels != null && message.channels.length)
                            for (let i = 0; i < message.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(message.channels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.acknowledgements != null && message.acknowledgements.length)
                            for (let i = 0; i < message.acknowledgements.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.acknowledgements[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.commitments != null && message.commitments.length)
                            for (let i = 0; i < message.commitments.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.commitments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.receipts != null && message.receipts.length)
                            for (let i = 0; i < message.receipts.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.receipts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.send_sequences != null && message.send_sequences.length)
                            for (let i = 0; i < message.send_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(message.send_sequences[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.recv_sequences != null && message.recv_sequences.length)
                            for (let i = 0; i < message.recv_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(message.recv_sequences[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.ack_sequences != null && message.ack_sequences.length)
                            for (let i = 0; i < message.ack_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(message.ack_sequences[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.next_channel_sequence != null && Object.hasOwnProperty.call(message, "next_channel_sequence"))
                            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.next_channel_sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.core.channel.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {ibc.core.channel.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.channels && message.channels.length))
                                    message.channels = [];
                                message.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.acknowledgements && message.acknowledgements.length))
                                    message.acknowledgements = [];
                                message.acknowledgements.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.commitments && message.commitments.length))
                                    message.commitments = [];
                                message.commitments.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                if (!(message.receipts && message.receipts.length))
                                    message.receipts = [];
                                message.receipts.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                if (!(message.send_sequences && message.send_sequences.length))
                                    message.send_sequences = [];
                                message.send_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(reader, reader.uint32()));
                                break;
                            case 6:
                                if (!(message.recv_sequences && message.recv_sequences.length))
                                    message.recv_sequences = [];
                                message.recv_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(reader, reader.uint32()));
                                break;
                            case 7:
                                if (!(message.ack_sequences && message.ack_sequences.length))
                                    message.ack_sequences = [];
                                message.ack_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(reader, reader.uint32()));
                                break;
                            case 8:
                                message.next_channel_sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channels != null && message.hasOwnProperty("channels")) {
                            if (!Array.isArray(message.channels))
                                return "channels: array expected";
                            for (let i = 0; i < message.channels.length; ++i) {
                                let error = $root.ibc.core.channel.v1.IdentifiedChannel.verify(message.channels[i]);
                                if (error)
                                    return "channels." + error;
                            }
                        }
                        if (message.acknowledgements != null && message.hasOwnProperty("acknowledgements")) {
                            if (!Array.isArray(message.acknowledgements))
                                return "acknowledgements: array expected";
                            for (let i = 0; i < message.acknowledgements.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.acknowledgements[i]);
                                if (error)
                                    return "acknowledgements." + error;
                            }
                        }
                        if (message.commitments != null && message.hasOwnProperty("commitments")) {
                            if (!Array.isArray(message.commitments))
                                return "commitments: array expected";
                            for (let i = 0; i < message.commitments.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.commitments[i]);
                                if (error)
                                    return "commitments." + error;
                            }
                        }
                        if (message.receipts != null && message.hasOwnProperty("receipts")) {
                            if (!Array.isArray(message.receipts))
                                return "receipts: array expected";
                            for (let i = 0; i < message.receipts.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.receipts[i]);
                                if (error)
                                    return "receipts." + error;
                            }
                        }
                        if (message.send_sequences != null && message.hasOwnProperty("send_sequences")) {
                            if (!Array.isArray(message.send_sequences))
                                return "send_sequences: array expected";
                            for (let i = 0; i < message.send_sequences.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketSequence.verify(message.send_sequences[i]);
                                if (error)
                                    return "send_sequences." + error;
                            }
                        }
                        if (message.recv_sequences != null && message.hasOwnProperty("recv_sequences")) {
                            if (!Array.isArray(message.recv_sequences))
                                return "recv_sequences: array expected";
                            for (let i = 0; i < message.recv_sequences.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketSequence.verify(message.recv_sequences[i]);
                                if (error)
                                    return "recv_sequences." + error;
                            }
                        }
                        if (message.ack_sequences != null && message.hasOwnProperty("ack_sequences")) {
                            if (!Array.isArray(message.ack_sequences))
                                return "ack_sequences: array expected";
                            for (let i = 0; i < message.ack_sequences.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketSequence.verify(message.ack_sequences[i]);
                                if (error)
                                    return "ack_sequences." + error;
                            }
                        }
                        if (message.next_channel_sequence != null && message.hasOwnProperty("next_channel_sequence"))
                            if (!$util.isInteger(message.next_channel_sequence) && !(message.next_channel_sequence && $util.isInteger(message.next_channel_sequence.low) && $util.isInteger(message.next_channel_sequence.high)))
                                return "next_channel_sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.core.channel.v1.GenesisState();
                        if (object.channels) {
                            if (!Array.isArray(object.channels))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.channels: array expected");
                            message.channels = [];
                            for (let i = 0; i < object.channels.length; ++i) {
                                if (typeof object.channels[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.channels: object expected");
                                message.channels[i] = $root.ibc.core.channel.v1.IdentifiedChannel.fromObject(object.channels[i]);
                            }
                        }
                        if (object.acknowledgements) {
                            if (!Array.isArray(object.acknowledgements))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.acknowledgements: array expected");
                            message.acknowledgements = [];
                            for (let i = 0; i < object.acknowledgements.length; ++i) {
                                if (typeof object.acknowledgements[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.acknowledgements: object expected");
                                message.acknowledgements[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.acknowledgements[i]);
                            }
                        }
                        if (object.commitments) {
                            if (!Array.isArray(object.commitments))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.commitments: array expected");
                            message.commitments = [];
                            for (let i = 0; i < object.commitments.length; ++i) {
                                if (typeof object.commitments[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.commitments: object expected");
                                message.commitments[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.commitments[i]);
                            }
                        }
                        if (object.receipts) {
                            if (!Array.isArray(object.receipts))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.receipts: array expected");
                            message.receipts = [];
                            for (let i = 0; i < object.receipts.length; ++i) {
                                if (typeof object.receipts[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.receipts: object expected");
                                message.receipts[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.receipts[i]);
                            }
                        }
                        if (object.send_sequences) {
                            if (!Array.isArray(object.send_sequences))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.send_sequences: array expected");
                            message.send_sequences = [];
                            for (let i = 0; i < object.send_sequences.length; ++i) {
                                if (typeof object.send_sequences[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.send_sequences: object expected");
                                message.send_sequences[i] = $root.ibc.core.channel.v1.PacketSequence.fromObject(object.send_sequences[i]);
                            }
                        }
                        if (object.recv_sequences) {
                            if (!Array.isArray(object.recv_sequences))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.recv_sequences: array expected");
                            message.recv_sequences = [];
                            for (let i = 0; i < object.recv_sequences.length; ++i) {
                                if (typeof object.recv_sequences[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.recv_sequences: object expected");
                                message.recv_sequences[i] = $root.ibc.core.channel.v1.PacketSequence.fromObject(object.recv_sequences[i]);
                            }
                        }
                        if (object.ack_sequences) {
                            if (!Array.isArray(object.ack_sequences))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.ack_sequences: array expected");
                            message.ack_sequences = [];
                            for (let i = 0; i < object.ack_sequences.length; ++i) {
                                if (typeof object.ack_sequences[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.ack_sequences: object expected");
                                message.ack_sequences[i] = $root.ibc.core.channel.v1.PacketSequence.fromObject(object.ack_sequences[i]);
                            }
                        }
                        if (object.next_channel_sequence != null)
                            if ($util.Long)
                                (message.next_channel_sequence = $util.Long.fromValue(object.next_channel_sequence)).unsigned = true;
                            else if (typeof object.next_channel_sequence === "string")
                                message.next_channel_sequence = parseInt(object.next_channel_sequence, 10);
                            else if (typeof object.next_channel_sequence === "number")
                                message.next_channel_sequence = object.next_channel_sequence;
                            else if (typeof object.next_channel_sequence === "object")
                                message.next_channel_sequence = new $util.LongBits(object.next_channel_sequence.low >>> 0, object.next_channel_sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {ibc.core.channel.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.channels = [];
                            object.acknowledgements = [];
                            object.commitments = [];
                            object.receipts = [];
                            object.send_sequences = [];
                            object.recv_sequences = [];
                            object.ack_sequences = [];
                        }
                        if (options.defaults)
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_channel_sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_channel_sequence = options.longs === String ? "0" : 0;
                        if (message.channels && message.channels.length) {
                            object.channels = [];
                            for (let j = 0; j < message.channels.length; ++j)
                                object.channels[j] = $root.ibc.core.channel.v1.IdentifiedChannel.toObject(message.channels[j], options);
                        }
                        if (message.acknowledgements && message.acknowledgements.length) {
                            object.acknowledgements = [];
                            for (let j = 0; j < message.acknowledgements.length; ++j)
                                object.acknowledgements[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.acknowledgements[j], options);
                        }
                        if (message.commitments && message.commitments.length) {
                            object.commitments = [];
                            for (let j = 0; j < message.commitments.length; ++j)
                                object.commitments[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.commitments[j], options);
                        }
                        if (message.receipts && message.receipts.length) {
                            object.receipts = [];
                            for (let j = 0; j < message.receipts.length; ++j)
                                object.receipts[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.receipts[j], options);
                        }
                        if (message.send_sequences && message.send_sequences.length) {
                            object.send_sequences = [];
                            for (let j = 0; j < message.send_sequences.length; ++j)
                                object.send_sequences[j] = $root.ibc.core.channel.v1.PacketSequence.toObject(message.send_sequences[j], options);
                        }
                        if (message.recv_sequences && message.recv_sequences.length) {
                            object.recv_sequences = [];
                            for (let j = 0; j < message.recv_sequences.length; ++j)
                                object.recv_sequences[j] = $root.ibc.core.channel.v1.PacketSequence.toObject(message.recv_sequences[j], options);
                        }
                        if (message.ack_sequences && message.ack_sequences.length) {
                            object.ack_sequences = [];
                            for (let j = 0; j < message.ack_sequences.length; ++j)
                                object.ack_sequences[j] = $root.ibc.core.channel.v1.PacketSequence.toObject(message.ack_sequences[j], options);
                        }
                        if (message.next_channel_sequence != null && message.hasOwnProperty("next_channel_sequence"))
                            if (typeof message.next_channel_sequence === "number")
                                object.next_channel_sequence = options.longs === String ? String(message.next_channel_sequence) : message.next_channel_sequence;
                            else
                                object.next_channel_sequence = options.longs === String ? $util.Long.prototype.toString.call(message.next_channel_sequence) : options.longs === Number ? new $util.LongBits(message.next_channel_sequence.low >>> 0, message.next_channel_sequence.high >>> 0).toNumber(true) : message.next_channel_sequence;
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                v1.PacketSequence = (function() {

                    /**
                     * Properties of a PacketSequence.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacketSequence
                     * @property {string|null} [port_id] PacketSequence port_id
                     * @property {string|null} [channel_id] PacketSequence channel_id
                     * @property {Long|null} [sequence] PacketSequence sequence
                     */

                    /**
                     * Constructs a new PacketSequence.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a PacketSequence.
                     * @implements IPacketSequence
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacketSequence=} [properties] Properties to set
                     */
                    function PacketSequence(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketSequence port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.port_id = "";

                    /**
                     * PacketSequence channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.channel_id = "";

                    /**
                     * PacketSequence sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified PacketSequence message. Does not implicitly {@link ibc.core.channel.v1.PacketSequence.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {ibc.core.channel.v1.IPacketSequence} message PacketSequence message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketSequence.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketSequence message, length delimited. Does not implicitly {@link ibc.core.channel.v1.PacketSequence.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {ibc.core.channel.v1.IPacketSequence} message PacketSequence message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketSequence.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketSequence message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.PacketSequence} PacketSequence
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketSequence.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.PacketSequence();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketSequence message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.PacketSequence} PacketSequence
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketSequence.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketSequence message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketSequence.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a PacketSequence message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.PacketSequence} PacketSequence
                     */
                    PacketSequence.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.PacketSequence)
                            return object;
                        let message = new $root.ibc.core.channel.v1.PacketSequence();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketSequence message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {ibc.core.channel.v1.PacketSequence} message PacketSequence
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketSequence.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        return object;
                    };

                    /**
                     * Converts this PacketSequence to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketSequence.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketSequence;
                })();

                return v1;
            })();

            return channel;
        })();

        core.commitment = (function() {

            /**
             * Namespace commitment.
             * @memberof ibc.core
             * @namespace
             */
            const commitment = {};

            commitment.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.commitment
                 * @namespace
                 */
                const v1 = {};

                v1.MerkleRoot = (function() {

                    /**
                     * Properties of a MerkleRoot.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerkleRoot
                     * @property {Uint8Array|null} [hash] MerkleRoot hash
                     */

                    /**
                     * Constructs a new MerkleRoot.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerkleRoot.
                     * @implements IMerkleRoot
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerkleRoot=} [properties] Properties to set
                     */
                    function MerkleRoot(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MerkleRoot hash.
                     * @member {Uint8Array} hash
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @instance
                     */
                    MerkleRoot.prototype.hash = $util.newBuffer([]);

                    /**
                     * Encodes the specified MerkleRoot message. Does not implicitly {@link ibc.core.commitment.v1.MerkleRoot.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleRoot} message MerkleRoot message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleRoot.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                        return writer;
                    };

                    /**
                     * Encodes the specified MerkleRoot message, length delimited. Does not implicitly {@link ibc.core.commitment.v1.MerkleRoot.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleRoot} message MerkleRoot message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleRoot.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MerkleRoot message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerkleRoot} MerkleRoot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleRoot.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.commitment.v1.MerkleRoot();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.hash = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MerkleRoot message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.commitment.v1.MerkleRoot} MerkleRoot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleRoot.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MerkleRoot message.
                     * @function verify
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MerkleRoot.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                                return "hash: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a MerkleRoot message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.commitment.v1.MerkleRoot} MerkleRoot
                     */
                    MerkleRoot.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.commitment.v1.MerkleRoot)
                            return object;
                        let message = new $root.ibc.core.commitment.v1.MerkleRoot();
                        if (object.hash != null)
                            if (typeof object.hash === "string")
                                $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                            else if (object.hash.length)
                                message.hash = object.hash;
                        return message;
                    };

                    /**
                     * Creates a plain object from a MerkleRoot message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {ibc.core.commitment.v1.MerkleRoot} message MerkleRoot
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MerkleRoot.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.hash = "";
                            else {
                                object.hash = [];
                                if (options.bytes !== Array)
                                    object.hash = $util.newBuffer(object.hash);
                            }
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                        return object;
                    };

                    /**
                     * Converts this MerkleRoot to JSON.
                     * @function toJSON
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MerkleRoot.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MerkleRoot;
                })();

                v1.MerklePrefix = (function() {

                    /**
                     * Properties of a MerklePrefix.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerklePrefix
                     * @property {Uint8Array|null} [key_prefix] MerklePrefix key_prefix
                     */

                    /**
                     * Constructs a new MerklePrefix.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerklePrefix.
                     * @implements IMerklePrefix
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerklePrefix=} [properties] Properties to set
                     */
                    function MerklePrefix(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MerklePrefix key_prefix.
                     * @member {Uint8Array} key_prefix
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @instance
                     */
                    MerklePrefix.prototype.key_prefix = $util.newBuffer([]);

                    /**
                     * Encodes the specified MerklePrefix message. Does not implicitly {@link ibc.core.commitment.v1.MerklePrefix.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePrefix} message MerklePrefix message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePrefix.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key_prefix != null && Object.hasOwnProperty.call(message, "key_prefix"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key_prefix);
                        return writer;
                    };

                    /**
                     * Encodes the specified MerklePrefix message, length delimited. Does not implicitly {@link ibc.core.commitment.v1.MerklePrefix.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePrefix} message MerklePrefix message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePrefix.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MerklePrefix message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerklePrefix} MerklePrefix
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePrefix.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.commitment.v1.MerklePrefix();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key_prefix = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MerklePrefix message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.commitment.v1.MerklePrefix} MerklePrefix
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePrefix.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MerklePrefix message.
                     * @function verify
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MerklePrefix.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key_prefix != null && message.hasOwnProperty("key_prefix"))
                            if (!(message.key_prefix && typeof message.key_prefix.length === "number" || $util.isString(message.key_prefix)))
                                return "key_prefix: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a MerklePrefix message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.commitment.v1.MerklePrefix} MerklePrefix
                     */
                    MerklePrefix.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.commitment.v1.MerklePrefix)
                            return object;
                        let message = new $root.ibc.core.commitment.v1.MerklePrefix();
                        if (object.key_prefix != null)
                            if (typeof object.key_prefix === "string")
                                $util.base64.decode(object.key_prefix, message.key_prefix = $util.newBuffer($util.base64.length(object.key_prefix)), 0);
                            else if (object.key_prefix.length)
                                message.key_prefix = object.key_prefix;
                        return message;
                    };

                    /**
                     * Creates a plain object from a MerklePrefix message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {ibc.core.commitment.v1.MerklePrefix} message MerklePrefix
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MerklePrefix.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.key_prefix = "";
                            else {
                                object.key_prefix = [];
                                if (options.bytes !== Array)
                                    object.key_prefix = $util.newBuffer(object.key_prefix);
                            }
                        if (message.key_prefix != null && message.hasOwnProperty("key_prefix"))
                            object.key_prefix = options.bytes === String ? $util.base64.encode(message.key_prefix, 0, message.key_prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.key_prefix) : message.key_prefix;
                        return object;
                    };

                    /**
                     * Converts this MerklePrefix to JSON.
                     * @function toJSON
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MerklePrefix.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MerklePrefix;
                })();

                v1.MerklePath = (function() {

                    /**
                     * Properties of a MerklePath.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerklePath
                     * @property {Array.<string>|null} [key_path] MerklePath key_path
                     */

                    /**
                     * Constructs a new MerklePath.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerklePath.
                     * @implements IMerklePath
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerklePath=} [properties] Properties to set
                     */
                    function MerklePath(properties) {
                        this.key_path = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MerklePath key_path.
                     * @member {Array.<string>} key_path
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @instance
                     */
                    MerklePath.prototype.key_path = $util.emptyArray;

                    /**
                     * Encodes the specified MerklePath message. Does not implicitly {@link ibc.core.commitment.v1.MerklePath.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePath} message MerklePath message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePath.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key_path != null && message.key_path.length)
                            for (let i = 0; i < message.key_path.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key_path[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified MerklePath message, length delimited. Does not implicitly {@link ibc.core.commitment.v1.MerklePath.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePath} message MerklePath message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePath.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MerklePath message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerklePath} MerklePath
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePath.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.commitment.v1.MerklePath();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.key_path && message.key_path.length))
                                    message.key_path = [];
                                message.key_path.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MerklePath message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.commitment.v1.MerklePath} MerklePath
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePath.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MerklePath message.
                     * @function verify
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MerklePath.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key_path != null && message.hasOwnProperty("key_path")) {
                            if (!Array.isArray(message.key_path))
                                return "key_path: array expected";
                            for (let i = 0; i < message.key_path.length; ++i)
                                if (!$util.isString(message.key_path[i]))
                                    return "key_path: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a MerklePath message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.commitment.v1.MerklePath} MerklePath
                     */
                    MerklePath.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.commitment.v1.MerklePath)
                            return object;
                        let message = new $root.ibc.core.commitment.v1.MerklePath();
                        if (object.key_path) {
                            if (!Array.isArray(object.key_path))
                                throw TypeError(".ibc.core.commitment.v1.MerklePath.key_path: array expected");
                            message.key_path = [];
                            for (let i = 0; i < object.key_path.length; ++i)
                                message.key_path[i] = String(object.key_path[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MerklePath message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {ibc.core.commitment.v1.MerklePath} message MerklePath
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MerklePath.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.key_path = [];
                        if (message.key_path && message.key_path.length) {
                            object.key_path = [];
                            for (let j = 0; j < message.key_path.length; ++j)
                                object.key_path[j] = message.key_path[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this MerklePath to JSON.
                     * @function toJSON
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MerklePath.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MerklePath;
                })();

                v1.MerkleProof = (function() {

                    /**
                     * Properties of a MerkleProof.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerkleProof
                     * @property {Array.<ics23.ICommitmentProof>|null} [proofs] MerkleProof proofs
                     */

                    /**
                     * Constructs a new MerkleProof.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerkleProof.
                     * @implements IMerkleProof
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerkleProof=} [properties] Properties to set
                     */
                    function MerkleProof(properties) {
                        this.proofs = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MerkleProof proofs.
                     * @member {Array.<ics23.ICommitmentProof>} proofs
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @instance
                     */
                    MerkleProof.prototype.proofs = $util.emptyArray;

                    /**
                     * Encodes the specified MerkleProof message. Does not implicitly {@link ibc.core.commitment.v1.MerkleProof.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleProof} message MerkleProof message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleProof.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.proofs != null && message.proofs.length)
                            for (let i = 0; i < message.proofs.length; ++i)
                                $root.ics23.CommitmentProof.encode(message.proofs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MerkleProof message, length delimited. Does not implicitly {@link ibc.core.commitment.v1.MerkleProof.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleProof} message MerkleProof message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleProof.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MerkleProof message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerkleProof} MerkleProof
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleProof.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.commitment.v1.MerkleProof();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.proofs && message.proofs.length))
                                    message.proofs = [];
                                message.proofs.push($root.ics23.CommitmentProof.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MerkleProof message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.commitment.v1.MerkleProof} MerkleProof
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleProof.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MerkleProof message.
                     * @function verify
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MerkleProof.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.proofs != null && message.hasOwnProperty("proofs")) {
                            if (!Array.isArray(message.proofs))
                                return "proofs: array expected";
                            for (let i = 0; i < message.proofs.length; ++i) {
                                let error = $root.ics23.CommitmentProof.verify(message.proofs[i]);
                                if (error)
                                    return "proofs." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a MerkleProof message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.commitment.v1.MerkleProof} MerkleProof
                     */
                    MerkleProof.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.commitment.v1.MerkleProof)
                            return object;
                        let message = new $root.ibc.core.commitment.v1.MerkleProof();
                        if (object.proofs) {
                            if (!Array.isArray(object.proofs))
                                throw TypeError(".ibc.core.commitment.v1.MerkleProof.proofs: array expected");
                            message.proofs = [];
                            for (let i = 0; i < object.proofs.length; ++i) {
                                if (typeof object.proofs[i] !== "object")
                                    throw TypeError(".ibc.core.commitment.v1.MerkleProof.proofs: object expected");
                                message.proofs[i] = $root.ics23.CommitmentProof.fromObject(object.proofs[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MerkleProof message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {ibc.core.commitment.v1.MerkleProof} message MerkleProof
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MerkleProof.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.proofs = [];
                        if (message.proofs && message.proofs.length) {
                            object.proofs = [];
                            for (let j = 0; j < message.proofs.length; ++j)
                                object.proofs[j] = $root.ics23.CommitmentProof.toObject(message.proofs[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this MerkleProof to JSON.
                     * @function toJSON
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MerkleProof.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MerkleProof;
                })();

                return v1;
            })();

            return commitment;
        })();

        core.connection = (function() {

            /**
             * Namespace connection.
             * @memberof ibc.core
             * @namespace
             */
            const connection = {};

            connection.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.connection
                 * @namespace
                 */
                const v1 = {};

                v1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Msg#connectionOpenInit}.
                     * @memberof ibc.core.connection.v1.Msg
                     * @typedef ConnectionOpenInitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.MsgConnectionOpenInitResponse} [response] MsgConnectionOpenInitResponse
                     */

                    /**
                     * Calls ConnectionOpenInit.
                     * @function connectionOpenInit
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} request MsgConnectionOpenInit message or plain object
                     * @param {ibc.core.connection.v1.Msg.ConnectionOpenInitCallback} callback Node-style callback called with the error, if any, and MsgConnectionOpenInitResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.connectionOpenInit = function connectionOpenInit(request, callback) {
                        return this.rpcCall(connectionOpenInit, $root.ibc.core.connection.v1.MsgConnectionOpenInit, $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse, request, callback);
                    }, "name", { value: "ConnectionOpenInit" });

                    /**
                     * Calls ConnectionOpenInit.
                     * @function connectionOpenInit
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} request MsgConnectionOpenInit message or plain object
                     * @returns {Promise<ibc.core.connection.v1.MsgConnectionOpenInitResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Msg#connectionOpenTry}.
                     * @memberof ibc.core.connection.v1.Msg
                     * @typedef ConnectionOpenTryCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.MsgConnectionOpenTryResponse} [response] MsgConnectionOpenTryResponse
                     */

                    /**
                     * Calls ConnectionOpenTry.
                     * @function connectionOpenTry
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} request MsgConnectionOpenTry message or plain object
                     * @param {ibc.core.connection.v1.Msg.ConnectionOpenTryCallback} callback Node-style callback called with the error, if any, and MsgConnectionOpenTryResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.connectionOpenTry = function connectionOpenTry(request, callback) {
                        return this.rpcCall(connectionOpenTry, $root.ibc.core.connection.v1.MsgConnectionOpenTry, $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse, request, callback);
                    }, "name", { value: "ConnectionOpenTry" });

                    /**
                     * Calls ConnectionOpenTry.
                     * @function connectionOpenTry
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} request MsgConnectionOpenTry message or plain object
                     * @returns {Promise<ibc.core.connection.v1.MsgConnectionOpenTryResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Msg#connectionOpenAck}.
                     * @memberof ibc.core.connection.v1.Msg
                     * @typedef ConnectionOpenAckCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.MsgConnectionOpenAckResponse} [response] MsgConnectionOpenAckResponse
                     */

                    /**
                     * Calls ConnectionOpenAck.
                     * @function connectionOpenAck
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} request MsgConnectionOpenAck message or plain object
                     * @param {ibc.core.connection.v1.Msg.ConnectionOpenAckCallback} callback Node-style callback called with the error, if any, and MsgConnectionOpenAckResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.connectionOpenAck = function connectionOpenAck(request, callback) {
                        return this.rpcCall(connectionOpenAck, $root.ibc.core.connection.v1.MsgConnectionOpenAck, $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse, request, callback);
                    }, "name", { value: "ConnectionOpenAck" });

                    /**
                     * Calls ConnectionOpenAck.
                     * @function connectionOpenAck
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} request MsgConnectionOpenAck message or plain object
                     * @returns {Promise<ibc.core.connection.v1.MsgConnectionOpenAckResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Msg#connectionOpenConfirm}.
                     * @memberof ibc.core.connection.v1.Msg
                     * @typedef ConnectionOpenConfirmCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} [response] MsgConnectionOpenConfirmResponse
                     */

                    /**
                     * Calls ConnectionOpenConfirm.
                     * @function connectionOpenConfirm
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} request MsgConnectionOpenConfirm message or plain object
                     * @param {ibc.core.connection.v1.Msg.ConnectionOpenConfirmCallback} callback Node-style callback called with the error, if any, and MsgConnectionOpenConfirmResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.connectionOpenConfirm = function connectionOpenConfirm(request, callback) {
                        return this.rpcCall(connectionOpenConfirm, $root.ibc.core.connection.v1.MsgConnectionOpenConfirm, $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse, request, callback);
                    }, "name", { value: "ConnectionOpenConfirm" });

                    /**
                     * Calls ConnectionOpenConfirm.
                     * @function connectionOpenConfirm
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} request MsgConnectionOpenConfirm message or plain object
                     * @returns {Promise<ibc.core.connection.v1.MsgConnectionOpenConfirmResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1.MsgConnectionOpenInit = (function() {

                    /**
                     * Properties of a MsgConnectionOpenInit.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenInit
                     * @property {string|null} [client_id] MsgConnectionOpenInit client_id
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] MsgConnectionOpenInit counterparty
                     * @property {ibc.core.connection.v1.IVersion|null} [version] MsgConnectionOpenInit version
                     * @property {Long|null} [delay_period] MsgConnectionOpenInit delay_period
                     * @property {string|null} [signer] MsgConnectionOpenInit signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenInit.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenInit.
                     * @implements IMsgConnectionOpenInit
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit=} [properties] Properties to set
                     */
                    function MsgConnectionOpenInit(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgConnectionOpenInit client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.client_id = "";

                    /**
                     * MsgConnectionOpenInit counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.counterparty = null;

                    /**
                     * MsgConnectionOpenInit version.
                     * @member {ibc.core.connection.v1.IVersion|null|undefined} version
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.version = null;

                    /**
                     * MsgConnectionOpenInit delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.delay_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * MsgConnectionOpenInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenInit message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} message MsgConnectionOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInit.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            $root.ibc.core.connection.v1.Version.encode(message.version, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.delay_period != null && Object.hasOwnProperty.call(message, "delay_period"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.delay_period);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenInit message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInit.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} message MsgConnectionOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInit.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInit} MsgConnectionOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInit.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenInit();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.version = $root.ibc.core.connection.v1.Version.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.delay_period = reader.uint64();
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenInit message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInit} MsgConnectionOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInit.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenInit message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenInit.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.connection.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.version != null && message.hasOwnProperty("version")) {
                            let error = $root.ibc.core.connection.v1.Version.verify(message.version);
                            if (error)
                                return "version." + error;
                        }
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (!$util.isInteger(message.delay_period) && !(message.delay_period && $util.isInteger(message.delay_period.low) && $util.isInteger(message.delay_period.high)))
                                return "delay_period: integer|Long expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenInit message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInit} MsgConnectionOpenInit
                     */
                    MsgConnectionOpenInit.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenInit)
                            return object;
                        let message = new $root.ibc.core.connection.v1.MsgConnectionOpenInit();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenInit.counterparty: object expected");
                            message.counterparty = $root.ibc.core.connection.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.version != null) {
                            if (typeof object.version !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenInit.version: object expected");
                            message.version = $root.ibc.core.connection.v1.Version.fromObject(object.version);
                        }
                        if (object.delay_period != null)
                            if ($util.Long)
                                (message.delay_period = $util.Long.fromValue(object.delay_period)).unsigned = true;
                            else if (typeof object.delay_period === "string")
                                message.delay_period = parseInt(object.delay_period, 10);
                            else if (typeof object.delay_period === "number")
                                message.delay_period = object.delay_period;
                            else if (typeof object.delay_period === "object")
                                message.delay_period = new $util.LongBits(object.delay_period.low >>> 0, object.delay_period.high >>> 0).toNumber(true);
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenInit message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenInit} message MsgConnectionOpenInit
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenInit.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.counterparty = null;
                            object.version = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.delay_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.delay_period = options.longs === String ? "0" : 0;
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.connection.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = $root.ibc.core.connection.v1.Version.toObject(message.version, options);
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (typeof message.delay_period === "number")
                                object.delay_period = options.longs === String ? String(message.delay_period) : message.delay_period;
                            else
                                object.delay_period = options.longs === String ? $util.Long.prototype.toString.call(message.delay_period) : options.longs === Number ? new $util.LongBits(message.delay_period.low >>> 0, message.delay_period.high >>> 0).toNumber(true) : message.delay_period;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgConnectionOpenInit to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenInit.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenInit;
                })();

                v1.MsgConnectionOpenInitResponse = (function() {

                    /**
                     * Properties of a MsgConnectionOpenInitResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenInitResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenInitResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenInitResponse.
                     * @implements IMsgConnectionOpenInitResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInitResponse=} [properties] Properties to set
                     */
                    function MsgConnectionOpenInitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenInitResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInitResponse} message MsgConnectionOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenInitResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInitResponse} message MsgConnectionOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInitResponse} MsgConnectionOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenInitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInitResponse} MsgConnectionOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenInitResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenInitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenInitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInitResponse} MsgConnectionOpenInitResponse
                     */
                    MsgConnectionOpenInitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse)
                            return object;
                        return new $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse();
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenInitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenInitResponse} message MsgConnectionOpenInitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenInitResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgConnectionOpenInitResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenInitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenInitResponse;
                })();

                v1.MsgConnectionOpenTry = (function() {

                    /**
                     * Properties of a MsgConnectionOpenTry.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenTry
                     * @property {string|null} [client_id] MsgConnectionOpenTry client_id
                     * @property {string|null} [previous_connection_id] MsgConnectionOpenTry previous_connection_id
                     * @property {google.protobuf.IAny|null} [client_state] MsgConnectionOpenTry client_state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] MsgConnectionOpenTry counterparty
                     * @property {Long|null} [delay_period] MsgConnectionOpenTry delay_period
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [counterparty_versions] MsgConnectionOpenTry counterparty_versions
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenTry proof_height
                     * @property {Uint8Array|null} [proof_init] MsgConnectionOpenTry proof_init
                     * @property {Uint8Array|null} [proof_client] MsgConnectionOpenTry proof_client
                     * @property {Uint8Array|null} [proof_consensus] MsgConnectionOpenTry proof_consensus
                     * @property {ibc.core.client.v1.IHeight|null} [consensus_height] MsgConnectionOpenTry consensus_height
                     * @property {string|null} [signer] MsgConnectionOpenTry signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenTry.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenTry.
                     * @implements IMsgConnectionOpenTry
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry=} [properties] Properties to set
                     */
                    function MsgConnectionOpenTry(properties) {
                        this.counterparty_versions = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgConnectionOpenTry client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.client_id = "";

                    /**
                     * MsgConnectionOpenTry previous_connection_id.
                     * @member {string} previous_connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.previous_connection_id = "";

                    /**
                     * MsgConnectionOpenTry client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.client_state = null;

                    /**
                     * MsgConnectionOpenTry counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.counterparty = null;

                    /**
                     * MsgConnectionOpenTry delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.delay_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * MsgConnectionOpenTry counterparty_versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} counterparty_versions
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.counterparty_versions = $util.emptyArray;

                    /**
                     * MsgConnectionOpenTry proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenTry proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry proof_client.
                     * @member {Uint8Array} proof_client
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_client = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry proof_consensus.
                     * @member {Uint8Array} proof_consensus
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_consensus = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry consensus_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} consensus_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.consensus_height = null;

                    /**
                     * MsgConnectionOpenTry signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenTry message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTry.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} message MsgConnectionOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTry.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.previous_connection_id != null && Object.hasOwnProperty.call(message, "previous_connection_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.previous_connection_id);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.delay_period != null && Object.hasOwnProperty.call(message, "delay_period"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.delay_period);
                        if (message.counterparty_versions != null && message.counterparty_versions.length)
                            for (let i = 0; i < message.counterparty_versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(message.counterparty_versions[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.proof_init != null && Object.hasOwnProperty.call(message, "proof_init"))
                            writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.proof_init);
                        if (message.proof_client != null && Object.hasOwnProperty.call(message, "proof_client"))
                            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.proof_client);
                        if (message.proof_consensus != null && Object.hasOwnProperty.call(message, "proof_consensus"))
                            writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.proof_consensus);
                        if (message.consensus_height != null && Object.hasOwnProperty.call(message, "consensus_height"))
                            $root.ibc.core.client.v1.Height.encode(message.consensus_height, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenTry message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTry.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} message MsgConnectionOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTry.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenTry message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTry} MsgConnectionOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTry.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenTry();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.previous_connection_id = reader.string();
                                break;
                            case 3:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.delay_period = reader.uint64();
                                break;
                            case 6:
                                if (!(message.counterparty_versions && message.counterparty_versions.length))
                                    message.counterparty_versions = [];
                                message.counterparty_versions.push($root.ibc.core.connection.v1.Version.decode(reader, reader.uint32()));
                                break;
                            case 7:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.proof_init = reader.bytes();
                                break;
                            case 9:
                                message.proof_client = reader.bytes();
                                break;
                            case 10:
                                message.proof_consensus = reader.bytes();
                                break;
                            case 11:
                                message.consensus_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenTry message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTry} MsgConnectionOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTry.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenTry message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenTry.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.previous_connection_id != null && message.hasOwnProperty("previous_connection_id"))
                            if (!$util.isString(message.previous_connection_id))
                                return "previous_connection_id: string expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.connection.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (!$util.isInteger(message.delay_period) && !(message.delay_period && $util.isInteger(message.delay_period.low) && $util.isInteger(message.delay_period.high)))
                                return "delay_period: integer|Long expected";
                        if (message.counterparty_versions != null && message.hasOwnProperty("counterparty_versions")) {
                            if (!Array.isArray(message.counterparty_versions))
                                return "counterparty_versions: array expected";
                            for (let i = 0; i < message.counterparty_versions.length; ++i) {
                                let error = $root.ibc.core.connection.v1.Version.verify(message.counterparty_versions[i]);
                                if (error)
                                    return "counterparty_versions." + error;
                            }
                        }
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            if (!(message.proof_init && typeof message.proof_init.length === "number" || $util.isString(message.proof_init)))
                                return "proof_init: buffer expected";
                        if (message.proof_client != null && message.hasOwnProperty("proof_client"))
                            if (!(message.proof_client && typeof message.proof_client.length === "number" || $util.isString(message.proof_client)))
                                return "proof_client: buffer expected";
                        if (message.proof_consensus != null && message.hasOwnProperty("proof_consensus"))
                            if (!(message.proof_consensus && typeof message.proof_consensus.length === "number" || $util.isString(message.proof_consensus)))
                                return "proof_consensus: buffer expected";
                        if (message.consensus_height != null && message.hasOwnProperty("consensus_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.consensus_height);
                            if (error)
                                return "consensus_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenTry message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTry} MsgConnectionOpenTry
                     */
                    MsgConnectionOpenTry.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenTry)
                            return object;
                        let message = new $root.ibc.core.connection.v1.MsgConnectionOpenTry();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.previous_connection_id != null)
                            message.previous_connection_id = String(object.previous_connection_id);
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.counterparty: object expected");
                            message.counterparty = $root.ibc.core.connection.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.delay_period != null)
                            if ($util.Long)
                                (message.delay_period = $util.Long.fromValue(object.delay_period)).unsigned = true;
                            else if (typeof object.delay_period === "string")
                                message.delay_period = parseInt(object.delay_period, 10);
                            else if (typeof object.delay_period === "number")
                                message.delay_period = object.delay_period;
                            else if (typeof object.delay_period === "object")
                                message.delay_period = new $util.LongBits(object.delay_period.low >>> 0, object.delay_period.high >>> 0).toNumber(true);
                        if (object.counterparty_versions) {
                            if (!Array.isArray(object.counterparty_versions))
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions: array expected");
                            message.counterparty_versions = [];
                            for (let i = 0; i < object.counterparty_versions.length; ++i) {
                                if (typeof object.counterparty_versions[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions: object expected");
                                message.counterparty_versions[i] = $root.ibc.core.connection.v1.Version.fromObject(object.counterparty_versions[i]);
                            }
                        }
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.proof_init != null)
                            if (typeof object.proof_init === "string")
                                $util.base64.decode(object.proof_init, message.proof_init = $util.newBuffer($util.base64.length(object.proof_init)), 0);
                            else if (object.proof_init.length)
                                message.proof_init = object.proof_init;
                        if (object.proof_client != null)
                            if (typeof object.proof_client === "string")
                                $util.base64.decode(object.proof_client, message.proof_client = $util.newBuffer($util.base64.length(object.proof_client)), 0);
                            else if (object.proof_client.length)
                                message.proof_client = object.proof_client;
                        if (object.proof_consensus != null)
                            if (typeof object.proof_consensus === "string")
                                $util.base64.decode(object.proof_consensus, message.proof_consensus = $util.newBuffer($util.base64.length(object.proof_consensus)), 0);
                            else if (object.proof_consensus.length)
                                message.proof_consensus = object.proof_consensus;
                        if (object.consensus_height != null) {
                            if (typeof object.consensus_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.consensus_height: object expected");
                            message.consensus_height = $root.ibc.core.client.v1.Height.fromObject(object.consensus_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenTry message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenTry} message MsgConnectionOpenTry
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenTry.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.counterparty_versions = [];
                        if (options.defaults) {
                            object.client_id = "";
                            object.previous_connection_id = "";
                            object.client_state = null;
                            object.counterparty = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.delay_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.delay_period = options.longs === String ? "0" : 0;
                            object.proof_height = null;
                            if (options.bytes === String)
                                object.proof_init = "";
                            else {
                                object.proof_init = [];
                                if (options.bytes !== Array)
                                    object.proof_init = $util.newBuffer(object.proof_init);
                            }
                            if (options.bytes === String)
                                object.proof_client = "";
                            else {
                                object.proof_client = [];
                                if (options.bytes !== Array)
                                    object.proof_client = $util.newBuffer(object.proof_client);
                            }
                            if (options.bytes === String)
                                object.proof_consensus = "";
                            else {
                                object.proof_consensus = [];
                                if (options.bytes !== Array)
                                    object.proof_consensus = $util.newBuffer(object.proof_consensus);
                            }
                            object.consensus_height = null;
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.previous_connection_id != null && message.hasOwnProperty("previous_connection_id"))
                            object.previous_connection_id = message.previous_connection_id;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.connection.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (typeof message.delay_period === "number")
                                object.delay_period = options.longs === String ? String(message.delay_period) : message.delay_period;
                            else
                                object.delay_period = options.longs === String ? $util.Long.prototype.toString.call(message.delay_period) : options.longs === Number ? new $util.LongBits(message.delay_period.low >>> 0, message.delay_period.high >>> 0).toNumber(true) : message.delay_period;
                        if (message.counterparty_versions && message.counterparty_versions.length) {
                            object.counterparty_versions = [];
                            for (let j = 0; j < message.counterparty_versions.length; ++j)
                                object.counterparty_versions[j] = $root.ibc.core.connection.v1.Version.toObject(message.counterparty_versions[j], options);
                        }
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            object.proof_init = options.bytes === String ? $util.base64.encode(message.proof_init, 0, message.proof_init.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_init) : message.proof_init;
                        if (message.proof_client != null && message.hasOwnProperty("proof_client"))
                            object.proof_client = options.bytes === String ? $util.base64.encode(message.proof_client, 0, message.proof_client.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_client) : message.proof_client;
                        if (message.proof_consensus != null && message.hasOwnProperty("proof_consensus"))
                            object.proof_consensus = options.bytes === String ? $util.base64.encode(message.proof_consensus, 0, message.proof_consensus.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_consensus) : message.proof_consensus;
                        if (message.consensus_height != null && message.hasOwnProperty("consensus_height"))
                            object.consensus_height = $root.ibc.core.client.v1.Height.toObject(message.consensus_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgConnectionOpenTry to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenTry.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenTry;
                })();

                v1.MsgConnectionOpenTryResponse = (function() {

                    /**
                     * Properties of a MsgConnectionOpenTryResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenTryResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenTryResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenTryResponse.
                     * @implements IMsgConnectionOpenTryResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTryResponse=} [properties] Properties to set
                     */
                    function MsgConnectionOpenTryResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenTryResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTryResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTryResponse} message MsgConnectionOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTryResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenTryResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTryResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTryResponse} message MsgConnectionOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenTryResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTryResponse} MsgConnectionOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTryResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenTryResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTryResponse} MsgConnectionOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTryResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenTryResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenTryResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenTryResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTryResponse} MsgConnectionOpenTryResponse
                     */
                    MsgConnectionOpenTryResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse)
                            return object;
                        return new $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse();
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenTryResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenTryResponse} message MsgConnectionOpenTryResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenTryResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgConnectionOpenTryResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenTryResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenTryResponse;
                })();

                v1.MsgConnectionOpenAck = (function() {

                    /**
                     * Properties of a MsgConnectionOpenAck.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenAck
                     * @property {string|null} [connection_id] MsgConnectionOpenAck connection_id
                     * @property {string|null} [counterparty_connection_id] MsgConnectionOpenAck counterparty_connection_id
                     * @property {ibc.core.connection.v1.IVersion|null} [version] MsgConnectionOpenAck version
                     * @property {google.protobuf.IAny|null} [client_state] MsgConnectionOpenAck client_state
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenAck proof_height
                     * @property {Uint8Array|null} [proof_try] MsgConnectionOpenAck proof_try
                     * @property {Uint8Array|null} [proof_client] MsgConnectionOpenAck proof_client
                     * @property {Uint8Array|null} [proof_consensus] MsgConnectionOpenAck proof_consensus
                     * @property {ibc.core.client.v1.IHeight|null} [consensus_height] MsgConnectionOpenAck consensus_height
                     * @property {string|null} [signer] MsgConnectionOpenAck signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenAck.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenAck.
                     * @implements IMsgConnectionOpenAck
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck=} [properties] Properties to set
                     */
                    function MsgConnectionOpenAck(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgConnectionOpenAck connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.connection_id = "";

                    /**
                     * MsgConnectionOpenAck counterparty_connection_id.
                     * @member {string} counterparty_connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.counterparty_connection_id = "";

                    /**
                     * MsgConnectionOpenAck version.
                     * @member {ibc.core.connection.v1.IVersion|null|undefined} version
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.version = null;

                    /**
                     * MsgConnectionOpenAck client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.client_state = null;

                    /**
                     * MsgConnectionOpenAck proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenAck proof_try.
                     * @member {Uint8Array} proof_try
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_try = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck proof_client.
                     * @member {Uint8Array} proof_client
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_client = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck proof_consensus.
                     * @member {Uint8Array} proof_consensus
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_consensus = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck consensus_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} consensus_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.consensus_height = null;

                    /**
                     * MsgConnectionOpenAck signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenAck message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAck.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} message MsgConnectionOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAck.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        if (message.counterparty_connection_id != null && Object.hasOwnProperty.call(message, "counterparty_connection_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.counterparty_connection_id);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            $root.ibc.core.connection.v1.Version.encode(message.version, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.proof_try != null && Object.hasOwnProperty.call(message, "proof_try"))
                            writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.proof_try);
                        if (message.proof_client != null && Object.hasOwnProperty.call(message, "proof_client"))
                            writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.proof_client);
                        if (message.proof_consensus != null && Object.hasOwnProperty.call(message, "proof_consensus"))
                            writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.proof_consensus);
                        if (message.consensus_height != null && Object.hasOwnProperty.call(message, "consensus_height"))
                            $root.ibc.core.client.v1.Height.encode(message.consensus_height, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenAck message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAck.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} message MsgConnectionOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAck.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenAck message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAck} MsgConnectionOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAck.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenAck();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            case 2:
                                message.counterparty_connection_id = reader.string();
                                break;
                            case 3:
                                message.version = $root.ibc.core.connection.v1.Version.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.proof_try = reader.bytes();
                                break;
                            case 7:
                                message.proof_client = reader.bytes();
                                break;
                            case 8:
                                message.proof_consensus = reader.bytes();
                                break;
                            case 9:
                                message.consensus_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenAck message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAck} MsgConnectionOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAck.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenAck message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenAck.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.counterparty_connection_id != null && message.hasOwnProperty("counterparty_connection_id"))
                            if (!$util.isString(message.counterparty_connection_id))
                                return "counterparty_connection_id: string expected";
                        if (message.version != null && message.hasOwnProperty("version")) {
                            let error = $root.ibc.core.connection.v1.Version.verify(message.version);
                            if (error)
                                return "version." + error;
                        }
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.proof_try != null && message.hasOwnProperty("proof_try"))
                            if (!(message.proof_try && typeof message.proof_try.length === "number" || $util.isString(message.proof_try)))
                                return "proof_try: buffer expected";
                        if (message.proof_client != null && message.hasOwnProperty("proof_client"))
                            if (!(message.proof_client && typeof message.proof_client.length === "number" || $util.isString(message.proof_client)))
                                return "proof_client: buffer expected";
                        if (message.proof_consensus != null && message.hasOwnProperty("proof_consensus"))
                            if (!(message.proof_consensus && typeof message.proof_consensus.length === "number" || $util.isString(message.proof_consensus)))
                                return "proof_consensus: buffer expected";
                        if (message.consensus_height != null && message.hasOwnProperty("consensus_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.consensus_height);
                            if (error)
                                return "consensus_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenAck message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAck} MsgConnectionOpenAck
                     */
                    MsgConnectionOpenAck.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenAck)
                            return object;
                        let message = new $root.ibc.core.connection.v1.MsgConnectionOpenAck();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.counterparty_connection_id != null)
                            message.counterparty_connection_id = String(object.counterparty_connection_id);
                        if (object.version != null) {
                            if (typeof object.version !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenAck.version: object expected");
                            message.version = $root.ibc.core.connection.v1.Version.fromObject(object.version);
                        }
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenAck.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenAck.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.proof_try != null)
                            if (typeof object.proof_try === "string")
                                $util.base64.decode(object.proof_try, message.proof_try = $util.newBuffer($util.base64.length(object.proof_try)), 0);
                            else if (object.proof_try.length)
                                message.proof_try = object.proof_try;
                        if (object.proof_client != null)
                            if (typeof object.proof_client === "string")
                                $util.base64.decode(object.proof_client, message.proof_client = $util.newBuffer($util.base64.length(object.proof_client)), 0);
                            else if (object.proof_client.length)
                                message.proof_client = object.proof_client;
                        if (object.proof_consensus != null)
                            if (typeof object.proof_consensus === "string")
                                $util.base64.decode(object.proof_consensus, message.proof_consensus = $util.newBuffer($util.base64.length(object.proof_consensus)), 0);
                            else if (object.proof_consensus.length)
                                message.proof_consensus = object.proof_consensus;
                        if (object.consensus_height != null) {
                            if (typeof object.consensus_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenAck.consensus_height: object expected");
                            message.consensus_height = $root.ibc.core.client.v1.Height.fromObject(object.consensus_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenAck message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenAck} message MsgConnectionOpenAck
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenAck.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection_id = "";
                            object.counterparty_connection_id = "";
                            object.version = null;
                            object.client_state = null;
                            object.proof_height = null;
                            if (options.bytes === String)
                                object.proof_try = "";
                            else {
                                object.proof_try = [];
                                if (options.bytes !== Array)
                                    object.proof_try = $util.newBuffer(object.proof_try);
                            }
                            if (options.bytes === String)
                                object.proof_client = "";
                            else {
                                object.proof_client = [];
                                if (options.bytes !== Array)
                                    object.proof_client = $util.newBuffer(object.proof_client);
                            }
                            if (options.bytes === String)
                                object.proof_consensus = "";
                            else {
                                object.proof_consensus = [];
                                if (options.bytes !== Array)
                                    object.proof_consensus = $util.newBuffer(object.proof_consensus);
                            }
                            object.consensus_height = null;
                            object.signer = "";
                        }
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.counterparty_connection_id != null && message.hasOwnProperty("counterparty_connection_id"))
                            object.counterparty_connection_id = message.counterparty_connection_id;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = $root.ibc.core.connection.v1.Version.toObject(message.version, options);
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.proof_try != null && message.hasOwnProperty("proof_try"))
                            object.proof_try = options.bytes === String ? $util.base64.encode(message.proof_try, 0, message.proof_try.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_try) : message.proof_try;
                        if (message.proof_client != null && message.hasOwnProperty("proof_client"))
                            object.proof_client = options.bytes === String ? $util.base64.encode(message.proof_client, 0, message.proof_client.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_client) : message.proof_client;
                        if (message.proof_consensus != null && message.hasOwnProperty("proof_consensus"))
                            object.proof_consensus = options.bytes === String ? $util.base64.encode(message.proof_consensus, 0, message.proof_consensus.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_consensus) : message.proof_consensus;
                        if (message.consensus_height != null && message.hasOwnProperty("consensus_height"))
                            object.consensus_height = $root.ibc.core.client.v1.Height.toObject(message.consensus_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgConnectionOpenAck to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenAck.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenAck;
                })();

                v1.MsgConnectionOpenAckResponse = (function() {

                    /**
                     * Properties of a MsgConnectionOpenAckResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenAckResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenAckResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenAckResponse.
                     * @implements IMsgConnectionOpenAckResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAckResponse=} [properties] Properties to set
                     */
                    function MsgConnectionOpenAckResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenAckResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAckResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAckResponse} message MsgConnectionOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAckResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenAckResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAckResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAckResponse} message MsgConnectionOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAckResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenAckResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAckResponse} MsgConnectionOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAckResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenAckResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAckResponse} MsgConnectionOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAckResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenAckResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenAckResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenAckResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAckResponse} MsgConnectionOpenAckResponse
                     */
                    MsgConnectionOpenAckResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse)
                            return object;
                        return new $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse();
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenAckResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenAckResponse} message MsgConnectionOpenAckResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenAckResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgConnectionOpenAckResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenAckResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenAckResponse;
                })();

                v1.MsgConnectionOpenConfirm = (function() {

                    /**
                     * Properties of a MsgConnectionOpenConfirm.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenConfirm
                     * @property {string|null} [connection_id] MsgConnectionOpenConfirm connection_id
                     * @property {Uint8Array|null} [proof_ack] MsgConnectionOpenConfirm proof_ack
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenConfirm proof_height
                     * @property {string|null} [signer] MsgConnectionOpenConfirm signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenConfirm.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenConfirm.
                     * @implements IMsgConnectionOpenConfirm
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm=} [properties] Properties to set
                     */
                    function MsgConnectionOpenConfirm(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgConnectionOpenConfirm connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.connection_id = "";

                    /**
                     * MsgConnectionOpenConfirm proof_ack.
                     * @member {Uint8Array} proof_ack
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.proof_ack = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenConfirm message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} message MsgConnectionOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirm.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        if (message.proof_ack != null && Object.hasOwnProperty.call(message, "proof_ack"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof_ack);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenConfirm message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirm.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} message MsgConnectionOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirm.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirm} MsgConnectionOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirm.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenConfirm();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            case 2:
                                message.proof_ack = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirm message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirm} MsgConnectionOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirm.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenConfirm message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenConfirm.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.proof_ack != null && message.hasOwnProperty("proof_ack"))
                            if (!(message.proof_ack && typeof message.proof_ack.length === "number" || $util.isString(message.proof_ack)))
                                return "proof_ack: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenConfirm message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirm} MsgConnectionOpenConfirm
                     */
                    MsgConnectionOpenConfirm.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenConfirm)
                            return object;
                        let message = new $root.ibc.core.connection.v1.MsgConnectionOpenConfirm();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.proof_ack != null)
                            if (typeof object.proof_ack === "string")
                                $util.base64.decode(object.proof_ack, message.proof_ack = $util.newBuffer($util.base64.length(object.proof_ack)), 0);
                            else if (object.proof_ack.length)
                                message.proof_ack = object.proof_ack;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenConfirm message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenConfirm} message MsgConnectionOpenConfirm
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenConfirm.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection_id = "";
                            if (options.bytes === String)
                                object.proof_ack = "";
                            else {
                                object.proof_ack = [];
                                if (options.bytes !== Array)
                                    object.proof_ack = $util.newBuffer(object.proof_ack);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.proof_ack != null && message.hasOwnProperty("proof_ack"))
                            object.proof_ack = options.bytes === String ? $util.base64.encode(message.proof_ack, 0, message.proof_ack.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_ack) : message.proof_ack;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgConnectionOpenConfirm to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenConfirm.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenConfirm;
                })();

                v1.MsgConnectionOpenConfirmResponse = (function() {

                    /**
                     * Properties of a MsgConnectionOpenConfirmResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenConfirmResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenConfirmResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenConfirmResponse.
                     * @implements IMsgConnectionOpenConfirmResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirmResponse=} [properties] Properties to set
                     */
                    function MsgConnectionOpenConfirmResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenConfirmResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirmResponse} message MsgConnectionOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirmResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenConfirmResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirmResponse} message MsgConnectionOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} MsgConnectionOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirmResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirmResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} MsgConnectionOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenConfirmResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenConfirmResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenConfirmResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} MsgConnectionOpenConfirmResponse
                     */
                    MsgConnectionOpenConfirmResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse)
                            return object;
                        return new $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse();
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenConfirmResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} message MsgConnectionOpenConfirmResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenConfirmResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgConnectionOpenConfirmResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenConfirmResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenConfirmResponse;
                })();

                v1.ConnectionEnd = (function() {

                    /**
                     * Properties of a ConnectionEnd.
                     * @memberof ibc.core.connection.v1
                     * @interface IConnectionEnd
                     * @property {string|null} [client_id] ConnectionEnd client_id
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [versions] ConnectionEnd versions
                     * @property {ibc.core.connection.v1.State|null} [state] ConnectionEnd state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] ConnectionEnd counterparty
                     * @property {Long|null} [delay_period] ConnectionEnd delay_period
                     */

                    /**
                     * Constructs a new ConnectionEnd.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ConnectionEnd.
                     * @implements IConnectionEnd
                     * @constructor
                     * @param {ibc.core.connection.v1.IConnectionEnd=} [properties] Properties to set
                     */
                    function ConnectionEnd(properties) {
                        this.versions = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConnectionEnd client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.client_id = "";

                    /**
                     * ConnectionEnd versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} versions
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.versions = $util.emptyArray;

                    /**
                     * ConnectionEnd state.
                     * @member {ibc.core.connection.v1.State} state
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.state = 0;

                    /**
                     * ConnectionEnd counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.counterparty = null;

                    /**
                     * ConnectionEnd delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.delay_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified ConnectionEnd message. Does not implicitly {@link ibc.core.connection.v1.ConnectionEnd.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionEnd} message ConnectionEnd message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionEnd.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.versions != null && message.versions.length)
                            for (let i = 0; i < message.versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(message.versions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.delay_period != null && Object.hasOwnProperty.call(message, "delay_period"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.delay_period);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConnectionEnd message, length delimited. Does not implicitly {@link ibc.core.connection.v1.ConnectionEnd.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionEnd} message ConnectionEnd message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionEnd.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConnectionEnd message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ConnectionEnd} ConnectionEnd
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionEnd.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.ConnectionEnd();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                if (!(message.versions && message.versions.length))
                                    message.versions = [];
                                message.versions.push($root.ibc.core.connection.v1.Version.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.state = reader.int32();
                                break;
                            case 4:
                                message.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.delay_period = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConnectionEnd message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.ConnectionEnd} ConnectionEnd
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionEnd.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConnectionEnd message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectionEnd.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.versions != null && message.hasOwnProperty("versions")) {
                            if (!Array.isArray(message.versions))
                                return "versions: array expected";
                            for (let i = 0; i < message.versions.length; ++i) {
                                let error = $root.ibc.core.connection.v1.Version.verify(message.versions[i]);
                                if (error)
                                    return "versions." + error;
                            }
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.connection.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (!$util.isInteger(message.delay_period) && !(message.delay_period && $util.isInteger(message.delay_period.low) && $util.isInteger(message.delay_period.high)))
                                return "delay_period: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a ConnectionEnd message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.ConnectionEnd} ConnectionEnd
                     */
                    ConnectionEnd.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.ConnectionEnd)
                            return object;
                        let message = new $root.ibc.core.connection.v1.ConnectionEnd();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.versions) {
                            if (!Array.isArray(object.versions))
                                throw TypeError(".ibc.core.connection.v1.ConnectionEnd.versions: array expected");
                            message.versions = [];
                            for (let i = 0; i < object.versions.length; ++i) {
                                if (typeof object.versions[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.ConnectionEnd.versions: object expected");
                                message.versions[i] = $root.ibc.core.connection.v1.Version.fromObject(object.versions[i]);
                            }
                        }
                        switch (object.state) {
                        case "STATE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "STATE_INIT":
                        case 1:
                            message.state = 1;
                            break;
                        case "STATE_TRYOPEN":
                        case 2:
                            message.state = 2;
                            break;
                        case "STATE_OPEN":
                        case 3:
                            message.state = 3;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.connection.v1.ConnectionEnd.counterparty: object expected");
                            message.counterparty = $root.ibc.core.connection.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.delay_period != null)
                            if ($util.Long)
                                (message.delay_period = $util.Long.fromValue(object.delay_period)).unsigned = true;
                            else if (typeof object.delay_period === "string")
                                message.delay_period = parseInt(object.delay_period, 10);
                            else if (typeof object.delay_period === "number")
                                message.delay_period = object.delay_period;
                            else if (typeof object.delay_period === "object")
                                message.delay_period = new $util.LongBits(object.delay_period.low >>> 0, object.delay_period.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConnectionEnd message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {ibc.core.connection.v1.ConnectionEnd} message ConnectionEnd
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectionEnd.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.versions = [];
                        if (options.defaults) {
                            object.client_id = "";
                            object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.delay_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.delay_period = options.longs === String ? "0" : 0;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.versions && message.versions.length) {
                            object.versions = [];
                            for (let j = 0; j < message.versions.length; ++j)
                                object.versions[j] = $root.ibc.core.connection.v1.Version.toObject(message.versions[j], options);
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.ibc.core.connection.v1.State[message.state] : message.state;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.connection.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (typeof message.delay_period === "number")
                                object.delay_period = options.longs === String ? String(message.delay_period) : message.delay_period;
                            else
                                object.delay_period = options.longs === String ? $util.Long.prototype.toString.call(message.delay_period) : options.longs === Number ? new $util.LongBits(message.delay_period.low >>> 0, message.delay_period.high >>> 0).toNumber(true) : message.delay_period;
                        return object;
                    };

                    /**
                     * Converts this ConnectionEnd to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectionEnd.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConnectionEnd;
                })();

                v1.IdentifiedConnection = (function() {

                    /**
                     * Properties of an IdentifiedConnection.
                     * @memberof ibc.core.connection.v1
                     * @interface IIdentifiedConnection
                     * @property {string|null} [id] IdentifiedConnection id
                     * @property {string|null} [client_id] IdentifiedConnection client_id
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [versions] IdentifiedConnection versions
                     * @property {ibc.core.connection.v1.State|null} [state] IdentifiedConnection state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] IdentifiedConnection counterparty
                     * @property {Long|null} [delay_period] IdentifiedConnection delay_period
                     */

                    /**
                     * Constructs a new IdentifiedConnection.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents an IdentifiedConnection.
                     * @implements IIdentifiedConnection
                     * @constructor
                     * @param {ibc.core.connection.v1.IIdentifiedConnection=} [properties] Properties to set
                     */
                    function IdentifiedConnection(properties) {
                        this.versions = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IdentifiedConnection id.
                     * @member {string} id
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.id = "";

                    /**
                     * IdentifiedConnection client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.client_id = "";

                    /**
                     * IdentifiedConnection versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} versions
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.versions = $util.emptyArray;

                    /**
                     * IdentifiedConnection state.
                     * @member {ibc.core.connection.v1.State} state
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.state = 0;

                    /**
                     * IdentifiedConnection counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.counterparty = null;

                    /**
                     * IdentifiedConnection delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.delay_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified IdentifiedConnection message. Does not implicitly {@link ibc.core.connection.v1.IdentifiedConnection.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {ibc.core.connection.v1.IIdentifiedConnection} message IdentifiedConnection message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedConnection.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.client_id);
                        if (message.versions != null && message.versions.length)
                            for (let i = 0; i < message.versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(message.versions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.state);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.delay_period != null && Object.hasOwnProperty.call(message, "delay_period"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.delay_period);
                        return writer;
                    };

                    /**
                     * Encodes the specified IdentifiedConnection message, length delimited. Does not implicitly {@link ibc.core.connection.v1.IdentifiedConnection.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {ibc.core.connection.v1.IIdentifiedConnection} message IdentifiedConnection message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedConnection.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IdentifiedConnection message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.IdentifiedConnection} IdentifiedConnection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedConnection.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.IdentifiedConnection();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.client_id = reader.string();
                                break;
                            case 3:
                                if (!(message.versions && message.versions.length))
                                    message.versions = [];
                                message.versions.push($root.ibc.core.connection.v1.Version.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                message.state = reader.int32();
                                break;
                            case 5:
                                message.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.delay_period = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IdentifiedConnection message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.IdentifiedConnection} IdentifiedConnection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedConnection.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IdentifiedConnection message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IdentifiedConnection.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.versions != null && message.hasOwnProperty("versions")) {
                            if (!Array.isArray(message.versions))
                                return "versions: array expected";
                            for (let i = 0; i < message.versions.length; ++i) {
                                let error = $root.ibc.core.connection.v1.Version.verify(message.versions[i]);
                                if (error)
                                    return "versions." + error;
                            }
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.connection.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (!$util.isInteger(message.delay_period) && !(message.delay_period && $util.isInteger(message.delay_period.low) && $util.isInteger(message.delay_period.high)))
                                return "delay_period: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates an IdentifiedConnection message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.IdentifiedConnection} IdentifiedConnection
                     */
                    IdentifiedConnection.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.IdentifiedConnection)
                            return object;
                        let message = new $root.ibc.core.connection.v1.IdentifiedConnection();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.versions) {
                            if (!Array.isArray(object.versions))
                                throw TypeError(".ibc.core.connection.v1.IdentifiedConnection.versions: array expected");
                            message.versions = [];
                            for (let i = 0; i < object.versions.length; ++i) {
                                if (typeof object.versions[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.IdentifiedConnection.versions: object expected");
                                message.versions[i] = $root.ibc.core.connection.v1.Version.fromObject(object.versions[i]);
                            }
                        }
                        switch (object.state) {
                        case "STATE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "STATE_INIT":
                        case 1:
                            message.state = 1;
                            break;
                        case "STATE_TRYOPEN":
                        case 2:
                            message.state = 2;
                            break;
                        case "STATE_OPEN":
                        case 3:
                            message.state = 3;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.connection.v1.IdentifiedConnection.counterparty: object expected");
                            message.counterparty = $root.ibc.core.connection.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.delay_period != null)
                            if ($util.Long)
                                (message.delay_period = $util.Long.fromValue(object.delay_period)).unsigned = true;
                            else if (typeof object.delay_period === "string")
                                message.delay_period = parseInt(object.delay_period, 10);
                            else if (typeof object.delay_period === "number")
                                message.delay_period = object.delay_period;
                            else if (typeof object.delay_period === "object")
                                message.delay_period = new $util.LongBits(object.delay_period.low >>> 0, object.delay_period.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from an IdentifiedConnection message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {ibc.core.connection.v1.IdentifiedConnection} message IdentifiedConnection
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IdentifiedConnection.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.versions = [];
                        if (options.defaults) {
                            object.id = "";
                            object.client_id = "";
                            object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.delay_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.delay_period = options.longs === String ? "0" : 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.versions && message.versions.length) {
                            object.versions = [];
                            for (let j = 0; j < message.versions.length; ++j)
                                object.versions[j] = $root.ibc.core.connection.v1.Version.toObject(message.versions[j], options);
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.ibc.core.connection.v1.State[message.state] : message.state;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.connection.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (typeof message.delay_period === "number")
                                object.delay_period = options.longs === String ? String(message.delay_period) : message.delay_period;
                            else
                                object.delay_period = options.longs === String ? $util.Long.prototype.toString.call(message.delay_period) : options.longs === Number ? new $util.LongBits(message.delay_period.low >>> 0, message.delay_period.high >>> 0).toNumber(true) : message.delay_period;
                        return object;
                    };

                    /**
                     * Converts this IdentifiedConnection to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IdentifiedConnection.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IdentifiedConnection;
                })();

                /**
                 * State enum.
                 * @name ibc.core.connection.v1.State
                 * @enum {number}
                 * @property {number} STATE_UNINITIALIZED_UNSPECIFIED=0 STATE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} STATE_INIT=1 STATE_INIT value
                 * @property {number} STATE_TRYOPEN=2 STATE_TRYOPEN value
                 * @property {number} STATE_OPEN=3 STATE_OPEN value
                 */
                v1.State = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STATE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "STATE_INIT"] = 1;
                    values[valuesById[2] = "STATE_TRYOPEN"] = 2;
                    values[valuesById[3] = "STATE_OPEN"] = 3;
                    return values;
                })();

                v1.Counterparty = (function() {

                    /**
                     * Properties of a Counterparty.
                     * @memberof ibc.core.connection.v1
                     * @interface ICounterparty
                     * @property {string|null} [client_id] Counterparty client_id
                     * @property {string|null} [connection_id] Counterparty connection_id
                     * @property {ibc.core.commitment.v1.IMerklePrefix|null} [prefix] Counterparty prefix
                     */

                    /**
                     * Constructs a new Counterparty.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Counterparty.
                     * @implements ICounterparty
                     * @constructor
                     * @param {ibc.core.connection.v1.ICounterparty=} [properties] Properties to set
                     */
                    function Counterparty(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Counterparty client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.client_id = "";

                    /**
                     * Counterparty connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.connection_id = "";

                    /**
                     * Counterparty prefix.
                     * @member {ibc.core.commitment.v1.IMerklePrefix|null|undefined} prefix
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.prefix = null;

                    /**
                     * Encodes the specified Counterparty message. Does not implicitly {@link ibc.core.connection.v1.Counterparty.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {ibc.core.connection.v1.ICounterparty} message Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.connection_id);
                        if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
                            $root.ibc.core.commitment.v1.MerklePrefix.encode(message.prefix, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Counterparty message, length delimited. Does not implicitly {@link ibc.core.connection.v1.Counterparty.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {ibc.core.connection.v1.ICounterparty} message Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.Counterparty();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.connection_id = reader.string();
                                break;
                            case 3:
                                message.prefix = $root.ibc.core.commitment.v1.MerklePrefix.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Counterparty message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Counterparty.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.prefix != null && message.hasOwnProperty("prefix")) {
                            let error = $root.ibc.core.commitment.v1.MerklePrefix.verify(message.prefix);
                            if (error)
                                return "prefix." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Counterparty message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.Counterparty} Counterparty
                     */
                    Counterparty.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.Counterparty)
                            return object;
                        let message = new $root.ibc.core.connection.v1.Counterparty();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.prefix != null) {
                            if (typeof object.prefix !== "object")
                                throw TypeError(".ibc.core.connection.v1.Counterparty.prefix: object expected");
                            message.prefix = $root.ibc.core.commitment.v1.MerklePrefix.fromObject(object.prefix);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Counterparty message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {ibc.core.connection.v1.Counterparty} message Counterparty
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Counterparty.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.connection_id = "";
                            object.prefix = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.prefix != null && message.hasOwnProperty("prefix"))
                            object.prefix = $root.ibc.core.commitment.v1.MerklePrefix.toObject(message.prefix, options);
                        return object;
                    };

                    /**
                     * Converts this Counterparty to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Counterparty.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Counterparty;
                })();

                v1.ClientPaths = (function() {

                    /**
                     * Properties of a ClientPaths.
                     * @memberof ibc.core.connection.v1
                     * @interface IClientPaths
                     * @property {Array.<string>|null} [paths] ClientPaths paths
                     */

                    /**
                     * Constructs a new ClientPaths.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ClientPaths.
                     * @implements IClientPaths
                     * @constructor
                     * @param {ibc.core.connection.v1.IClientPaths=} [properties] Properties to set
                     */
                    function ClientPaths(properties) {
                        this.paths = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientPaths paths.
                     * @member {Array.<string>} paths
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @instance
                     */
                    ClientPaths.prototype.paths = $util.emptyArray;

                    /**
                     * Encodes the specified ClientPaths message. Does not implicitly {@link ibc.core.connection.v1.ClientPaths.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {ibc.core.connection.v1.IClientPaths} message ClientPaths message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientPaths.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.paths != null && message.paths.length)
                            for (let i = 0; i < message.paths.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientPaths message, length delimited. Does not implicitly {@link ibc.core.connection.v1.ClientPaths.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {ibc.core.connection.v1.IClientPaths} message ClientPaths message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientPaths.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientPaths message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ClientPaths} ClientPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientPaths.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.ClientPaths();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.paths && message.paths.length))
                                    message.paths = [];
                                message.paths.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientPaths message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.ClientPaths} ClientPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientPaths.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientPaths message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientPaths.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.paths != null && message.hasOwnProperty("paths")) {
                            if (!Array.isArray(message.paths))
                                return "paths: array expected";
                            for (let i = 0; i < message.paths.length; ++i)
                                if (!$util.isString(message.paths[i]))
                                    return "paths: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientPaths message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.ClientPaths} ClientPaths
                     */
                    ClientPaths.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.ClientPaths)
                            return object;
                        let message = new $root.ibc.core.connection.v1.ClientPaths();
                        if (object.paths) {
                            if (!Array.isArray(object.paths))
                                throw TypeError(".ibc.core.connection.v1.ClientPaths.paths: array expected");
                            message.paths = [];
                            for (let i = 0; i < object.paths.length; ++i)
                                message.paths[i] = String(object.paths[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientPaths message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {ibc.core.connection.v1.ClientPaths} message ClientPaths
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientPaths.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.paths = [];
                        if (message.paths && message.paths.length) {
                            object.paths = [];
                            for (let j = 0; j < message.paths.length; ++j)
                                object.paths[j] = message.paths[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this ClientPaths to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientPaths.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientPaths;
                })();

                v1.ConnectionPaths = (function() {

                    /**
                     * Properties of a ConnectionPaths.
                     * @memberof ibc.core.connection.v1
                     * @interface IConnectionPaths
                     * @property {string|null} [client_id] ConnectionPaths client_id
                     * @property {Array.<string>|null} [paths] ConnectionPaths paths
                     */

                    /**
                     * Constructs a new ConnectionPaths.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ConnectionPaths.
                     * @implements IConnectionPaths
                     * @constructor
                     * @param {ibc.core.connection.v1.IConnectionPaths=} [properties] Properties to set
                     */
                    function ConnectionPaths(properties) {
                        this.paths = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConnectionPaths client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @instance
                     */
                    ConnectionPaths.prototype.client_id = "";

                    /**
                     * ConnectionPaths paths.
                     * @member {Array.<string>} paths
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @instance
                     */
                    ConnectionPaths.prototype.paths = $util.emptyArray;

                    /**
                     * Encodes the specified ConnectionPaths message. Does not implicitly {@link ibc.core.connection.v1.ConnectionPaths.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionPaths} message ConnectionPaths message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionPaths.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.paths != null && message.paths.length)
                            for (let i = 0; i < message.paths.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.paths[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConnectionPaths message, length delimited. Does not implicitly {@link ibc.core.connection.v1.ConnectionPaths.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionPaths} message ConnectionPaths message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionPaths.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConnectionPaths message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ConnectionPaths} ConnectionPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionPaths.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.ConnectionPaths();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                if (!(message.paths && message.paths.length))
                                    message.paths = [];
                                message.paths.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConnectionPaths message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.ConnectionPaths} ConnectionPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionPaths.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConnectionPaths message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectionPaths.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.paths != null && message.hasOwnProperty("paths")) {
                            if (!Array.isArray(message.paths))
                                return "paths: array expected";
                            for (let i = 0; i < message.paths.length; ++i)
                                if (!$util.isString(message.paths[i]))
                                    return "paths: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a ConnectionPaths message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.ConnectionPaths} ConnectionPaths
                     */
                    ConnectionPaths.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.ConnectionPaths)
                            return object;
                        let message = new $root.ibc.core.connection.v1.ConnectionPaths();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.paths) {
                            if (!Array.isArray(object.paths))
                                throw TypeError(".ibc.core.connection.v1.ConnectionPaths.paths: array expected");
                            message.paths = [];
                            for (let i = 0; i < object.paths.length; ++i)
                                message.paths[i] = String(object.paths[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConnectionPaths message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {ibc.core.connection.v1.ConnectionPaths} message ConnectionPaths
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectionPaths.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.paths = [];
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.paths && message.paths.length) {
                            object.paths = [];
                            for (let j = 0; j < message.paths.length; ++j)
                                object.paths[j] = message.paths[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this ConnectionPaths to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectionPaths.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConnectionPaths;
                })();

                v1.Version = (function() {

                    /**
                     * Properties of a Version.
                     * @memberof ibc.core.connection.v1
                     * @interface IVersion
                     * @property {string|null} [identifier] Version identifier
                     * @property {Array.<string>|null} [features] Version features
                     */

                    /**
                     * Constructs a new Version.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Version.
                     * @implements IVersion
                     * @constructor
                     * @param {ibc.core.connection.v1.IVersion=} [properties] Properties to set
                     */
                    function Version(properties) {
                        this.features = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Version identifier.
                     * @member {string} identifier
                     * @memberof ibc.core.connection.v1.Version
                     * @instance
                     */
                    Version.prototype.identifier = "";

                    /**
                     * Version features.
                     * @member {Array.<string>} features
                     * @memberof ibc.core.connection.v1.Version
                     * @instance
                     */
                    Version.prototype.features = $util.emptyArray;

                    /**
                     * Encodes the specified Version message. Does not implicitly {@link ibc.core.connection.v1.Version.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {ibc.core.connection.v1.IVersion} message Version message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Version.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identifier != null && Object.hasOwnProperty.call(message, "identifier"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);
                        if (message.features != null && message.features.length)
                            for (let i = 0; i < message.features.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.features[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified Version message, length delimited. Does not implicitly {@link ibc.core.connection.v1.Version.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {ibc.core.connection.v1.IVersion} message Version message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Version.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Version message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.Version} Version
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Version.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.Version();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.identifier = reader.string();
                                break;
                            case 2:
                                if (!(message.features && message.features.length))
                                    message.features = [];
                                message.features.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Version message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.Version} Version
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Version.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Version message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Version.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            if (!$util.isString(message.identifier))
                                return "identifier: string expected";
                        if (message.features != null && message.hasOwnProperty("features")) {
                            if (!Array.isArray(message.features))
                                return "features: array expected";
                            for (let i = 0; i < message.features.length; ++i)
                                if (!$util.isString(message.features[i]))
                                    return "features: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a Version message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.Version} Version
                     */
                    Version.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.Version)
                            return object;
                        let message = new $root.ibc.core.connection.v1.Version();
                        if (object.identifier != null)
                            message.identifier = String(object.identifier);
                        if (object.features) {
                            if (!Array.isArray(object.features))
                                throw TypeError(".ibc.core.connection.v1.Version.features: array expected");
                            message.features = [];
                            for (let i = 0; i < object.features.length; ++i)
                                message.features[i] = String(object.features[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Version message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {ibc.core.connection.v1.Version} message Version
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Version.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.features = [];
                        if (options.defaults)
                            object.identifier = "";
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            object.identifier = message.identifier;
                        if (message.features && message.features.length) {
                            object.features = [];
                            for (let j = 0; j < message.features.length; ++j)
                                object.features[j] = message.features[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this Version to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.Version
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Version.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Version;
                })();

                v1.Params = (function() {

                    /**
                     * Properties of a Params.
                     * @memberof ibc.core.connection.v1
                     * @interface IParams
                     * @property {Long|null} [max_expected_time_per_block] Params max_expected_time_per_block
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {ibc.core.connection.v1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Params max_expected_time_per_block.
                     * @member {Long} max_expected_time_per_block
                     * @memberof ibc.core.connection.v1.Params
                     * @instance
                     */
                    Params.prototype.max_expected_time_per_block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link ibc.core.connection.v1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {ibc.core.connection.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.max_expected_time_per_block != null && Object.hasOwnProperty.call(message, "max_expected_time_per_block"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.max_expected_time_per_block);
                        return writer;
                    };

                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link ibc.core.connection.v1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {ibc.core.connection.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.Params();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.max_expected_time_per_block = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.max_expected_time_per_block != null && message.hasOwnProperty("max_expected_time_per_block"))
                            if (!$util.isInteger(message.max_expected_time_per_block) && !(message.max_expected_time_per_block && $util.isInteger(message.max_expected_time_per_block.low) && $util.isInteger(message.max_expected_time_per_block.high)))
                                return "max_expected_time_per_block: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.Params)
                            return object;
                        let message = new $root.ibc.core.connection.v1.Params();
                        if (object.max_expected_time_per_block != null)
                            if ($util.Long)
                                (message.max_expected_time_per_block = $util.Long.fromValue(object.max_expected_time_per_block)).unsigned = true;
                            else if (typeof object.max_expected_time_per_block === "string")
                                message.max_expected_time_per_block = parseInt(object.max_expected_time_per_block, 10);
                            else if (typeof object.max_expected_time_per_block === "number")
                                message.max_expected_time_per_block = object.max_expected_time_per_block;
                            else if (typeof object.max_expected_time_per_block === "object")
                                message.max_expected_time_per_block = new $util.LongBits(object.max_expected_time_per_block.low >>> 0, object.max_expected_time_per_block.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {ibc.core.connection.v1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.max_expected_time_per_block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.max_expected_time_per_block = options.longs === String ? "0" : 0;
                        if (message.max_expected_time_per_block != null && message.hasOwnProperty("max_expected_time_per_block"))
                            if (typeof message.max_expected_time_per_block === "number")
                                object.max_expected_time_per_block = options.longs === String ? String(message.max_expected_time_per_block) : message.max_expected_time_per_block;
                            else
                                object.max_expected_time_per_block = options.longs === String ? $util.Long.prototype.toString.call(message.max_expected_time_per_block) : options.longs === Number ? new $util.LongBits(message.max_expected_time_per_block.low >>> 0, message.max_expected_time_per_block.high >>> 0).toNumber(true) : message.max_expected_time_per_block;
                        return object;
                    };

                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Params;
                })();

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#connection}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ConnectionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryConnectionResponse} [response] QueryConnectionResponse
                     */

                    /**
                     * Calls Connection.
                     * @function connection
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} request QueryConnectionRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ConnectionCallback} callback Node-style callback called with the error, if any, and QueryConnectionResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connection = function connection(request, callback) {
                        return this.rpcCall(connection, $root.ibc.core.connection.v1.QueryConnectionRequest, $root.ibc.core.connection.v1.QueryConnectionResponse, request, callback);
                    }, "name", { value: "Connection" });

                    /**
                     * Calls Connection.
                     * @function connection
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} request QueryConnectionRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryConnectionResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#connections}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ConnectionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryConnectionsResponse} [response] QueryConnectionsResponse
                     */

                    /**
                     * Calls Connections.
                     * @function connections
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} request QueryConnectionsRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ConnectionsCallback} callback Node-style callback called with the error, if any, and QueryConnectionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connections = function connections(request, callback) {
                        return this.rpcCall(connections, $root.ibc.core.connection.v1.QueryConnectionsRequest, $root.ibc.core.connection.v1.QueryConnectionsResponse, request, callback);
                    }, "name", { value: "Connections" });

                    /**
                     * Calls Connections.
                     * @function connections
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} request QueryConnectionsRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryConnectionsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#clientConnections}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ClientConnectionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryClientConnectionsResponse} [response] QueryClientConnectionsResponse
                     */

                    /**
                     * Calls ClientConnections.
                     * @function clientConnections
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} request QueryClientConnectionsRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ClientConnectionsCallback} callback Node-style callback called with the error, if any, and QueryClientConnectionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientConnections = function clientConnections(request, callback) {
                        return this.rpcCall(clientConnections, $root.ibc.core.connection.v1.QueryClientConnectionsRequest, $root.ibc.core.connection.v1.QueryClientConnectionsResponse, request, callback);
                    }, "name", { value: "ClientConnections" });

                    /**
                     * Calls ClientConnections.
                     * @function clientConnections
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} request QueryClientConnectionsRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryClientConnectionsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#connectionClientState}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ConnectionClientStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryConnectionClientStateResponse} [response] QueryConnectionClientStateResponse
                     */

                    /**
                     * Calls ConnectionClientState.
                     * @function connectionClientState
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} request QueryConnectionClientStateRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ConnectionClientStateCallback} callback Node-style callback called with the error, if any, and QueryConnectionClientStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connectionClientState = function connectionClientState(request, callback) {
                        return this.rpcCall(connectionClientState, $root.ibc.core.connection.v1.QueryConnectionClientStateRequest, $root.ibc.core.connection.v1.QueryConnectionClientStateResponse, request, callback);
                    }, "name", { value: "ConnectionClientState" });

                    /**
                     * Calls ConnectionClientState.
                     * @function connectionClientState
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} request QueryConnectionClientStateRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryConnectionClientStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#connectionConsensusState}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ConnectionConsensusStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} [response] QueryConnectionConsensusStateResponse
                     */

                    /**
                     * Calls ConnectionConsensusState.
                     * @function connectionConsensusState
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} request QueryConnectionConsensusStateRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ConnectionConsensusStateCallback} callback Node-style callback called with the error, if any, and QueryConnectionConsensusStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connectionConsensusState = function connectionConsensusState(request, callback) {
                        return this.rpcCall(connectionConsensusState, $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest, $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse, request, callback);
                    }, "name", { value: "ConnectionConsensusState" });

                    /**
                     * Calls ConnectionConsensusState.
                     * @function connectionConsensusState
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} request QueryConnectionConsensusStateRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryConnectionConsensusStateResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryConnectionRequest = (function() {

                    /**
                     * Properties of a QueryConnectionRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionRequest
                     * @property {string|null} [connection_id] QueryConnectionRequest connection_id
                     */

                    /**
                     * Constructs a new QueryConnectionRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionRequest.
                     * @implements IQueryConnectionRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest=} [properties] Properties to set
                     */
                    function QueryConnectionRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @instance
                     */
                    QueryConnectionRequest.prototype.connection_id = "";

                    /**
                     * Encodes the specified QueryConnectionRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} message QueryConnectionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} message QueryConnectionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionRequest} QueryConnectionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionRequest} QueryConnectionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionRequest} QueryConnectionRequest
                     */
                    QueryConnectionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionRequest();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionRequest} message QueryConnectionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.connection_id = "";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionRequest;
                })();

                v1.QueryConnectionResponse = (function() {

                    /**
                     * Properties of a QueryConnectionResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionResponse
                     * @property {ibc.core.connection.v1.IConnectionEnd|null} [connection] QueryConnectionResponse connection
                     * @property {Uint8Array|null} [proof] QueryConnectionResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionResponse.
                     * @implements IQueryConnectionResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionResponse=} [properties] Properties to set
                     */
                    function QueryConnectionResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionResponse connection.
                     * @member {ibc.core.connection.v1.IConnectionEnd|null|undefined} connection
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.connection = null;

                    /**
                     * QueryConnectionResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionResponse} message QueryConnectionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection != null && Object.hasOwnProperty.call(message, "connection"))
                            $root.ibc.core.connection.v1.ConnectionEnd.encode(message.connection, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionResponse} message QueryConnectionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionResponse} QueryConnectionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection = $root.ibc.core.connection.v1.ConnectionEnd.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionResponse} QueryConnectionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection != null && message.hasOwnProperty("connection")) {
                            let error = $root.ibc.core.connection.v1.ConnectionEnd.verify(message.connection);
                            if (error)
                                return "connection." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionResponse} QueryConnectionResponse
                     */
                    QueryConnectionResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionResponse();
                        if (object.connection != null) {
                            if (typeof object.connection !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionResponse.connection: object expected");
                            message.connection = $root.ibc.core.connection.v1.ConnectionEnd.fromObject(object.connection);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionResponse} message QueryConnectionResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            object.connection = $root.ibc.core.connection.v1.ConnectionEnd.toObject(message.connection, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionResponse;
                })();

                v1.QueryConnectionsRequest = (function() {

                    /**
                     * Properties of a QueryConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionsRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConnectionsRequest pagination
                     */

                    /**
                     * Constructs a new QueryConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionsRequest.
                     * @implements IQueryConnectionsRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest=} [properties] Properties to set
                     */
                    function QueryConnectionsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @instance
                     */
                    QueryConnectionsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConnectionsRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} message QueryConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionsRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} message QueryConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionsRequest} QueryConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionsRequest} QueryConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionsRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionsRequest} QueryConnectionsRequest
                     */
                    QueryConnectionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionsRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionsRequest();
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionsRequest} message QueryConnectionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.pagination = null;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionsRequest;
                })();

                v1.QueryConnectionsResponse = (function() {

                    /**
                     * Properties of a QueryConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionsResponse
                     * @property {Array.<ibc.core.connection.v1.IIdentifiedConnection>|null} [connections] QueryConnectionsResponse connections
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConnectionsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryConnectionsResponse height
                     */

                    /**
                     * Constructs a new QueryConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionsResponse.
                     * @implements IQueryConnectionsResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionsResponse=} [properties] Properties to set
                     */
                    function QueryConnectionsResponse(properties) {
                        this.connections = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionsResponse connections.
                     * @member {Array.<ibc.core.connection.v1.IIdentifiedConnection>} connections
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.connections = $util.emptyArray;

                    /**
                     * QueryConnectionsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.pagination = null;

                    /**
                     * QueryConnectionsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryConnectionsResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsResponse} message QueryConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connections != null && message.connections.length)
                            for (let i = 0; i < message.connections.length; ++i)
                                $root.ibc.core.connection.v1.IdentifiedConnection.encode(message.connections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionsResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsResponse} message QueryConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionsResponse} QueryConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.connections && message.connections.length))
                                    message.connections = [];
                                message.connections.push($root.ibc.core.connection.v1.IdentifiedConnection.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionsResponse} QueryConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionsResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connections != null && message.hasOwnProperty("connections")) {
                            if (!Array.isArray(message.connections))
                                return "connections: array expected";
                            for (let i = 0; i < message.connections.length; ++i) {
                                let error = $root.ibc.core.connection.v1.IdentifiedConnection.verify(message.connections[i]);
                                if (error)
                                    return "connections." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionsResponse} QueryConnectionsResponse
                     */
                    QueryConnectionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionsResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionsResponse();
                        if (object.connections) {
                            if (!Array.isArray(object.connections))
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionsResponse.connections: array expected");
                            message.connections = [];
                            for (let i = 0; i < object.connections.length; ++i) {
                                if (typeof object.connections[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.QueryConnectionsResponse.connections: object expected");
                                message.connections[i] = $root.ibc.core.connection.v1.IdentifiedConnection.fromObject(object.connections[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionsResponse} message QueryConnectionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.connections = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.connections && message.connections.length) {
                            object.connections = [];
                            for (let j = 0; j < message.connections.length; ++j)
                                object.connections[j] = $root.ibc.core.connection.v1.IdentifiedConnection.toObject(message.connections[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionsResponse;
                })();

                v1.QueryClientConnectionsRequest = (function() {

                    /**
                     * Properties of a QueryClientConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryClientConnectionsRequest
                     * @property {string|null} [client_id] QueryClientConnectionsRequest client_id
                     */

                    /**
                     * Constructs a new QueryClientConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryClientConnectionsRequest.
                     * @implements IQueryClientConnectionsRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest=} [properties] Properties to set
                     */
                    function QueryClientConnectionsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientConnectionsRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @instance
                     */
                    QueryClientConnectionsRequest.prototype.client_id = "";

                    /**
                     * Encodes the specified QueryClientConnectionsRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} message QueryClientConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientConnectionsRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} message QueryClientConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientConnectionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsRequest} QueryClientConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryClientConnectionsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientConnectionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsRequest} QueryClientConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientConnectionsRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientConnectionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientConnectionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsRequest} QueryClientConnectionsRequest
                     */
                    QueryClientConnectionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryClientConnectionsRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryClientConnectionsRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientConnectionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryClientConnectionsRequest} message QueryClientConnectionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientConnectionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        return object;
                    };

                    /**
                     * Converts this QueryClientConnectionsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientConnectionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientConnectionsRequest;
                })();

                v1.QueryClientConnectionsResponse = (function() {

                    /**
                     * Properties of a QueryClientConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryClientConnectionsResponse
                     * @property {Array.<string>|null} [connection_paths] QueryClientConnectionsResponse connection_paths
                     * @property {Uint8Array|null} [proof] QueryClientConnectionsResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryClientConnectionsResponse proof_height
                     */

                    /**
                     * Constructs a new QueryClientConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryClientConnectionsResponse.
                     * @implements IQueryClientConnectionsResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsResponse=} [properties] Properties to set
                     */
                    function QueryClientConnectionsResponse(properties) {
                        this.connection_paths = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientConnectionsResponse connection_paths.
                     * @member {Array.<string>} connection_paths
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.connection_paths = $util.emptyArray;

                    /**
                     * QueryClientConnectionsResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryClientConnectionsResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryClientConnectionsResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsResponse} message QueryClientConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_paths != null && message.connection_paths.length)
                            for (let i = 0; i < message.connection_paths.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_paths[i]);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientConnectionsResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsResponse} message QueryClientConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientConnectionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsResponse} QueryClientConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryClientConnectionsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.connection_paths && message.connection_paths.length))
                                    message.connection_paths = [];
                                message.connection_paths.push(reader.string());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientConnectionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsResponse} QueryClientConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientConnectionsResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientConnectionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_paths != null && message.hasOwnProperty("connection_paths")) {
                            if (!Array.isArray(message.connection_paths))
                                return "connection_paths: array expected";
                            for (let i = 0; i < message.connection_paths.length; ++i)
                                if (!$util.isString(message.connection_paths[i]))
                                    return "connection_paths: string[] expected";
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientConnectionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsResponse} QueryClientConnectionsResponse
                     */
                    QueryClientConnectionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryClientConnectionsResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryClientConnectionsResponse();
                        if (object.connection_paths) {
                            if (!Array.isArray(object.connection_paths))
                                throw TypeError(".ibc.core.connection.v1.QueryClientConnectionsResponse.connection_paths: array expected");
                            message.connection_paths = [];
                            for (let i = 0; i < object.connection_paths.length; ++i)
                                message.connection_paths[i] = String(object.connection_paths[i]);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryClientConnectionsResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientConnectionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryClientConnectionsResponse} message QueryClientConnectionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientConnectionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.connection_paths = [];
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.connection_paths && message.connection_paths.length) {
                            object.connection_paths = [];
                            for (let j = 0; j < message.connection_paths.length; ++j)
                                object.connection_paths[j] = message.connection_paths[j];
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientConnectionsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientConnectionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientConnectionsResponse;
                })();

                v1.QueryConnectionClientStateRequest = (function() {

                    /**
                     * Properties of a QueryConnectionClientStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionClientStateRequest
                     * @property {string|null} [connection_id] QueryConnectionClientStateRequest connection_id
                     */

                    /**
                     * Constructs a new QueryConnectionClientStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionClientStateRequest.
                     * @implements IQueryConnectionClientStateRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest=} [properties] Properties to set
                     */
                    function QueryConnectionClientStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionClientStateRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @instance
                     */
                    QueryConnectionClientStateRequest.prototype.connection_id = "";

                    /**
                     * Encodes the specified QueryConnectionClientStateRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} message QueryConnectionClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionClientStateRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} message QueryConnectionClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateRequest} QueryConnectionClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionClientStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionClientStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateRequest} QueryConnectionClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionClientStateRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionClientStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionClientStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateRequest} QueryConnectionClientStateRequest
                     */
                    QueryConnectionClientStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionClientStateRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionClientStateRequest();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionClientStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionClientStateRequest} message QueryConnectionClientStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionClientStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.connection_id = "";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionClientStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionClientStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionClientStateRequest;
                })();

                v1.QueryConnectionClientStateResponse = (function() {

                    /**
                     * Properties of a QueryConnectionClientStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionClientStateResponse
                     * @property {ibc.core.client.v1.IIdentifiedClientState|null} [identified_client_state] QueryConnectionClientStateResponse identified_client_state
                     * @property {Uint8Array|null} [proof] QueryConnectionClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionClientStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionClientStateResponse.
                     * @implements IQueryConnectionClientStateResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateResponse=} [properties] Properties to set
                     */
                    function QueryConnectionClientStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionClientStateResponse identified_client_state.
                     * @member {ibc.core.client.v1.IIdentifiedClientState|null|undefined} identified_client_state
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.identified_client_state = null;

                    /**
                     * QueryConnectionClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionClientStateResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateResponse} message QueryConnectionClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identified_client_state != null && Object.hasOwnProperty.call(message, "identified_client_state"))
                            $root.ibc.core.client.v1.IdentifiedClientState.encode(message.identified_client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionClientStateResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateResponse} message QueryConnectionClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateResponse} QueryConnectionClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionClientStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionClientStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateResponse} QueryConnectionClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionClientStateResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionClientStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identified_client_state != null && message.hasOwnProperty("identified_client_state")) {
                            let error = $root.ibc.core.client.v1.IdentifiedClientState.verify(message.identified_client_state);
                            if (error)
                                return "identified_client_state." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionClientStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateResponse} QueryConnectionClientStateResponse
                     */
                    QueryConnectionClientStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionClientStateResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionClientStateResponse();
                        if (object.identified_client_state != null) {
                            if (typeof object.identified_client_state !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionClientStateResponse.identified_client_state: object expected");
                            message.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.fromObject(object.identified_client_state);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionClientStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionClientStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionClientStateResponse} message QueryConnectionClientStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionClientStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.identified_client_state = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.identified_client_state != null && message.hasOwnProperty("identified_client_state"))
                            object.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.toObject(message.identified_client_state, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionClientStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionClientStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionClientStateResponse;
                })();

                v1.QueryConnectionConsensusStateRequest = (function() {

                    /**
                     * Properties of a QueryConnectionConsensusStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionConsensusStateRequest
                     * @property {string|null} [connection_id] QueryConnectionConsensusStateRequest connection_id
                     * @property {Long|null} [revision_number] QueryConnectionConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryConnectionConsensusStateRequest revision_height
                     */

                    /**
                     * Constructs a new QueryConnectionConsensusStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionConsensusStateRequest.
                     * @implements IQueryConnectionConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest=} [properties] Properties to set
                     */
                    function QueryConnectionConsensusStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionConsensusStateRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.connection_id = "";

                    /**
                     * QueryConnectionConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryConnectionConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryConnectionConsensusStateRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} message QueryConnectionConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.revision_number);
                        if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.revision_height);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionConsensusStateRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} message QueryConnectionConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} QueryConnectionConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            case 2:
                                message.revision_number = reader.uint64();
                                break;
                            case 3:
                                message.revision_height = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} QueryConnectionConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionConsensusStateRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionConsensusStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                return "revision_number: integer|Long expected";
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                return "revision_height: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionConsensusStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} QueryConnectionConsensusStateRequest
                     */
                    QueryConnectionConsensusStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.revision_number != null)
                            if ($util.Long)
                                (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                            else if (typeof object.revision_number === "string")
                                message.revision_number = parseInt(object.revision_number, 10);
                            else if (typeof object.revision_number === "number")
                                message.revision_number = object.revision_number;
                            else if (typeof object.revision_number === "object")
                                message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                        if (object.revision_height != null)
                            if ($util.Long)
                                (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                            else if (typeof object.revision_height === "string")
                                message.revision_height = parseInt(object.revision_height, 10);
                            else if (typeof object.revision_height === "number")
                                message.revision_height = object.revision_height;
                            else if (typeof object.revision_height === "object")
                                message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionConsensusStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} message QueryConnectionConsensusStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionConsensusStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_number = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_height = options.longs === String ? "0" : 0;
                        }
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (typeof message.revision_number === "number")
                                object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                            else
                                object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (typeof message.revision_height === "number")
                                object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                            else
                                object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionConsensusStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionConsensusStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionConsensusStateRequest;
                })();

                v1.QueryConnectionConsensusStateResponse = (function() {

                    /**
                     * Properties of a QueryConnectionConsensusStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryConnectionConsensusStateResponse consensus_state
                     * @property {string|null} [client_id] QueryConnectionConsensusStateResponse client_id
                     * @property {Uint8Array|null} [proof] QueryConnectionConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionConsensusStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionConsensusStateResponse.
                     * @implements IQueryConnectionConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateResponse=} [properties] Properties to set
                     */
                    function QueryConnectionConsensusStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryConnectionConsensusStateResponse client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.client_id = "";

                    /**
                     * QueryConnectionConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionConsensusStateResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateResponse} message QueryConnectionConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.client_id);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionConsensusStateResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateResponse} message QueryConnectionConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} QueryConnectionConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.client_id = reader.string();
                                break;
                            case 3:
                                message.proof = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} QueryConnectionConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionConsensusStateResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionConsensusStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionConsensusStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} QueryConnectionConsensusStateResponse
                     */
                    QueryConnectionConsensusStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse();
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionConsensusStateResponse.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionConsensusStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionConsensusStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} message QueryConnectionConsensusStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionConsensusStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.consensus_state = null;
                            object.client_id = "";
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionConsensusStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionConsensusStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionConsensusStateResponse;
                })();

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.connection.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.connection.v1.IIdentifiedConnection>|null} [connections] GenesisState connections
                     * @property {Array.<ibc.core.connection.v1.IConnectionPaths>|null} [client_connection_paths] GenesisState client_connection_paths
                     * @property {Long|null} [next_connection_sequence] GenesisState next_connection_sequence
                     * @property {ibc.core.connection.v1.IParams|null} [params] GenesisState params
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.connection.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.connections = [];
                        this.client_connection_paths = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState connections.
                     * @member {Array.<ibc.core.connection.v1.IIdentifiedConnection>} connections
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.connections = $util.emptyArray;

                    /**
                     * GenesisState client_connection_paths.
                     * @member {Array.<ibc.core.connection.v1.IConnectionPaths>} client_connection_paths
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.client_connection_paths = $util.emptyArray;

                    /**
                     * GenesisState next_connection_sequence.
                     * @member {Long} next_connection_sequence
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_connection_sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * GenesisState params.
                     * @member {ibc.core.connection.v1.IParams|null|undefined} params
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.connection.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {ibc.core.connection.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connections != null && message.connections.length)
                            for (let i = 0; i < message.connections.length; ++i)
                                $root.ibc.core.connection.v1.IdentifiedConnection.encode(message.connections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.client_connection_paths != null && message.client_connection_paths.length)
                            for (let i = 0; i < message.client_connection_paths.length; ++i)
                                $root.ibc.core.connection.v1.ConnectionPaths.encode(message.client_connection_paths[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.next_connection_sequence != null && Object.hasOwnProperty.call(message, "next_connection_sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.next_connection_sequence);
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.core.connection.v1.Params.encode(message.params, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.core.connection.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {ibc.core.connection.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.connections && message.connections.length))
                                    message.connections = [];
                                message.connections.push($root.ibc.core.connection.v1.IdentifiedConnection.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.client_connection_paths && message.client_connection_paths.length))
                                    message.client_connection_paths = [];
                                message.client_connection_paths.push($root.ibc.core.connection.v1.ConnectionPaths.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.next_connection_sequence = reader.uint64();
                                break;
                            case 4:
                                message.params = $root.ibc.core.connection.v1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connections != null && message.hasOwnProperty("connections")) {
                            if (!Array.isArray(message.connections))
                                return "connections: array expected";
                            for (let i = 0; i < message.connections.length; ++i) {
                                let error = $root.ibc.core.connection.v1.IdentifiedConnection.verify(message.connections[i]);
                                if (error)
                                    return "connections." + error;
                            }
                        }
                        if (message.client_connection_paths != null && message.hasOwnProperty("client_connection_paths")) {
                            if (!Array.isArray(message.client_connection_paths))
                                return "client_connection_paths: array expected";
                            for (let i = 0; i < message.client_connection_paths.length; ++i) {
                                let error = $root.ibc.core.connection.v1.ConnectionPaths.verify(message.client_connection_paths[i]);
                                if (error)
                                    return "client_connection_paths." + error;
                            }
                        }
                        if (message.next_connection_sequence != null && message.hasOwnProperty("next_connection_sequence"))
                            if (!$util.isInteger(message.next_connection_sequence) && !(message.next_connection_sequence && $util.isInteger(message.next_connection_sequence.low) && $util.isInteger(message.next_connection_sequence.high)))
                                return "next_connection_sequence: integer|Long expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.core.connection.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.core.connection.v1.GenesisState();
                        if (object.connections) {
                            if (!Array.isArray(object.connections))
                                throw TypeError(".ibc.core.connection.v1.GenesisState.connections: array expected");
                            message.connections = [];
                            for (let i = 0; i < object.connections.length; ++i) {
                                if (typeof object.connections[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.GenesisState.connections: object expected");
                                message.connections[i] = $root.ibc.core.connection.v1.IdentifiedConnection.fromObject(object.connections[i]);
                            }
                        }
                        if (object.client_connection_paths) {
                            if (!Array.isArray(object.client_connection_paths))
                                throw TypeError(".ibc.core.connection.v1.GenesisState.client_connection_paths: array expected");
                            message.client_connection_paths = [];
                            for (let i = 0; i < object.client_connection_paths.length; ++i) {
                                if (typeof object.client_connection_paths[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.GenesisState.client_connection_paths: object expected");
                                message.client_connection_paths[i] = $root.ibc.core.connection.v1.ConnectionPaths.fromObject(object.client_connection_paths[i]);
                            }
                        }
                        if (object.next_connection_sequence != null)
                            if ($util.Long)
                                (message.next_connection_sequence = $util.Long.fromValue(object.next_connection_sequence)).unsigned = true;
                            else if (typeof object.next_connection_sequence === "string")
                                message.next_connection_sequence = parseInt(object.next_connection_sequence, 10);
                            else if (typeof object.next_connection_sequence === "number")
                                message.next_connection_sequence = object.next_connection_sequence;
                            else if (typeof object.next_connection_sequence === "object")
                                message.next_connection_sequence = new $util.LongBits(object.next_connection_sequence.low >>> 0, object.next_connection_sequence.high >>> 0).toNumber(true);
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.core.connection.v1.GenesisState.params: object expected");
                            message.params = $root.ibc.core.connection.v1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {ibc.core.connection.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.connections = [];
                            object.client_connection_paths = [];
                        }
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_connection_sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_connection_sequence = options.longs === String ? "0" : 0;
                            object.params = null;
                        }
                        if (message.connections && message.connections.length) {
                            object.connections = [];
                            for (let j = 0; j < message.connections.length; ++j)
                                object.connections[j] = $root.ibc.core.connection.v1.IdentifiedConnection.toObject(message.connections[j], options);
                        }
                        if (message.client_connection_paths && message.client_connection_paths.length) {
                            object.client_connection_paths = [];
                            for (let j = 0; j < message.client_connection_paths.length; ++j)
                                object.client_connection_paths[j] = $root.ibc.core.connection.v1.ConnectionPaths.toObject(message.client_connection_paths[j], options);
                        }
                        if (message.next_connection_sequence != null && message.hasOwnProperty("next_connection_sequence"))
                            if (typeof message.next_connection_sequence === "number")
                                object.next_connection_sequence = options.longs === String ? String(message.next_connection_sequence) : message.next_connection_sequence;
                            else
                                object.next_connection_sequence = options.longs === String ? $util.Long.prototype.toString.call(message.next_connection_sequence) : options.longs === Number ? new $util.LongBits(message.next_connection_sequence.low >>> 0, message.next_connection_sequence.high >>> 0).toNumber(true) : message.next_connection_sequence;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.core.connection.v1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                return v1;
            })();

            return connection;
        })();

        core.port = (function() {

            /**
             * Namespace port.
             * @memberof ibc.core
             * @namespace
             */
            const port = {};

            port.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.port
                 * @namespace
                 */
                const v1 = {};

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.core.port.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.core.port.v1.Query#appVersion}.
                     * @memberof ibc.core.port.v1.Query
                     * @typedef AppVersionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.port.v1.QueryAppVersionResponse} [response] QueryAppVersionResponse
                     */

                    /**
                     * Calls AppVersion.
                     * @function appVersion
                     * @memberof ibc.core.port.v1.Query
                     * @instance
                     * @param {ibc.core.port.v1.IQueryAppVersionRequest} request QueryAppVersionRequest message or plain object
                     * @param {ibc.core.port.v1.Query.AppVersionCallback} callback Node-style callback called with the error, if any, and QueryAppVersionResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.appVersion = function appVersion(request, callback) {
                        return this.rpcCall(appVersion, $root.ibc.core.port.v1.QueryAppVersionRequest, $root.ibc.core.port.v1.QueryAppVersionResponse, request, callback);
                    }, "name", { value: "AppVersion" });

                    /**
                     * Calls AppVersion.
                     * @function appVersion
                     * @memberof ibc.core.port.v1.Query
                     * @instance
                     * @param {ibc.core.port.v1.IQueryAppVersionRequest} request QueryAppVersionRequest message or plain object
                     * @returns {Promise<ibc.core.port.v1.QueryAppVersionResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryAppVersionRequest = (function() {

                    /**
                     * Properties of a QueryAppVersionRequest.
                     * @memberof ibc.core.port.v1
                     * @interface IQueryAppVersionRequest
                     * @property {string|null} [port_id] QueryAppVersionRequest port_id
                     * @property {string|null} [connection_id] QueryAppVersionRequest connection_id
                     * @property {ibc.core.channel.v1.Order|null} [ordering] QueryAppVersionRequest ordering
                     * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] QueryAppVersionRequest counterparty
                     * @property {string|null} [proposed_version] QueryAppVersionRequest proposed_version
                     */

                    /**
                     * Constructs a new QueryAppVersionRequest.
                     * @memberof ibc.core.port.v1
                     * @classdesc Represents a QueryAppVersionRequest.
                     * @implements IQueryAppVersionRequest
                     * @constructor
                     * @param {ibc.core.port.v1.IQueryAppVersionRequest=} [properties] Properties to set
                     */
                    function QueryAppVersionRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryAppVersionRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @instance
                     */
                    QueryAppVersionRequest.prototype.port_id = "";

                    /**
                     * QueryAppVersionRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @instance
                     */
                    QueryAppVersionRequest.prototype.connection_id = "";

                    /**
                     * QueryAppVersionRequest ordering.
                     * @member {ibc.core.channel.v1.Order} ordering
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @instance
                     */
                    QueryAppVersionRequest.prototype.ordering = 0;

                    /**
                     * QueryAppVersionRequest counterparty.
                     * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @instance
                     */
                    QueryAppVersionRequest.prototype.counterparty = null;

                    /**
                     * QueryAppVersionRequest proposed_version.
                     * @member {string} proposed_version
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @instance
                     */
                    QueryAppVersionRequest.prototype.proposed_version = "";

                    /**
                     * Encodes the specified QueryAppVersionRequest message. Does not implicitly {@link ibc.core.port.v1.QueryAppVersionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @static
                     * @param {ibc.core.port.v1.IQueryAppVersionRequest} message QueryAppVersionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryAppVersionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.connection_id);
                        if (message.ordering != null && Object.hasOwnProperty.call(message, "ordering"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.ordering);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.channel.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.proposed_version != null && Object.hasOwnProperty.call(message, "proposed_version"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.proposed_version);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryAppVersionRequest message, length delimited. Does not implicitly {@link ibc.core.port.v1.QueryAppVersionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @static
                     * @param {ibc.core.port.v1.IQueryAppVersionRequest} message QueryAppVersionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryAppVersionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryAppVersionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.port.v1.QueryAppVersionRequest} QueryAppVersionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryAppVersionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.port.v1.QueryAppVersionRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.connection_id = reader.string();
                                break;
                            case 3:
                                message.ordering = reader.int32();
                                break;
                            case 4:
                                message.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.proposed_version = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryAppVersionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.port.v1.QueryAppVersionRequest} QueryAppVersionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryAppVersionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryAppVersionRequest message.
                     * @function verify
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryAppVersionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            switch (message.ordering) {
                            default:
                                return "ordering: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.channel.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.proposed_version != null && message.hasOwnProperty("proposed_version"))
                            if (!$util.isString(message.proposed_version))
                                return "proposed_version: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryAppVersionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.port.v1.QueryAppVersionRequest} QueryAppVersionRequest
                     */
                    QueryAppVersionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.port.v1.QueryAppVersionRequest)
                            return object;
                        let message = new $root.ibc.core.port.v1.QueryAppVersionRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        switch (object.ordering) {
                        case "ORDER_NONE_UNSPECIFIED":
                        case 0:
                            message.ordering = 0;
                            break;
                        case "ORDER_UNORDERED":
                        case 1:
                            message.ordering = 1;
                            break;
                        case "ORDER_ORDERED":
                        case 2:
                            message.ordering = 2;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.port.v1.QueryAppVersionRequest.counterparty: object expected");
                            message.counterparty = $root.ibc.core.channel.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.proposed_version != null)
                            message.proposed_version = String(object.proposed_version);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryAppVersionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @static
                     * @param {ibc.core.port.v1.QueryAppVersionRequest} message QueryAppVersionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryAppVersionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.connection_id = "";
                            object.ordering = options.enums === String ? "ORDER_NONE_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            object.proposed_version = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            object.ordering = options.enums === String ? $root.ibc.core.channel.v1.Order[message.ordering] : message.ordering;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.channel.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.proposed_version != null && message.hasOwnProperty("proposed_version"))
                            object.proposed_version = message.proposed_version;
                        return object;
                    };

                    /**
                     * Converts this QueryAppVersionRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.port.v1.QueryAppVersionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryAppVersionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryAppVersionRequest;
                })();

                v1.QueryAppVersionResponse = (function() {

                    /**
                     * Properties of a QueryAppVersionResponse.
                     * @memberof ibc.core.port.v1
                     * @interface IQueryAppVersionResponse
                     * @property {string|null} [port_id] QueryAppVersionResponse port_id
                     * @property {string|null} [version] QueryAppVersionResponse version
                     */

                    /**
                     * Constructs a new QueryAppVersionResponse.
                     * @memberof ibc.core.port.v1
                     * @classdesc Represents a QueryAppVersionResponse.
                     * @implements IQueryAppVersionResponse
                     * @constructor
                     * @param {ibc.core.port.v1.IQueryAppVersionResponse=} [properties] Properties to set
                     */
                    function QueryAppVersionResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryAppVersionResponse port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @instance
                     */
                    QueryAppVersionResponse.prototype.port_id = "";

                    /**
                     * QueryAppVersionResponse version.
                     * @member {string} version
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @instance
                     */
                    QueryAppVersionResponse.prototype.version = "";

                    /**
                     * Encodes the specified QueryAppVersionResponse message. Does not implicitly {@link ibc.core.port.v1.QueryAppVersionResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @static
                     * @param {ibc.core.port.v1.IQueryAppVersionResponse} message QueryAppVersionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryAppVersionResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryAppVersionResponse message, length delimited. Does not implicitly {@link ibc.core.port.v1.QueryAppVersionResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @static
                     * @param {ibc.core.port.v1.IQueryAppVersionResponse} message QueryAppVersionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryAppVersionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryAppVersionResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.port.v1.QueryAppVersionResponse} QueryAppVersionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryAppVersionResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.port.v1.QueryAppVersionResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.version = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryAppVersionResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.port.v1.QueryAppVersionResponse} QueryAppVersionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryAppVersionResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryAppVersionResponse message.
                     * @function verify
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryAppVersionResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isString(message.version))
                                return "version: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryAppVersionResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.port.v1.QueryAppVersionResponse} QueryAppVersionResponse
                     */
                    QueryAppVersionResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.port.v1.QueryAppVersionResponse)
                            return object;
                        let message = new $root.ibc.core.port.v1.QueryAppVersionResponse();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.version != null)
                            message.version = String(object.version);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryAppVersionResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @static
                     * @param {ibc.core.port.v1.QueryAppVersionResponse} message QueryAppVersionResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryAppVersionResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.version = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        return object;
                    };

                    /**
                     * Converts this QueryAppVersionResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.port.v1.QueryAppVersionResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryAppVersionResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryAppVersionResponse;
                })();

                return v1;
            })();

            return port;
        })();

        core.types = (function() {

            /**
             * Namespace types.
             * @memberof ibc.core
             * @namespace
             */
            const types = {};

            types.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.types
                 * @namespace
                 */
                const v1 = {};

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.types.v1
                     * @interface IGenesisState
                     * @property {ibc.core.client.v1.IGenesisState|null} [client_genesis] GenesisState client_genesis
                     * @property {ibc.core.connection.v1.IGenesisState|null} [connection_genesis] GenesisState connection_genesis
                     * @property {ibc.core.channel.v1.IGenesisState|null} [channel_genesis] GenesisState channel_genesis
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.types.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.types.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState client_genesis.
                     * @member {ibc.core.client.v1.IGenesisState|null|undefined} client_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.client_genesis = null;

                    /**
                     * GenesisState connection_genesis.
                     * @member {ibc.core.connection.v1.IGenesisState|null|undefined} connection_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.connection_genesis = null;

                    /**
                     * GenesisState channel_genesis.
                     * @member {ibc.core.channel.v1.IGenesisState|null|undefined} channel_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.channel_genesis = null;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.types.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {ibc.core.types.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_genesis != null && Object.hasOwnProperty.call(message, "client_genesis"))
                            $root.ibc.core.client.v1.GenesisState.encode(message.client_genesis, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.connection_genesis != null && Object.hasOwnProperty.call(message, "connection_genesis"))
                            $root.ibc.core.connection.v1.GenesisState.encode(message.connection_genesis, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.channel_genesis != null && Object.hasOwnProperty.call(message, "channel_genesis"))
                            $root.ibc.core.channel.v1.GenesisState.encode(message.channel_genesis, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.core.types.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {ibc.core.types.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.types.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.types.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_genesis = $root.ibc.core.client.v1.GenesisState.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.connection_genesis = $root.ibc.core.connection.v1.GenesisState.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.channel_genesis = $root.ibc.core.channel.v1.GenesisState.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.types.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_genesis != null && message.hasOwnProperty("client_genesis")) {
                            let error = $root.ibc.core.client.v1.GenesisState.verify(message.client_genesis);
                            if (error)
                                return "client_genesis." + error;
                        }
                        if (message.connection_genesis != null && message.hasOwnProperty("connection_genesis")) {
                            let error = $root.ibc.core.connection.v1.GenesisState.verify(message.connection_genesis);
                            if (error)
                                return "connection_genesis." + error;
                        }
                        if (message.channel_genesis != null && message.hasOwnProperty("channel_genesis")) {
                            let error = $root.ibc.core.channel.v1.GenesisState.verify(message.channel_genesis);
                            if (error)
                                return "channel_genesis." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.types.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.types.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.core.types.v1.GenesisState();
                        if (object.client_genesis != null) {
                            if (typeof object.client_genesis !== "object")
                                throw TypeError(".ibc.core.types.v1.GenesisState.client_genesis: object expected");
                            message.client_genesis = $root.ibc.core.client.v1.GenesisState.fromObject(object.client_genesis);
                        }
                        if (object.connection_genesis != null) {
                            if (typeof object.connection_genesis !== "object")
                                throw TypeError(".ibc.core.types.v1.GenesisState.connection_genesis: object expected");
                            message.connection_genesis = $root.ibc.core.connection.v1.GenesisState.fromObject(object.connection_genesis);
                        }
                        if (object.channel_genesis != null) {
                            if (typeof object.channel_genesis !== "object")
                                throw TypeError(".ibc.core.types.v1.GenesisState.channel_genesis: object expected");
                            message.channel_genesis = $root.ibc.core.channel.v1.GenesisState.fromObject(object.channel_genesis);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {ibc.core.types.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_genesis = null;
                            object.connection_genesis = null;
                            object.channel_genesis = null;
                        }
                        if (message.client_genesis != null && message.hasOwnProperty("client_genesis"))
                            object.client_genesis = $root.ibc.core.client.v1.GenesisState.toObject(message.client_genesis, options);
                        if (message.connection_genesis != null && message.hasOwnProperty("connection_genesis"))
                            object.connection_genesis = $root.ibc.core.connection.v1.GenesisState.toObject(message.connection_genesis, options);
                        if (message.channel_genesis != null && message.hasOwnProperty("channel_genesis"))
                            object.channel_genesis = $root.ibc.core.channel.v1.GenesisState.toObject(message.channel_genesis, options);
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                return v1;
            })();

            return types;
        })();

        return core;
    })();

    ibc.lightclients = (function() {

        /**
         * Namespace lightclients.
         * @memberof ibc
         * @namespace
         */
        const lightclients = {};

        lightclients.localhost = (function() {

            /**
             * Namespace localhost.
             * @memberof ibc.lightclients
             * @namespace
             */
            const localhost = {};

            localhost.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.localhost
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function() {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.localhost.v1
                     * @interface IClientState
                     * @property {string|null} [chain_id] ClientState chain_id
                     * @property {ibc.core.client.v1.IHeight|null} [height] ClientState height
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.localhost.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.localhost.v1.IClientState=} [properties] Properties to set
                     */
                    function ClientState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientState chain_id.
                     * @member {string} chain_id
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.chain_id = "";

                    /**
                     * ClientState height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.height = null;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.localhost.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.localhost.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientState message, length delimited. Does not implicitly {@link ibc.lightclients.localhost.v1.ClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.localhost.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.localhost.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.localhost.v1.ClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.chain_id = reader.string();
                                break;
                            case 2:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.localhost.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientState message.
                     * @function verify
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                            if (!$util.isString(message.chain_id))
                                return "chain_id: string expected";
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.localhost.v1.ClientState} ClientState
                     */
                    ClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.localhost.v1.ClientState)
                            return object;
                        let message = new $root.ibc.lightclients.localhost.v1.ClientState();
                        if (object.chain_id != null)
                            message.chain_id = String(object.chain_id);
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.lightclients.localhost.v1.ClientState.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.localhost.v1.ClientState} message ClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.chain_id = "";
                            object.height = null;
                        }
                        if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                            object.chain_id = message.chain_id;
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this ClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientState;
                })();

                return v1;
            })();

            return localhost;
        })();

        lightclients.solomachine = (function() {

            /**
             * Namespace solomachine.
             * @memberof ibc.lightclients
             * @namespace
             */
            const solomachine = {};

            solomachine.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.solomachine
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function() {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IClientState
                     * @property {Long|null} [sequence] ClientState sequence
                     * @property {Long|null} [frozen_sequence] ClientState frozen_sequence
                     * @property {ibc.lightclients.solomachine.v1.IConsensusState|null} [consensus_state] ClientState consensus_state
                     * @property {boolean|null} [allow_update_after_proposal] ClientState allow_update_after_proposal
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IClientState=} [properties] Properties to set
                     */
                    function ClientState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientState sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * ClientState frozen_sequence.
                     * @member {Long} frozen_sequence
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.frozen_sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * ClientState consensus_state.
                     * @member {ibc.lightclients.solomachine.v1.IConsensusState|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.consensus_state = null;

                    /**
                     * ClientState allow_update_after_proposal.
                     * @member {boolean} allow_update_after_proposal
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_proposal = false;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.frozen_sequence != null && Object.hasOwnProperty.call(message, "frozen_sequence"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.frozen_sequence);
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.ibc.lightclients.solomachine.v1.ConsensusState.encode(message.consensus_state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.allow_update_after_proposal != null && Object.hasOwnProperty.call(message, "allow_update_after_proposal"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.allow_update_after_proposal);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientState message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.frozen_sequence = reader.uint64();
                                break;
                            case 3:
                                message.consensus_state = $root.ibc.lightclients.solomachine.v1.ConsensusState.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.allow_update_after_proposal = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientState message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.frozen_sequence != null && message.hasOwnProperty("frozen_sequence"))
                            if (!$util.isInteger(message.frozen_sequence) && !(message.frozen_sequence && $util.isInteger(message.frozen_sequence.low) && $util.isInteger(message.frozen_sequence.high)))
                                return "frozen_sequence: integer|Long expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.ibc.lightclients.solomachine.v1.ConsensusState.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.allow_update_after_proposal != null && message.hasOwnProperty("allow_update_after_proposal"))
                            if (typeof message.allow_update_after_proposal !== "boolean")
                                return "allow_update_after_proposal: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a ClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ClientState} ClientState
                     */
                    ClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ClientState)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ClientState();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.frozen_sequence != null)
                            if ($util.Long)
                                (message.frozen_sequence = $util.Long.fromValue(object.frozen_sequence)).unsigned = true;
                            else if (typeof object.frozen_sequence === "string")
                                message.frozen_sequence = parseInt(object.frozen_sequence, 10);
                            else if (typeof object.frozen_sequence === "number")
                                message.frozen_sequence = object.frozen_sequence;
                            else if (typeof object.frozen_sequence === "object")
                                message.frozen_sequence = new $util.LongBits(object.frozen_sequence.low >>> 0, object.frozen_sequence.high >>> 0).toNumber(true);
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ClientState.consensus_state: object expected");
                            message.consensus_state = $root.ibc.lightclients.solomachine.v1.ConsensusState.fromObject(object.consensus_state);
                        }
                        if (object.allow_update_after_proposal != null)
                            message.allow_update_after_proposal = Boolean(object.allow_update_after_proposal);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ClientState} message ClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.frozen_sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.frozen_sequence = options.longs === String ? "0" : 0;
                            object.consensus_state = null;
                            object.allow_update_after_proposal = false;
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.frozen_sequence != null && message.hasOwnProperty("frozen_sequence"))
                            if (typeof message.frozen_sequence === "number")
                                object.frozen_sequence = options.longs === String ? String(message.frozen_sequence) : message.frozen_sequence;
                            else
                                object.frozen_sequence = options.longs === String ? $util.Long.prototype.toString.call(message.frozen_sequence) : options.longs === Number ? new $util.LongBits(message.frozen_sequence.low >>> 0, message.frozen_sequence.high >>> 0).toNumber(true) : message.frozen_sequence;
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.ibc.lightclients.solomachine.v1.ConsensusState.toObject(message.consensus_state, options);
                        if (message.allow_update_after_proposal != null && message.hasOwnProperty("allow_update_after_proposal"))
                            object.allow_update_after_proposal = message.allow_update_after_proposal;
                        return object;
                    };

                    /**
                     * Converts this ClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientState;
                })();

                v1.ConsensusState = (function() {

                    /**
                     * Properties of a ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConsensusState
                     * @property {google.protobuf.IAny|null} [public_key] ConsensusState public_key
                     * @property {string|null} [diversifier] ConsensusState diversifier
                     * @property {Long|null} [timestamp] ConsensusState timestamp
                     */

                    /**
                     * Constructs a new ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConsensusState.
                     * @implements IConsensusState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConsensusState=} [properties] Properties to set
                     */
                    function ConsensusState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusState public_key.
                     * @member {google.protobuf.IAny|null|undefined} public_key
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.public_key = null;

                    /**
                     * ConsensusState diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.diversifier = "";

                    /**
                     * ConsensusState timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified ConsensusState message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.public_key != null && Object.hasOwnProperty.call(message, "public_key"))
                            $root.google.protobuf.Any.encode(message.public_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.diversifier != null && Object.hasOwnProperty.call(message, "diversifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.diversifier);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusState message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ConsensusState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.public_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.diversifier = reader.string();
                                break;
                            case 3:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusState message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.public_key != null && message.hasOwnProperty("public_key")) {
                            let error = $root.google.protobuf.Any.verify(message.public_key);
                            if (error)
                                return "public_key." + error;
                        }
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            if (!$util.isString(message.diversifier))
                                return "diversifier: string expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a ConsensusState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusState} ConsensusState
                     */
                    ConsensusState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ConsensusState)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ConsensusState();
                        if (object.public_key != null) {
                            if (typeof object.public_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ConsensusState.public_key: object expected");
                            message.public_key = $root.google.protobuf.Any.fromObject(object.public_key);
                        }
                        if (object.diversifier != null)
                            message.diversifier = String(object.diversifier);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ConsensusState} message ConsensusState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.public_key = null;
                            object.diversifier = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.public_key != null && message.hasOwnProperty("public_key"))
                            object.public_key = $root.google.protobuf.Any.toObject(message.public_key, options);
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            object.diversifier = message.diversifier;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this ConsensusState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusState;
                })();

                v1.Header = (function() {

                    /**
                     * Properties of a Header.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IHeader
                     * @property {Long|null} [sequence] Header sequence
                     * @property {Long|null} [timestamp] Header timestamp
                     * @property {Uint8Array|null} [signature] Header signature
                     * @property {google.protobuf.IAny|null} [new_public_key] Header new_public_key
                     * @property {string|null} [new_diversifier] Header new_diversifier
                     */

                    /**
                     * Constructs a new Header.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a Header.
                     * @implements IHeader
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IHeader=} [properties] Properties to set
                     */
                    function Header(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Header sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Header timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Header signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.signature = $util.newBuffer([]);

                    /**
                     * Header new_public_key.
                     * @member {google.protobuf.IAny|null|undefined} new_public_key
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.new_public_key = null;

                    /**
                     * Header new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified Header message. Does not implicitly {@link ibc.lightclients.solomachine.v1.Header.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.signature);
                        if (message.new_public_key != null && Object.hasOwnProperty.call(message, "new_public_key"))
                            $root.google.protobuf.Any.encode(message.new_public_key, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.new_diversifier != null && Object.hasOwnProperty.call(message, "new_diversifier"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.new_diversifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified Header message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.Header.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.Header();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            case 3:
                                message.signature = reader.bytes();
                                break;
                            case 4:
                                message.new_public_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.new_diversifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Header message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Header.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.new_public_key != null && message.hasOwnProperty("new_public_key")) {
                            let error = $root.google.protobuf.Any.verify(message.new_public_key);
                            if (error)
                                return "new_public_key." + error;
                        }
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            if (!$util.isString(message.new_diversifier))
                                return "new_diversifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a Header message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.Header} Header
                     */
                    Header.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.Header)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.Header();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length)
                                message.signature = object.signature;
                        if (object.new_public_key != null) {
                            if (typeof object.new_public_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.Header.new_public_key: object expected");
                            message.new_public_key = $root.google.protobuf.Any.fromObject(object.new_public_key);
                        }
                        if (object.new_diversifier != null)
                            message.new_diversifier = String(object.new_diversifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Header message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.Header} message Header
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Header.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.new_public_key = null;
                            object.new_diversifier = "";
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.new_public_key != null && message.hasOwnProperty("new_public_key"))
                            object.new_public_key = $root.google.protobuf.Any.toObject(message.new_public_key, options);
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            object.new_diversifier = message.new_diversifier;
                        return object;
                    };

                    /**
                     * Converts this Header to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Header.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Header;
                })();

                v1.Misbehaviour = (function() {

                    /**
                     * Properties of a Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IMisbehaviour
                     * @property {string|null} [client_id] Misbehaviour client_id
                     * @property {Long|null} [sequence] Misbehaviour sequence
                     * @property {ibc.lightclients.solomachine.v1.ISignatureAndData|null} [signature_one] Misbehaviour signature_one
                     * @property {ibc.lightclients.solomachine.v1.ISignatureAndData|null} [signature_two] Misbehaviour signature_two
                     */

                    /**
                     * Constructs a new Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a Misbehaviour.
                     * @implements IMisbehaviour
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IMisbehaviour=} [properties] Properties to set
                     */
                    function Misbehaviour(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Misbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.client_id = "";

                    /**
                     * Misbehaviour sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Misbehaviour signature_one.
                     * @member {ibc.lightclients.solomachine.v1.ISignatureAndData|null|undefined} signature_one
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_one = null;

                    /**
                     * Misbehaviour signature_two.
                     * @member {ibc.lightclients.solomachine.v1.ISignatureAndData|null|undefined} signature_two
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_two = null;

                    /**
                     * Encodes the specified Misbehaviour message. Does not implicitly {@link ibc.lightclients.solomachine.v1.Misbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.sequence);
                        if (message.signature_one != null && Object.hasOwnProperty.call(message, "signature_one"))
                            $root.ibc.lightclients.solomachine.v1.SignatureAndData.encode(message.signature_one, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.signature_two != null && Object.hasOwnProperty.call(message, "signature_two"))
                            $root.ibc.lightclients.solomachine.v1.SignatureAndData.encode(message.signature_two, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Misbehaviour message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.Misbehaviour.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.Misbehaviour();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.sequence = reader.uint64();
                                break;
                            case 3:
                                message.signature_one = $root.ibc.lightclients.solomachine.v1.SignatureAndData.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.signature_two = $root.ibc.lightclients.solomachine.v1.SignatureAndData.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Misbehaviour message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Misbehaviour.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.signature_one != null && message.hasOwnProperty("signature_one")) {
                            let error = $root.ibc.lightclients.solomachine.v1.SignatureAndData.verify(message.signature_one);
                            if (error)
                                return "signature_one." + error;
                        }
                        if (message.signature_two != null && message.hasOwnProperty("signature_two")) {
                            let error = $root.ibc.lightclients.solomachine.v1.SignatureAndData.verify(message.signature_two);
                            if (error)
                                return "signature_two." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Misbehaviour message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.Misbehaviour} Misbehaviour
                     */
                    Misbehaviour.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.Misbehaviour)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.Misbehaviour();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.signature_one != null) {
                            if (typeof object.signature_one !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.Misbehaviour.signature_one: object expected");
                            message.signature_one = $root.ibc.lightclients.solomachine.v1.SignatureAndData.fromObject(object.signature_one);
                        }
                        if (object.signature_two != null) {
                            if (typeof object.signature_two !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.Misbehaviour.signature_two: object expected");
                            message.signature_two = $root.ibc.lightclients.solomachine.v1.SignatureAndData.fromObject(object.signature_two);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Misbehaviour message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.Misbehaviour} message Misbehaviour
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Misbehaviour.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            object.signature_one = null;
                            object.signature_two = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.signature_one != null && message.hasOwnProperty("signature_one"))
                            object.signature_one = $root.ibc.lightclients.solomachine.v1.SignatureAndData.toObject(message.signature_one, options);
                        if (message.signature_two != null && message.hasOwnProperty("signature_two"))
                            object.signature_two = $root.ibc.lightclients.solomachine.v1.SignatureAndData.toObject(message.signature_two, options);
                        return object;
                    };

                    /**
                     * Converts this Misbehaviour to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Misbehaviour.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Misbehaviour;
                })();

                v1.SignatureAndData = (function() {

                    /**
                     * Properties of a SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ISignatureAndData
                     * @property {Uint8Array|null} [signature] SignatureAndData signature
                     * @property {ibc.lightclients.solomachine.v1.DataType|null} [data_type] SignatureAndData data_type
                     * @property {Uint8Array|null} [data] SignatureAndData data
                     * @property {Long|null} [timestamp] SignatureAndData timestamp
                     */

                    /**
                     * Constructs a new SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a SignatureAndData.
                     * @implements ISignatureAndData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ISignatureAndData=} [properties] Properties to set
                     */
                    function SignatureAndData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SignatureAndData signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.signature = $util.newBuffer([]);

                    /**
                     * SignatureAndData data_type.
                     * @member {ibc.lightclients.solomachine.v1.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data_type = 0;

                    /**
                     * SignatureAndData data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data = $util.newBuffer([]);

                    /**
                     * SignatureAndData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified SignatureAndData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignatureAndData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignatureAndData} message SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature);
                        if (message.data_type != null && Object.hasOwnProperty.call(message, "data_type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.data_type);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified SignatureAndData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignatureAndData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignatureAndData} message SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.SignatureAndData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signature = reader.bytes();
                                break;
                            case 2:
                                message.data_type = reader.int32();
                                break;
                            case 3:
                                message.data = reader.bytes();
                                break;
                            case 4:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SignatureAndData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SignatureAndData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            switch (message.data_type) {
                            default:
                                return "data_type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a SignatureAndData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.SignatureAndData} SignatureAndData
                     */
                    SignatureAndData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.SignatureAndData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.SignatureAndData();
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length)
                                message.signature = object.signature;
                        switch (object.data_type) {
                        case "DATA_TYPE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.data_type = 0;
                            break;
                        case "DATA_TYPE_CLIENT_STATE":
                        case 1:
                            message.data_type = 1;
                            break;
                        case "DATA_TYPE_CONSENSUS_STATE":
                        case 2:
                            message.data_type = 2;
                            break;
                        case "DATA_TYPE_CONNECTION_STATE":
                        case 3:
                            message.data_type = 3;
                            break;
                        case "DATA_TYPE_CHANNEL_STATE":
                        case 4:
                            message.data_type = 4;
                            break;
                        case "DATA_TYPE_PACKET_COMMITMENT":
                        case 5:
                            message.data_type = 5;
                            break;
                        case "DATA_TYPE_PACKET_ACKNOWLEDGEMENT":
                        case 6:
                            message.data_type = 6;
                            break;
                        case "DATA_TYPE_PACKET_RECEIPT_ABSENCE":
                        case 7:
                            message.data_type = 7;
                            break;
                        case "DATA_TYPE_NEXT_SEQUENCE_RECV":
                        case 8:
                            message.data_type = 8;
                            break;
                        case "DATA_TYPE_HEADER":
                        case 9:
                            message.data_type = 9;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a SignatureAndData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.SignatureAndData} message SignatureAndData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SignatureAndData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.data_type = options.enums === String ? "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            object.data_type = options.enums === String ? $root.ibc.lightclients.solomachine.v1.DataType[message.data_type] : message.data_type;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this SignatureAndData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SignatureAndData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SignatureAndData;
                })();

                v1.TimestampedSignatureData = (function() {

                    /**
                     * Properties of a TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ITimestampedSignatureData
                     * @property {Uint8Array|null} [signature_data] TimestampedSignatureData signature_data
                     * @property {Long|null} [timestamp] TimestampedSignatureData timestamp
                     */

                    /**
                     * Constructs a new TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a TimestampedSignatureData.
                     * @implements ITimestampedSignatureData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ITimestampedSignatureData=} [properties] Properties to set
                     */
                    function TimestampedSignatureData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TimestampedSignatureData signature_data.
                     * @member {Uint8Array} signature_data
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.signature_data = $util.newBuffer([]);

                    /**
                     * TimestampedSignatureData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified TimestampedSignatureData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.TimestampedSignatureData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ITimestampedSignatureData} message TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature_data != null && Object.hasOwnProperty.call(message, "signature_data"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature_data);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified TimestampedSignatureData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.TimestampedSignatureData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ITimestampedSignatureData} message TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.TimestampedSignatureData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signature_data = reader.bytes();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TimestampedSignatureData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TimestampedSignatureData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                            if (!(message.signature_data && typeof message.signature_data.length === "number" || $util.isString(message.signature_data)))
                                return "signature_data: buffer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a TimestampedSignatureData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.TimestampedSignatureData} TimestampedSignatureData
                     */
                    TimestampedSignatureData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.TimestampedSignatureData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.TimestampedSignatureData();
                        if (object.signature_data != null)
                            if (typeof object.signature_data === "string")
                                $util.base64.decode(object.signature_data, message.signature_data = $util.newBuffer($util.base64.length(object.signature_data)), 0);
                            else if (object.signature_data.length)
                                message.signature_data = object.signature_data;
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TimestampedSignatureData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.TimestampedSignatureData} message TimestampedSignatureData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TimestampedSignatureData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.signature_data = "";
                            else {
                                object.signature_data = [];
                                if (options.bytes !== Array)
                                    object.signature_data = $util.newBuffer(object.signature_data);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                            object.signature_data = options.bytes === String ? $util.base64.encode(message.signature_data, 0, message.signature_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature_data) : message.signature_data;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this TimestampedSignatureData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TimestampedSignatureData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TimestampedSignatureData;
                })();

                v1.SignBytes = (function() {

                    /**
                     * Properties of a SignBytes.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ISignBytes
                     * @property {Long|null} [sequence] SignBytes sequence
                     * @property {Long|null} [timestamp] SignBytes timestamp
                     * @property {string|null} [diversifier] SignBytes diversifier
                     * @property {ibc.lightclients.solomachine.v1.DataType|null} [data_type] SignBytes data_type
                     * @property {Uint8Array|null} [data] SignBytes data
                     */

                    /**
                     * Constructs a new SignBytes.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a SignBytes.
                     * @implements ISignBytes
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ISignBytes=} [properties] Properties to set
                     */
                    function SignBytes(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SignBytes sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * SignBytes timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * SignBytes diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.diversifier = "";

                    /**
                     * SignBytes data_type.
                     * @member {ibc.lightclients.solomachine.v1.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data_type = 0;

                    /**
                     * SignBytes data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified SignBytes message. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignBytes.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignBytes} message SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        if (message.diversifier != null && Object.hasOwnProperty.call(message, "diversifier"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.diversifier);
                        if (message.data_type != null && Object.hasOwnProperty.call(message, "data_type"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.data_type);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.data);
                        return writer;
                    };

                    /**
                     * Encodes the specified SignBytes message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignBytes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignBytes} message SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.SignBytes();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            case 3:
                                message.diversifier = reader.string();
                                break;
                            case 4:
                                message.data_type = reader.int32();
                                break;
                            case 5:
                                message.data = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SignBytes message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SignBytes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            if (!$util.isString(message.diversifier))
                                return "diversifier: string expected";
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            switch (message.data_type) {
                            default:
                                return "data_type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a SignBytes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.SignBytes} SignBytes
                     */
                    SignBytes.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.SignBytes)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.SignBytes();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        if (object.diversifier != null)
                            message.diversifier = String(object.diversifier);
                        switch (object.data_type) {
                        case "DATA_TYPE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.data_type = 0;
                            break;
                        case "DATA_TYPE_CLIENT_STATE":
                        case 1:
                            message.data_type = 1;
                            break;
                        case "DATA_TYPE_CONSENSUS_STATE":
                        case 2:
                            message.data_type = 2;
                            break;
                        case "DATA_TYPE_CONNECTION_STATE":
                        case 3:
                            message.data_type = 3;
                            break;
                        case "DATA_TYPE_CHANNEL_STATE":
                        case 4:
                            message.data_type = 4;
                            break;
                        case "DATA_TYPE_PACKET_COMMITMENT":
                        case 5:
                            message.data_type = 5;
                            break;
                        case "DATA_TYPE_PACKET_ACKNOWLEDGEMENT":
                        case 6:
                            message.data_type = 6;
                            break;
                        case "DATA_TYPE_PACKET_RECEIPT_ABSENCE":
                        case 7:
                            message.data_type = 7;
                            break;
                        case "DATA_TYPE_NEXT_SEQUENCE_RECV":
                        case 8:
                            message.data_type = 8;
                            break;
                        case "DATA_TYPE_HEADER":
                        case 9:
                            message.data_type = 9;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        return message;
                    };

                    /**
                     * Creates a plain object from a SignBytes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.SignBytes} message SignBytes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SignBytes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            object.diversifier = "";
                            object.data_type = options.enums === String ? "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            object.diversifier = message.diversifier;
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            object.data_type = options.enums === String ? $root.ibc.lightclients.solomachine.v1.DataType[message.data_type] : message.data_type;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        return object;
                    };

                    /**
                     * Converts this SignBytes to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SignBytes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SignBytes;
                })();

                /**
                 * DataType enum.
                 * @name ibc.lightclients.solomachine.v1.DataType
                 * @enum {number}
                 * @property {number} DATA_TYPE_UNINITIALIZED_UNSPECIFIED=0 DATA_TYPE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} DATA_TYPE_CLIENT_STATE=1 DATA_TYPE_CLIENT_STATE value
                 * @property {number} DATA_TYPE_CONSENSUS_STATE=2 DATA_TYPE_CONSENSUS_STATE value
                 * @property {number} DATA_TYPE_CONNECTION_STATE=3 DATA_TYPE_CONNECTION_STATE value
                 * @property {number} DATA_TYPE_CHANNEL_STATE=4 DATA_TYPE_CHANNEL_STATE value
                 * @property {number} DATA_TYPE_PACKET_COMMITMENT=5 DATA_TYPE_PACKET_COMMITMENT value
                 * @property {number} DATA_TYPE_PACKET_ACKNOWLEDGEMENT=6 DATA_TYPE_PACKET_ACKNOWLEDGEMENT value
                 * @property {number} DATA_TYPE_PACKET_RECEIPT_ABSENCE=7 DATA_TYPE_PACKET_RECEIPT_ABSENCE value
                 * @property {number} DATA_TYPE_NEXT_SEQUENCE_RECV=8 DATA_TYPE_NEXT_SEQUENCE_RECV value
                 * @property {number} DATA_TYPE_HEADER=9 DATA_TYPE_HEADER value
                 */
                v1.DataType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DATA_TYPE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DATA_TYPE_CLIENT_STATE"] = 1;
                    values[valuesById[2] = "DATA_TYPE_CONSENSUS_STATE"] = 2;
                    values[valuesById[3] = "DATA_TYPE_CONNECTION_STATE"] = 3;
                    values[valuesById[4] = "DATA_TYPE_CHANNEL_STATE"] = 4;
                    values[valuesById[5] = "DATA_TYPE_PACKET_COMMITMENT"] = 5;
                    values[valuesById[6] = "DATA_TYPE_PACKET_ACKNOWLEDGEMENT"] = 6;
                    values[valuesById[7] = "DATA_TYPE_PACKET_RECEIPT_ABSENCE"] = 7;
                    values[valuesById[8] = "DATA_TYPE_NEXT_SEQUENCE_RECV"] = 8;
                    values[valuesById[9] = "DATA_TYPE_HEADER"] = 9;
                    return values;
                })();

                v1.HeaderData = (function() {

                    /**
                     * Properties of a HeaderData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IHeaderData
                     * @property {google.protobuf.IAny|null} [new_pub_key] HeaderData new_pub_key
                     * @property {string|null} [new_diversifier] HeaderData new_diversifier
                     */

                    /**
                     * Constructs a new HeaderData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a HeaderData.
                     * @implements IHeaderData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IHeaderData=} [properties] Properties to set
                     */
                    function HeaderData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * HeaderData new_pub_key.
                     * @member {google.protobuf.IAny|null|undefined} new_pub_key
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_pub_key = null;

                    /**
                     * HeaderData new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified HeaderData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.HeaderData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeaderData} message HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.new_pub_key != null && Object.hasOwnProperty.call(message, "new_pub_key"))
                            $root.google.protobuf.Any.encode(message.new_pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.new_diversifier != null && Object.hasOwnProperty.call(message, "new_diversifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.new_diversifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified HeaderData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.HeaderData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeaderData} message HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.HeaderData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.new_pub_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.new_diversifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a HeaderData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HeaderData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.new_pub_key != null && message.hasOwnProperty("new_pub_key")) {
                            let error = $root.google.protobuf.Any.verify(message.new_pub_key);
                            if (error)
                                return "new_pub_key." + error;
                        }
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            if (!$util.isString(message.new_diversifier))
                                return "new_diversifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a HeaderData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.HeaderData} HeaderData
                     */
                    HeaderData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.HeaderData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.HeaderData();
                        if (object.new_pub_key != null) {
                            if (typeof object.new_pub_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.HeaderData.new_pub_key: object expected");
                            message.new_pub_key = $root.google.protobuf.Any.fromObject(object.new_pub_key);
                        }
                        if (object.new_diversifier != null)
                            message.new_diversifier = String(object.new_diversifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a HeaderData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.HeaderData} message HeaderData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HeaderData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.new_pub_key = null;
                            object.new_diversifier = "";
                        }
                        if (message.new_pub_key != null && message.hasOwnProperty("new_pub_key"))
                            object.new_pub_key = $root.google.protobuf.Any.toObject(message.new_pub_key, options);
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            object.new_diversifier = message.new_diversifier;
                        return object;
                    };

                    /**
                     * Converts this HeaderData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HeaderData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return HeaderData;
                })();

                v1.ClientStateData = (function() {

                    /**
                     * Properties of a ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IClientStateData
                     * @property {Uint8Array|null} [path] ClientStateData path
                     * @property {google.protobuf.IAny|null} [client_state] ClientStateData client_state
                     */

                    /**
                     * Constructs a new ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ClientStateData.
                     * @implements IClientStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IClientStateData=} [properties] Properties to set
                     */
                    function ClientStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ClientStateData client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.client_state = null;

                    /**
                     * Encodes the specified ClientStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientStateData} message ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientStateData} message ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ClientStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ClientStateData} ClientStateData
                     */
                    ClientStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ClientStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ClientStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ClientStateData.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ClientStateData} message ClientStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.client_state = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        return object;
                    };

                    /**
                     * Converts this ClientStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientStateData;
                })();

                v1.ConsensusStateData = (function() {

                    /**
                     * Properties of a ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConsensusStateData
                     * @property {Uint8Array|null} [path] ConsensusStateData path
                     * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateData consensus_state
                     */

                    /**
                     * Constructs a new ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConsensusStateData.
                     * @implements IConsensusStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConsensusStateData=} [properties] Properties to set
                     */
                    function ConsensusStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConsensusStateData consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.consensus_state = null;

                    /**
                     * Encodes the specified ConsensusStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusStateData} message ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusStateData} message ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ConsensusStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConsensusStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusStateData} ConsensusStateData
                     */
                    ConsensusStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ConsensusStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ConsensusStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ConsensusStateData.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ConsensusStateData} message ConsensusStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.consensus_state = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        return object;
                    };

                    /**
                     * Converts this ConsensusStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusStateData;
                })();

                v1.ConnectionStateData = (function() {

                    /**
                     * Properties of a ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConnectionStateData
                     * @property {Uint8Array|null} [path] ConnectionStateData path
                     * @property {ibc.core.connection.v1.IConnectionEnd|null} [connection] ConnectionStateData connection
                     */

                    /**
                     * Constructs a new ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConnectionStateData.
                     * @implements IConnectionStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConnectionStateData=} [properties] Properties to set
                     */
                    function ConnectionStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConnectionStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConnectionStateData connection.
                     * @member {ibc.core.connection.v1.IConnectionEnd|null|undefined} connection
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.connection = null;

                    /**
                     * Encodes the specified ConnectionStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConnectionStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConnectionStateData} message ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.connection != null && Object.hasOwnProperty.call(message, "connection"))
                            $root.ibc.core.connection.v1.ConnectionEnd.encode(message.connection, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConnectionStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConnectionStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConnectionStateData} message ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ConnectionStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.connection = $root.ibc.core.connection.v1.ConnectionEnd.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConnectionStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectionStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.connection != null && message.hasOwnProperty("connection")) {
                            let error = $root.ibc.core.connection.v1.ConnectionEnd.verify(message.connection);
                            if (error)
                                return "connection." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConnectionStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ConnectionStateData} ConnectionStateData
                     */
                    ConnectionStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ConnectionStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ConnectionStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.connection != null) {
                            if (typeof object.connection !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ConnectionStateData.connection: object expected");
                            message.connection = $root.ibc.core.connection.v1.ConnectionEnd.fromObject(object.connection);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConnectionStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ConnectionStateData} message ConnectionStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectionStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.connection = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            object.connection = $root.ibc.core.connection.v1.ConnectionEnd.toObject(message.connection, options);
                        return object;
                    };

                    /**
                     * Converts this ConnectionStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectionStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConnectionStateData;
                })();

                v1.ChannelStateData = (function() {

                    /**
                     * Properties of a ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IChannelStateData
                     * @property {Uint8Array|null} [path] ChannelStateData path
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] ChannelStateData channel
                     */

                    /**
                     * Constructs a new ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ChannelStateData.
                     * @implements IChannelStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IChannelStateData=} [properties] Properties to set
                     */
                    function ChannelStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ChannelStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ChannelStateData channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.channel = null;

                    /**
                     * Encodes the specified ChannelStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ChannelStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IChannelStateData} message ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ChannelStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ChannelStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IChannelStateData} message ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ChannelStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ChannelStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ChannelStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ChannelStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ChannelStateData} ChannelStateData
                     */
                    ChannelStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ChannelStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ChannelStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ChannelStateData.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ChannelStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ChannelStateData} message ChannelStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ChannelStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.channel = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        return object;
                    };

                    /**
                     * Converts this ChannelStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ChannelStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ChannelStateData;
                })();

                v1.PacketCommitmentData = (function() {

                    /**
                     * Properties of a PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketCommitmentData
                     * @property {Uint8Array|null} [path] PacketCommitmentData path
                     * @property {Uint8Array|null} [commitment] PacketCommitmentData commitment
                     */

                    /**
                     * Constructs a new PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketCommitmentData.
                     * @implements IPacketCommitmentData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketCommitmentData=} [properties] Properties to set
                     */
                    function PacketCommitmentData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketCommitmentData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketCommitmentData commitment.
                     * @member {Uint8Array} commitment
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.commitment = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketCommitmentData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketCommitmentData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketCommitmentData} message PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.commitment != null && Object.hasOwnProperty.call(message, "commitment"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.commitment);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketCommitmentData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketCommitmentData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketCommitmentData} message PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.PacketCommitmentData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.commitment = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketCommitmentData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketCommitmentData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            if (!(message.commitment && typeof message.commitment.length === "number" || $util.isString(message.commitment)))
                                return "commitment: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketCommitmentData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.PacketCommitmentData} PacketCommitmentData
                     */
                    PacketCommitmentData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.PacketCommitmentData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.PacketCommitmentData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.commitment != null)
                            if (typeof object.commitment === "string")
                                $util.base64.decode(object.commitment, message.commitment = $util.newBuffer($util.base64.length(object.commitment)), 0);
                            else if (object.commitment.length)
                                message.commitment = object.commitment;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketCommitmentData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.PacketCommitmentData} message PacketCommitmentData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketCommitmentData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if (options.bytes === String)
                                object.commitment = "";
                            else {
                                object.commitment = [];
                                if (options.bytes !== Array)
                                    object.commitment = $util.newBuffer(object.commitment);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            object.commitment = options.bytes === String ? $util.base64.encode(message.commitment, 0, message.commitment.length) : options.bytes === Array ? Array.prototype.slice.call(message.commitment) : message.commitment;
                        return object;
                    };

                    /**
                     * Converts this PacketCommitmentData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketCommitmentData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketCommitmentData;
                })();

                v1.PacketAcknowledgementData = (function() {

                    /**
                     * Properties of a PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketAcknowledgementData
                     * @property {Uint8Array|null} [path] PacketAcknowledgementData path
                     * @property {Uint8Array|null} [acknowledgement] PacketAcknowledgementData acknowledgement
                     */

                    /**
                     * Constructs a new PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketAcknowledgementData.
                     * @implements IPacketAcknowledgementData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketAcknowledgementData=} [properties] Properties to set
                     */
                    function PacketAcknowledgementData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketAcknowledgementData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketAcknowledgementData acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketAcknowledgementData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketAcknowledgementData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketAcknowledgementData} message PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.acknowledgement != null && Object.hasOwnProperty.call(message, "acknowledgement"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.acknowledgement);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketAcknowledgementData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketAcknowledgementData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketAcknowledgementData} message PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.PacketAcknowledgementData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.acknowledgement = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketAcknowledgementData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketAcknowledgementData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            if (!(message.acknowledgement && typeof message.acknowledgement.length === "number" || $util.isString(message.acknowledgement)))
                                return "acknowledgement: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketAcknowledgementData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} PacketAcknowledgementData
                     */
                    PacketAcknowledgementData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.PacketAcknowledgementData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.PacketAcknowledgementData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.acknowledgement != null)
                            if (typeof object.acknowledgement === "string")
                                $util.base64.decode(object.acknowledgement, message.acknowledgement = $util.newBuffer($util.base64.length(object.acknowledgement)), 0);
                            else if (object.acknowledgement.length)
                                message.acknowledgement = object.acknowledgement;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketAcknowledgementData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} message PacketAcknowledgementData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketAcknowledgementData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if (options.bytes === String)
                                object.acknowledgement = "";
                            else {
                                object.acknowledgement = [];
                                if (options.bytes !== Array)
                                    object.acknowledgement = $util.newBuffer(object.acknowledgement);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            object.acknowledgement = options.bytes === String ? $util.base64.encode(message.acknowledgement, 0, message.acknowledgement.length) : options.bytes === Array ? Array.prototype.slice.call(message.acknowledgement) : message.acknowledgement;
                        return object;
                    };

                    /**
                     * Converts this PacketAcknowledgementData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketAcknowledgementData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketAcknowledgementData;
                })();

                v1.PacketReceiptAbsenceData = (function() {

                    /**
                     * Properties of a PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketReceiptAbsenceData
                     * @property {Uint8Array|null} [path] PacketReceiptAbsenceData path
                     */

                    /**
                     * Constructs a new PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketReceiptAbsenceData.
                     * @implements IPacketReceiptAbsenceData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketReceiptAbsenceData=} [properties] Properties to set
                     */
                    function PacketReceiptAbsenceData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketReceiptAbsenceData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @instance
                     */
                    PacketReceiptAbsenceData.prototype.path = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketReceiptAbsenceData} message PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketReceiptAbsenceData} message PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketReceiptAbsenceData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketReceiptAbsenceData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketReceiptAbsenceData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     */
                    PacketReceiptAbsenceData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketReceiptAbsenceData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} message PacketReceiptAbsenceData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketReceiptAbsenceData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        return object;
                    };

                    /**
                     * Converts this PacketReceiptAbsenceData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketReceiptAbsenceData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketReceiptAbsenceData;
                })();

                v1.NextSequenceRecvData = (function() {

                    /**
                     * Properties of a NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface INextSequenceRecvData
                     * @property {Uint8Array|null} [path] NextSequenceRecvData path
                     * @property {Long|null} [next_seq_recv] NextSequenceRecvData next_seq_recv
                     */

                    /**
                     * Constructs a new NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a NextSequenceRecvData.
                     * @implements INextSequenceRecvData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.INextSequenceRecvData=} [properties] Properties to set
                     */
                    function NextSequenceRecvData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NextSequenceRecvData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.path = $util.newBuffer([]);

                    /**
                     * NextSequenceRecvData next_seq_recv.
                     * @member {Long} next_seq_recv
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.next_seq_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified NextSequenceRecvData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.NextSequenceRecvData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.INextSequenceRecvData} message NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.next_seq_recv != null && Object.hasOwnProperty.call(message, "next_seq_recv"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.next_seq_recv);
                        return writer;
                    };

                    /**
                     * Encodes the specified NextSequenceRecvData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.NextSequenceRecvData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.INextSequenceRecvData} message NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.NextSequenceRecvData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.next_seq_recv = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NextSequenceRecvData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NextSequenceRecvData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.next_seq_recv != null && message.hasOwnProperty("next_seq_recv"))
                            if (!$util.isInteger(message.next_seq_recv) && !(message.next_seq_recv && $util.isInteger(message.next_seq_recv.low) && $util.isInteger(message.next_seq_recv.high)))
                                return "next_seq_recv: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a NextSequenceRecvData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.NextSequenceRecvData} NextSequenceRecvData
                     */
                    NextSequenceRecvData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.NextSequenceRecvData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.NextSequenceRecvData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.next_seq_recv != null)
                            if ($util.Long)
                                (message.next_seq_recv = $util.Long.fromValue(object.next_seq_recv)).unsigned = true;
                            else if (typeof object.next_seq_recv === "string")
                                message.next_seq_recv = parseInt(object.next_seq_recv, 10);
                            else if (typeof object.next_seq_recv === "number")
                                message.next_seq_recv = object.next_seq_recv;
                            else if (typeof object.next_seq_recv === "object")
                                message.next_seq_recv = new $util.LongBits(object.next_seq_recv.low >>> 0, object.next_seq_recv.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a NextSequenceRecvData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.NextSequenceRecvData} message NextSequenceRecvData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NextSequenceRecvData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_seq_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_seq_recv = options.longs === String ? "0" : 0;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.next_seq_recv != null && message.hasOwnProperty("next_seq_recv"))
                            if (typeof message.next_seq_recv === "number")
                                object.next_seq_recv = options.longs === String ? String(message.next_seq_recv) : message.next_seq_recv;
                            else
                                object.next_seq_recv = options.longs === String ? $util.Long.prototype.toString.call(message.next_seq_recv) : options.longs === Number ? new $util.LongBits(message.next_seq_recv.low >>> 0, message.next_seq_recv.high >>> 0).toNumber(true) : message.next_seq_recv;
                        return object;
                    };

                    /**
                     * Converts this NextSequenceRecvData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NextSequenceRecvData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return NextSequenceRecvData;
                })();

                return v1;
            })();

            solomachine.v2 = (function() {

                /**
                 * Namespace v2.
                 * @memberof ibc.lightclients.solomachine
                 * @namespace
                 */
                const v2 = {};

                v2.ClientState = (function() {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IClientState
                     * @property {Long|null} [sequence] ClientState sequence
                     * @property {boolean|null} [is_frozen] ClientState is_frozen
                     * @property {ibc.lightclients.solomachine.v2.IConsensusState|null} [consensus_state] ClientState consensus_state
                     * @property {boolean|null} [allow_update_after_proposal] ClientState allow_update_after_proposal
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IClientState=} [properties] Properties to set
                     */
                    function ClientState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientState sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     */
                    ClientState.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * ClientState is_frozen.
                     * @member {boolean} is_frozen
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     */
                    ClientState.prototype.is_frozen = false;

                    /**
                     * ClientState consensus_state.
                     * @member {ibc.lightclients.solomachine.v2.IConsensusState|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     */
                    ClientState.prototype.consensus_state = null;

                    /**
                     * ClientState allow_update_after_proposal.
                     * @member {boolean} allow_update_after_proposal
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_proposal = false;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.is_frozen != null && Object.hasOwnProperty.call(message, "is_frozen"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_frozen);
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.ibc.lightclients.solomachine.v2.ConsensusState.encode(message.consensus_state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.allow_update_after_proposal != null && Object.hasOwnProperty.call(message, "allow_update_after_proposal"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.allow_update_after_proposal);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientState message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.is_frozen = reader.bool();
                                break;
                            case 3:
                                message.consensus_state = $root.ibc.lightclients.solomachine.v2.ConsensusState.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.allow_update_after_proposal = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientState message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.is_frozen != null && message.hasOwnProperty("is_frozen"))
                            if (typeof message.is_frozen !== "boolean")
                                return "is_frozen: boolean expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.ibc.lightclients.solomachine.v2.ConsensusState.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.allow_update_after_proposal != null && message.hasOwnProperty("allow_update_after_proposal"))
                            if (typeof message.allow_update_after_proposal !== "boolean")
                                return "allow_update_after_proposal: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a ClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ClientState} ClientState
                     */
                    ClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ClientState)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ClientState();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.is_frozen != null)
                            message.is_frozen = Boolean(object.is_frozen);
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ClientState.consensus_state: object expected");
                            message.consensus_state = $root.ibc.lightclients.solomachine.v2.ConsensusState.fromObject(object.consensus_state);
                        }
                        if (object.allow_update_after_proposal != null)
                            message.allow_update_after_proposal = Boolean(object.allow_update_after_proposal);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ClientState} message ClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            object.is_frozen = false;
                            object.consensus_state = null;
                            object.allow_update_after_proposal = false;
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.is_frozen != null && message.hasOwnProperty("is_frozen"))
                            object.is_frozen = message.is_frozen;
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.ibc.lightclients.solomachine.v2.ConsensusState.toObject(message.consensus_state, options);
                        if (message.allow_update_after_proposal != null && message.hasOwnProperty("allow_update_after_proposal"))
                            object.allow_update_after_proposal = message.allow_update_after_proposal;
                        return object;
                    };

                    /**
                     * Converts this ClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientState;
                })();

                v2.ConsensusState = (function() {

                    /**
                     * Properties of a ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IConsensusState
                     * @property {google.protobuf.IAny|null} [public_key] ConsensusState public_key
                     * @property {string|null} [diversifier] ConsensusState diversifier
                     * @property {Long|null} [timestamp] ConsensusState timestamp
                     */

                    /**
                     * Constructs a new ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ConsensusState.
                     * @implements IConsensusState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IConsensusState=} [properties] Properties to set
                     */
                    function ConsensusState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusState public_key.
                     * @member {google.protobuf.IAny|null|undefined} public_key
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.public_key = null;

                    /**
                     * ConsensusState diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.diversifier = "";

                    /**
                     * ConsensusState timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified ConsensusState message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConsensusState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.public_key != null && Object.hasOwnProperty.call(message, "public_key"))
                            $root.google.protobuf.Any.encode(message.public_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.diversifier != null && Object.hasOwnProperty.call(message, "diversifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.diversifier);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusState message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConsensusState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ConsensusState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.public_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.diversifier = reader.string();
                                break;
                            case 3:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusState message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.public_key != null && message.hasOwnProperty("public_key")) {
                            let error = $root.google.protobuf.Any.verify(message.public_key);
                            if (error)
                                return "public_key." + error;
                        }
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            if (!$util.isString(message.diversifier))
                                return "diversifier: string expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a ConsensusState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusState} ConsensusState
                     */
                    ConsensusState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ConsensusState)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ConsensusState();
                        if (object.public_key != null) {
                            if (typeof object.public_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ConsensusState.public_key: object expected");
                            message.public_key = $root.google.protobuf.Any.fromObject(object.public_key);
                        }
                        if (object.diversifier != null)
                            message.diversifier = String(object.diversifier);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ConsensusState} message ConsensusState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.public_key = null;
                            object.diversifier = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.public_key != null && message.hasOwnProperty("public_key"))
                            object.public_key = $root.google.protobuf.Any.toObject(message.public_key, options);
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            object.diversifier = message.diversifier;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this ConsensusState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusState;
                })();

                v2.Header = (function() {

                    /**
                     * Properties of a Header.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IHeader
                     * @property {Long|null} [sequence] Header sequence
                     * @property {Long|null} [timestamp] Header timestamp
                     * @property {Uint8Array|null} [signature] Header signature
                     * @property {google.protobuf.IAny|null} [new_public_key] Header new_public_key
                     * @property {string|null} [new_diversifier] Header new_diversifier
                     */

                    /**
                     * Constructs a new Header.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a Header.
                     * @implements IHeader
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IHeader=} [properties] Properties to set
                     */
                    function Header(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Header sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Header timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Header signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.signature = $util.newBuffer([]);

                    /**
                     * Header new_public_key.
                     * @member {google.protobuf.IAny|null|undefined} new_public_key
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.new_public_key = null;

                    /**
                     * Header new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified Header message. Does not implicitly {@link ibc.lightclients.solomachine.v2.Header.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.signature);
                        if (message.new_public_key != null && Object.hasOwnProperty.call(message, "new_public_key"))
                            $root.google.protobuf.Any.encode(message.new_public_key, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.new_diversifier != null && Object.hasOwnProperty.call(message, "new_diversifier"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.new_diversifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified Header message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.Header.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.Header();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            case 3:
                                message.signature = reader.bytes();
                                break;
                            case 4:
                                message.new_public_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.new_diversifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Header message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Header.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.new_public_key != null && message.hasOwnProperty("new_public_key")) {
                            let error = $root.google.protobuf.Any.verify(message.new_public_key);
                            if (error)
                                return "new_public_key." + error;
                        }
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            if (!$util.isString(message.new_diversifier))
                                return "new_diversifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a Header message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.Header} Header
                     */
                    Header.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.Header)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.Header();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length)
                                message.signature = object.signature;
                        if (object.new_public_key != null) {
                            if (typeof object.new_public_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.Header.new_public_key: object expected");
                            message.new_public_key = $root.google.protobuf.Any.fromObject(object.new_public_key);
                        }
                        if (object.new_diversifier != null)
                            message.new_diversifier = String(object.new_diversifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Header message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.Header} message Header
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Header.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.new_public_key = null;
                            object.new_diversifier = "";
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.new_public_key != null && message.hasOwnProperty("new_public_key"))
                            object.new_public_key = $root.google.protobuf.Any.toObject(message.new_public_key, options);
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            object.new_diversifier = message.new_diversifier;
                        return object;
                    };

                    /**
                     * Converts this Header to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Header.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Header;
                })();

                v2.Misbehaviour = (function() {

                    /**
                     * Properties of a Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IMisbehaviour
                     * @property {string|null} [client_id] Misbehaviour client_id
                     * @property {Long|null} [sequence] Misbehaviour sequence
                     * @property {ibc.lightclients.solomachine.v2.ISignatureAndData|null} [signature_one] Misbehaviour signature_one
                     * @property {ibc.lightclients.solomachine.v2.ISignatureAndData|null} [signature_two] Misbehaviour signature_two
                     */

                    /**
                     * Constructs a new Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a Misbehaviour.
                     * @implements IMisbehaviour
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IMisbehaviour=} [properties] Properties to set
                     */
                    function Misbehaviour(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Misbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.client_id = "";

                    /**
                     * Misbehaviour sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Misbehaviour signature_one.
                     * @member {ibc.lightclients.solomachine.v2.ISignatureAndData|null|undefined} signature_one
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_one = null;

                    /**
                     * Misbehaviour signature_two.
                     * @member {ibc.lightclients.solomachine.v2.ISignatureAndData|null|undefined} signature_two
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_two = null;

                    /**
                     * Encodes the specified Misbehaviour message. Does not implicitly {@link ibc.lightclients.solomachine.v2.Misbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.sequence);
                        if (message.signature_one != null && Object.hasOwnProperty.call(message, "signature_one"))
                            $root.ibc.lightclients.solomachine.v2.SignatureAndData.encode(message.signature_one, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.signature_two != null && Object.hasOwnProperty.call(message, "signature_two"))
                            $root.ibc.lightclients.solomachine.v2.SignatureAndData.encode(message.signature_two, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Misbehaviour message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.Misbehaviour.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.Misbehaviour();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.sequence = reader.uint64();
                                break;
                            case 3:
                                message.signature_one = $root.ibc.lightclients.solomachine.v2.SignatureAndData.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.signature_two = $root.ibc.lightclients.solomachine.v2.SignatureAndData.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Misbehaviour message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Misbehaviour.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.signature_one != null && message.hasOwnProperty("signature_one")) {
                            let error = $root.ibc.lightclients.solomachine.v2.SignatureAndData.verify(message.signature_one);
                            if (error)
                                return "signature_one." + error;
                        }
                        if (message.signature_two != null && message.hasOwnProperty("signature_two")) {
                            let error = $root.ibc.lightclients.solomachine.v2.SignatureAndData.verify(message.signature_two);
                            if (error)
                                return "signature_two." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Misbehaviour message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.Misbehaviour} Misbehaviour
                     */
                    Misbehaviour.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.Misbehaviour)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.Misbehaviour();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.signature_one != null) {
                            if (typeof object.signature_one !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.Misbehaviour.signature_one: object expected");
                            message.signature_one = $root.ibc.lightclients.solomachine.v2.SignatureAndData.fromObject(object.signature_one);
                        }
                        if (object.signature_two != null) {
                            if (typeof object.signature_two !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.Misbehaviour.signature_two: object expected");
                            message.signature_two = $root.ibc.lightclients.solomachine.v2.SignatureAndData.fromObject(object.signature_two);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Misbehaviour message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.Misbehaviour} message Misbehaviour
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Misbehaviour.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            object.signature_one = null;
                            object.signature_two = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.signature_one != null && message.hasOwnProperty("signature_one"))
                            object.signature_one = $root.ibc.lightclients.solomachine.v2.SignatureAndData.toObject(message.signature_one, options);
                        if (message.signature_two != null && message.hasOwnProperty("signature_two"))
                            object.signature_two = $root.ibc.lightclients.solomachine.v2.SignatureAndData.toObject(message.signature_two, options);
                        return object;
                    };

                    /**
                     * Converts this Misbehaviour to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Misbehaviour.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Misbehaviour;
                })();

                v2.SignatureAndData = (function() {

                    /**
                     * Properties of a SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface ISignatureAndData
                     * @property {Uint8Array|null} [signature] SignatureAndData signature
                     * @property {ibc.lightclients.solomachine.v2.DataType|null} [data_type] SignatureAndData data_type
                     * @property {Uint8Array|null} [data] SignatureAndData data
                     * @property {Long|null} [timestamp] SignatureAndData timestamp
                     */

                    /**
                     * Constructs a new SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a SignatureAndData.
                     * @implements ISignatureAndData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.ISignatureAndData=} [properties] Properties to set
                     */
                    function SignatureAndData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SignatureAndData signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.signature = $util.newBuffer([]);

                    /**
                     * SignatureAndData data_type.
                     * @member {ibc.lightclients.solomachine.v2.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data_type = 0;

                    /**
                     * SignatureAndData data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data = $util.newBuffer([]);

                    /**
                     * SignatureAndData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified SignatureAndData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.SignatureAndData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ISignatureAndData} message SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature);
                        if (message.data_type != null && Object.hasOwnProperty.call(message, "data_type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.data_type);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified SignatureAndData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.SignatureAndData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ISignatureAndData} message SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.SignatureAndData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signature = reader.bytes();
                                break;
                            case 2:
                                message.data_type = reader.int32();
                                break;
                            case 3:
                                message.data = reader.bytes();
                                break;
                            case 4:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SignatureAndData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SignatureAndData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            switch (message.data_type) {
                            default:
                                return "data_type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a SignatureAndData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.SignatureAndData} SignatureAndData
                     */
                    SignatureAndData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.SignatureAndData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.SignatureAndData();
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length)
                                message.signature = object.signature;
                        switch (object.data_type) {
                        case "DATA_TYPE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.data_type = 0;
                            break;
                        case "DATA_TYPE_CLIENT_STATE":
                        case 1:
                            message.data_type = 1;
                            break;
                        case "DATA_TYPE_CONSENSUS_STATE":
                        case 2:
                            message.data_type = 2;
                            break;
                        case "DATA_TYPE_CONNECTION_STATE":
                        case 3:
                            message.data_type = 3;
                            break;
                        case "DATA_TYPE_CHANNEL_STATE":
                        case 4:
                            message.data_type = 4;
                            break;
                        case "DATA_TYPE_PACKET_COMMITMENT":
                        case 5:
                            message.data_type = 5;
                            break;
                        case "DATA_TYPE_PACKET_ACKNOWLEDGEMENT":
                        case 6:
                            message.data_type = 6;
                            break;
                        case "DATA_TYPE_PACKET_RECEIPT_ABSENCE":
                        case 7:
                            message.data_type = 7;
                            break;
                        case "DATA_TYPE_NEXT_SEQUENCE_RECV":
                        case 8:
                            message.data_type = 8;
                            break;
                        case "DATA_TYPE_HEADER":
                        case 9:
                            message.data_type = 9;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a SignatureAndData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.SignatureAndData} message SignatureAndData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SignatureAndData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.data_type = options.enums === String ? "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            object.data_type = options.enums === String ? $root.ibc.lightclients.solomachine.v2.DataType[message.data_type] : message.data_type;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this SignatureAndData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SignatureAndData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SignatureAndData;
                })();

                v2.TimestampedSignatureData = (function() {

                    /**
                     * Properties of a TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface ITimestampedSignatureData
                     * @property {Uint8Array|null} [signature_data] TimestampedSignatureData signature_data
                     * @property {Long|null} [timestamp] TimestampedSignatureData timestamp
                     */

                    /**
                     * Constructs a new TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a TimestampedSignatureData.
                     * @implements ITimestampedSignatureData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.ITimestampedSignatureData=} [properties] Properties to set
                     */
                    function TimestampedSignatureData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TimestampedSignatureData signature_data.
                     * @member {Uint8Array} signature_data
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.signature_data = $util.newBuffer([]);

                    /**
                     * TimestampedSignatureData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified TimestampedSignatureData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.TimestampedSignatureData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ITimestampedSignatureData} message TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature_data != null && Object.hasOwnProperty.call(message, "signature_data"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature_data);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified TimestampedSignatureData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.TimestampedSignatureData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ITimestampedSignatureData} message TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.TimestampedSignatureData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signature_data = reader.bytes();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TimestampedSignatureData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TimestampedSignatureData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                            if (!(message.signature_data && typeof message.signature_data.length === "number" || $util.isString(message.signature_data)))
                                return "signature_data: buffer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a TimestampedSignatureData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.TimestampedSignatureData} TimestampedSignatureData
                     */
                    TimestampedSignatureData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.TimestampedSignatureData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.TimestampedSignatureData();
                        if (object.signature_data != null)
                            if (typeof object.signature_data === "string")
                                $util.base64.decode(object.signature_data, message.signature_data = $util.newBuffer($util.base64.length(object.signature_data)), 0);
                            else if (object.signature_data.length)
                                message.signature_data = object.signature_data;
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TimestampedSignatureData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.TimestampedSignatureData} message TimestampedSignatureData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TimestampedSignatureData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.signature_data = "";
                            else {
                                object.signature_data = [];
                                if (options.bytes !== Array)
                                    object.signature_data = $util.newBuffer(object.signature_data);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                            object.signature_data = options.bytes === String ? $util.base64.encode(message.signature_data, 0, message.signature_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature_data) : message.signature_data;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this TimestampedSignatureData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TimestampedSignatureData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TimestampedSignatureData;
                })();

                v2.SignBytes = (function() {

                    /**
                     * Properties of a SignBytes.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface ISignBytes
                     * @property {Long|null} [sequence] SignBytes sequence
                     * @property {Long|null} [timestamp] SignBytes timestamp
                     * @property {string|null} [diversifier] SignBytes diversifier
                     * @property {ibc.lightclients.solomachine.v2.DataType|null} [data_type] SignBytes data_type
                     * @property {Uint8Array|null} [data] SignBytes data
                     */

                    /**
                     * Constructs a new SignBytes.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a SignBytes.
                     * @implements ISignBytes
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.ISignBytes=} [properties] Properties to set
                     */
                    function SignBytes(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SignBytes sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * SignBytes timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * SignBytes diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.diversifier = "";

                    /**
                     * SignBytes data_type.
                     * @member {ibc.lightclients.solomachine.v2.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data_type = 0;

                    /**
                     * SignBytes data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified SignBytes message. Does not implicitly {@link ibc.lightclients.solomachine.v2.SignBytes.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ISignBytes} message SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        if (message.diversifier != null && Object.hasOwnProperty.call(message, "diversifier"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.diversifier);
                        if (message.data_type != null && Object.hasOwnProperty.call(message, "data_type"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.data_type);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.data);
                        return writer;
                    };

                    /**
                     * Encodes the specified SignBytes message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.SignBytes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ISignBytes} message SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.SignBytes();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            case 3:
                                message.diversifier = reader.string();
                                break;
                            case 4:
                                message.data_type = reader.int32();
                                break;
                            case 5:
                                message.data = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SignBytes message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SignBytes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            if (!$util.isString(message.diversifier))
                                return "diversifier: string expected";
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            switch (message.data_type) {
                            default:
                                return "data_type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a SignBytes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.SignBytes} SignBytes
                     */
                    SignBytes.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.SignBytes)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.SignBytes();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        if (object.diversifier != null)
                            message.diversifier = String(object.diversifier);
                        switch (object.data_type) {
                        case "DATA_TYPE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.data_type = 0;
                            break;
                        case "DATA_TYPE_CLIENT_STATE":
                        case 1:
                            message.data_type = 1;
                            break;
                        case "DATA_TYPE_CONSENSUS_STATE":
                        case 2:
                            message.data_type = 2;
                            break;
                        case "DATA_TYPE_CONNECTION_STATE":
                        case 3:
                            message.data_type = 3;
                            break;
                        case "DATA_TYPE_CHANNEL_STATE":
                        case 4:
                            message.data_type = 4;
                            break;
                        case "DATA_TYPE_PACKET_COMMITMENT":
                        case 5:
                            message.data_type = 5;
                            break;
                        case "DATA_TYPE_PACKET_ACKNOWLEDGEMENT":
                        case 6:
                            message.data_type = 6;
                            break;
                        case "DATA_TYPE_PACKET_RECEIPT_ABSENCE":
                        case 7:
                            message.data_type = 7;
                            break;
                        case "DATA_TYPE_NEXT_SEQUENCE_RECV":
                        case 8:
                            message.data_type = 8;
                            break;
                        case "DATA_TYPE_HEADER":
                        case 9:
                            message.data_type = 9;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        return message;
                    };

                    /**
                     * Creates a plain object from a SignBytes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.SignBytes} message SignBytes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SignBytes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            object.diversifier = "";
                            object.data_type = options.enums === String ? "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            object.diversifier = message.diversifier;
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            object.data_type = options.enums === String ? $root.ibc.lightclients.solomachine.v2.DataType[message.data_type] : message.data_type;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        return object;
                    };

                    /**
                     * Converts this SignBytes to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SignBytes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SignBytes;
                })();

                /**
                 * DataType enum.
                 * @name ibc.lightclients.solomachine.v2.DataType
                 * @enum {number}
                 * @property {number} DATA_TYPE_UNINITIALIZED_UNSPECIFIED=0 DATA_TYPE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} DATA_TYPE_CLIENT_STATE=1 DATA_TYPE_CLIENT_STATE value
                 * @property {number} DATA_TYPE_CONSENSUS_STATE=2 DATA_TYPE_CONSENSUS_STATE value
                 * @property {number} DATA_TYPE_CONNECTION_STATE=3 DATA_TYPE_CONNECTION_STATE value
                 * @property {number} DATA_TYPE_CHANNEL_STATE=4 DATA_TYPE_CHANNEL_STATE value
                 * @property {number} DATA_TYPE_PACKET_COMMITMENT=5 DATA_TYPE_PACKET_COMMITMENT value
                 * @property {number} DATA_TYPE_PACKET_ACKNOWLEDGEMENT=6 DATA_TYPE_PACKET_ACKNOWLEDGEMENT value
                 * @property {number} DATA_TYPE_PACKET_RECEIPT_ABSENCE=7 DATA_TYPE_PACKET_RECEIPT_ABSENCE value
                 * @property {number} DATA_TYPE_NEXT_SEQUENCE_RECV=8 DATA_TYPE_NEXT_SEQUENCE_RECV value
                 * @property {number} DATA_TYPE_HEADER=9 DATA_TYPE_HEADER value
                 */
                v2.DataType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DATA_TYPE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DATA_TYPE_CLIENT_STATE"] = 1;
                    values[valuesById[2] = "DATA_TYPE_CONSENSUS_STATE"] = 2;
                    values[valuesById[3] = "DATA_TYPE_CONNECTION_STATE"] = 3;
                    values[valuesById[4] = "DATA_TYPE_CHANNEL_STATE"] = 4;
                    values[valuesById[5] = "DATA_TYPE_PACKET_COMMITMENT"] = 5;
                    values[valuesById[6] = "DATA_TYPE_PACKET_ACKNOWLEDGEMENT"] = 6;
                    values[valuesById[7] = "DATA_TYPE_PACKET_RECEIPT_ABSENCE"] = 7;
                    values[valuesById[8] = "DATA_TYPE_NEXT_SEQUENCE_RECV"] = 8;
                    values[valuesById[9] = "DATA_TYPE_HEADER"] = 9;
                    return values;
                })();

                v2.HeaderData = (function() {

                    /**
                     * Properties of a HeaderData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IHeaderData
                     * @property {google.protobuf.IAny|null} [new_pub_key] HeaderData new_pub_key
                     * @property {string|null} [new_diversifier] HeaderData new_diversifier
                     */

                    /**
                     * Constructs a new HeaderData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a HeaderData.
                     * @implements IHeaderData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IHeaderData=} [properties] Properties to set
                     */
                    function HeaderData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * HeaderData new_pub_key.
                     * @member {google.protobuf.IAny|null|undefined} new_pub_key
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_pub_key = null;

                    /**
                     * HeaderData new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified HeaderData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.HeaderData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IHeaderData} message HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.new_pub_key != null && Object.hasOwnProperty.call(message, "new_pub_key"))
                            $root.google.protobuf.Any.encode(message.new_pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.new_diversifier != null && Object.hasOwnProperty.call(message, "new_diversifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.new_diversifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified HeaderData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.HeaderData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IHeaderData} message HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.HeaderData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.new_pub_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.new_diversifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a HeaderData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HeaderData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.new_pub_key != null && message.hasOwnProperty("new_pub_key")) {
                            let error = $root.google.protobuf.Any.verify(message.new_pub_key);
                            if (error)
                                return "new_pub_key." + error;
                        }
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            if (!$util.isString(message.new_diversifier))
                                return "new_diversifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a HeaderData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.HeaderData} HeaderData
                     */
                    HeaderData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.HeaderData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.HeaderData();
                        if (object.new_pub_key != null) {
                            if (typeof object.new_pub_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.HeaderData.new_pub_key: object expected");
                            message.new_pub_key = $root.google.protobuf.Any.fromObject(object.new_pub_key);
                        }
                        if (object.new_diversifier != null)
                            message.new_diversifier = String(object.new_diversifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a HeaderData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.HeaderData} message HeaderData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HeaderData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.new_pub_key = null;
                            object.new_diversifier = "";
                        }
                        if (message.new_pub_key != null && message.hasOwnProperty("new_pub_key"))
                            object.new_pub_key = $root.google.protobuf.Any.toObject(message.new_pub_key, options);
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            object.new_diversifier = message.new_diversifier;
                        return object;
                    };

                    /**
                     * Converts this HeaderData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HeaderData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return HeaderData;
                })();

                v2.ClientStateData = (function() {

                    /**
                     * Properties of a ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IClientStateData
                     * @property {Uint8Array|null} [path] ClientStateData path
                     * @property {google.protobuf.IAny|null} [client_state] ClientStateData client_state
                     */

                    /**
                     * Constructs a new ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ClientStateData.
                     * @implements IClientStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IClientStateData=} [properties] Properties to set
                     */
                    function ClientStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ClientStateData client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.client_state = null;

                    /**
                     * Encodes the specified ClientStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ClientStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IClientStateData} message ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ClientStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IClientStateData} message ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ClientStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ClientStateData} ClientStateData
                     */
                    ClientStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ClientStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ClientStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ClientStateData.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ClientStateData} message ClientStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.client_state = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        return object;
                    };

                    /**
                     * Converts this ClientStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientStateData;
                })();

                v2.ConsensusStateData = (function() {

                    /**
                     * Properties of a ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IConsensusStateData
                     * @property {Uint8Array|null} [path] ConsensusStateData path
                     * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateData consensus_state
                     */

                    /**
                     * Constructs a new ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ConsensusStateData.
                     * @implements IConsensusStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IConsensusStateData=} [properties] Properties to set
                     */
                    function ConsensusStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConsensusStateData consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.consensus_state = null;

                    /**
                     * Encodes the specified ConsensusStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConsensusStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConsensusStateData} message ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConsensusStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConsensusStateData} message ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ConsensusStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConsensusStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusStateData} ConsensusStateData
                     */
                    ConsensusStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ConsensusStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ConsensusStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ConsensusStateData} message ConsensusStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.consensus_state = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        return object;
                    };

                    /**
                     * Converts this ConsensusStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusStateData;
                })();

                v2.ConnectionStateData = (function() {

                    /**
                     * Properties of a ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IConnectionStateData
                     * @property {Uint8Array|null} [path] ConnectionStateData path
                     * @property {ibc.core.connection.v1.IConnectionEnd|null} [connection] ConnectionStateData connection
                     */

                    /**
                     * Constructs a new ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ConnectionStateData.
                     * @implements IConnectionStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IConnectionStateData=} [properties] Properties to set
                     */
                    function ConnectionStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConnectionStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConnectionStateData connection.
                     * @member {ibc.core.connection.v1.IConnectionEnd|null|undefined} connection
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.connection = null;

                    /**
                     * Encodes the specified ConnectionStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConnectionStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConnectionStateData} message ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.connection != null && Object.hasOwnProperty.call(message, "connection"))
                            $root.ibc.core.connection.v1.ConnectionEnd.encode(message.connection, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConnectionStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConnectionStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConnectionStateData} message ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ConnectionStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.connection = $root.ibc.core.connection.v1.ConnectionEnd.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConnectionStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectionStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.connection != null && message.hasOwnProperty("connection")) {
                            let error = $root.ibc.core.connection.v1.ConnectionEnd.verify(message.connection);
                            if (error)
                                return "connection." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConnectionStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ConnectionStateData} ConnectionStateData
                     */
                    ConnectionStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ConnectionStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ConnectionStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.connection != null) {
                            if (typeof object.connection !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ConnectionStateData.connection: object expected");
                            message.connection = $root.ibc.core.connection.v1.ConnectionEnd.fromObject(object.connection);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConnectionStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ConnectionStateData} message ConnectionStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectionStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.connection = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            object.connection = $root.ibc.core.connection.v1.ConnectionEnd.toObject(message.connection, options);
                        return object;
                    };

                    /**
                     * Converts this ConnectionStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectionStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConnectionStateData;
                })();

                v2.ChannelStateData = (function() {

                    /**
                     * Properties of a ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IChannelStateData
                     * @property {Uint8Array|null} [path] ChannelStateData path
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] ChannelStateData channel
                     */

                    /**
                     * Constructs a new ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ChannelStateData.
                     * @implements IChannelStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IChannelStateData=} [properties] Properties to set
                     */
                    function ChannelStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ChannelStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ChannelStateData channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.channel = null;

                    /**
                     * Encodes the specified ChannelStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ChannelStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IChannelStateData} message ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ChannelStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ChannelStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IChannelStateData} message ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ChannelStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ChannelStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ChannelStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ChannelStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ChannelStateData} ChannelStateData
                     */
                    ChannelStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ChannelStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ChannelStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ChannelStateData.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ChannelStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ChannelStateData} message ChannelStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ChannelStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.channel = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        return object;
                    };

                    /**
                     * Converts this ChannelStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ChannelStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ChannelStateData;
                })();

                v2.PacketCommitmentData = (function() {

                    /**
                     * Properties of a PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IPacketCommitmentData
                     * @property {Uint8Array|null} [path] PacketCommitmentData path
                     * @property {Uint8Array|null} [commitment] PacketCommitmentData commitment
                     */

                    /**
                     * Constructs a new PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a PacketCommitmentData.
                     * @implements IPacketCommitmentData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IPacketCommitmentData=} [properties] Properties to set
                     */
                    function PacketCommitmentData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketCommitmentData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketCommitmentData commitment.
                     * @member {Uint8Array} commitment
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.commitment = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketCommitmentData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketCommitmentData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketCommitmentData} message PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.commitment != null && Object.hasOwnProperty.call(message, "commitment"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.commitment);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketCommitmentData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketCommitmentData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketCommitmentData} message PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.PacketCommitmentData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.commitment = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketCommitmentData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketCommitmentData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            if (!(message.commitment && typeof message.commitment.length === "number" || $util.isString(message.commitment)))
                                return "commitment: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketCommitmentData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.PacketCommitmentData} PacketCommitmentData
                     */
                    PacketCommitmentData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.PacketCommitmentData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.PacketCommitmentData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.commitment != null)
                            if (typeof object.commitment === "string")
                                $util.base64.decode(object.commitment, message.commitment = $util.newBuffer($util.base64.length(object.commitment)), 0);
                            else if (object.commitment.length)
                                message.commitment = object.commitment;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketCommitmentData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.PacketCommitmentData} message PacketCommitmentData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketCommitmentData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if (options.bytes === String)
                                object.commitment = "";
                            else {
                                object.commitment = [];
                                if (options.bytes !== Array)
                                    object.commitment = $util.newBuffer(object.commitment);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            object.commitment = options.bytes === String ? $util.base64.encode(message.commitment, 0, message.commitment.length) : options.bytes === Array ? Array.prototype.slice.call(message.commitment) : message.commitment;
                        return object;
                    };

                    /**
                     * Converts this PacketCommitmentData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketCommitmentData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketCommitmentData;
                })();

                v2.PacketAcknowledgementData = (function() {

                    /**
                     * Properties of a PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IPacketAcknowledgementData
                     * @property {Uint8Array|null} [path] PacketAcknowledgementData path
                     * @property {Uint8Array|null} [acknowledgement] PacketAcknowledgementData acknowledgement
                     */

                    /**
                     * Constructs a new PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a PacketAcknowledgementData.
                     * @implements IPacketAcknowledgementData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IPacketAcknowledgementData=} [properties] Properties to set
                     */
                    function PacketAcknowledgementData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketAcknowledgementData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketAcknowledgementData acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketAcknowledgementData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketAcknowledgementData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketAcknowledgementData} message PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.acknowledgement != null && Object.hasOwnProperty.call(message, "acknowledgement"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.acknowledgement);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketAcknowledgementData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketAcknowledgementData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketAcknowledgementData} message PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.PacketAcknowledgementData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.acknowledgement = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketAcknowledgementData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketAcknowledgementData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            if (!(message.acknowledgement && typeof message.acknowledgement.length === "number" || $util.isString(message.acknowledgement)))
                                return "acknowledgement: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketAcknowledgementData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.PacketAcknowledgementData} PacketAcknowledgementData
                     */
                    PacketAcknowledgementData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.PacketAcknowledgementData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.acknowledgement != null)
                            if (typeof object.acknowledgement === "string")
                                $util.base64.decode(object.acknowledgement, message.acknowledgement = $util.newBuffer($util.base64.length(object.acknowledgement)), 0);
                            else if (object.acknowledgement.length)
                                message.acknowledgement = object.acknowledgement;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketAcknowledgementData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.PacketAcknowledgementData} message PacketAcknowledgementData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketAcknowledgementData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if (options.bytes === String)
                                object.acknowledgement = "";
                            else {
                                object.acknowledgement = [];
                                if (options.bytes !== Array)
                                    object.acknowledgement = $util.newBuffer(object.acknowledgement);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            object.acknowledgement = options.bytes === String ? $util.base64.encode(message.acknowledgement, 0, message.acknowledgement.length) : options.bytes === Array ? Array.prototype.slice.call(message.acknowledgement) : message.acknowledgement;
                        return object;
                    };

                    /**
                     * Converts this PacketAcknowledgementData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketAcknowledgementData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketAcknowledgementData;
                })();

                v2.PacketReceiptAbsenceData = (function() {

                    /**
                     * Properties of a PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IPacketReceiptAbsenceData
                     * @property {Uint8Array|null} [path] PacketReceiptAbsenceData path
                     */

                    /**
                     * Constructs a new PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a PacketReceiptAbsenceData.
                     * @implements IPacketReceiptAbsenceData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IPacketReceiptAbsenceData=} [properties] Properties to set
                     */
                    function PacketReceiptAbsenceData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketReceiptAbsenceData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @instance
                     */
                    PacketReceiptAbsenceData.prototype.path = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketReceiptAbsenceData} message PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketReceiptAbsenceData} message PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketReceiptAbsenceData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketReceiptAbsenceData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketReceiptAbsenceData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     */
                    PacketReceiptAbsenceData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketReceiptAbsenceData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData} message PacketReceiptAbsenceData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketReceiptAbsenceData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        return object;
                    };

                    /**
                     * Converts this PacketReceiptAbsenceData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketReceiptAbsenceData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketReceiptAbsenceData;
                })();

                v2.NextSequenceRecvData = (function() {

                    /**
                     * Properties of a NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface INextSequenceRecvData
                     * @property {Uint8Array|null} [path] NextSequenceRecvData path
                     * @property {Long|null} [next_seq_recv] NextSequenceRecvData next_seq_recv
                     */

                    /**
                     * Constructs a new NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a NextSequenceRecvData.
                     * @implements INextSequenceRecvData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.INextSequenceRecvData=} [properties] Properties to set
                     */
                    function NextSequenceRecvData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NextSequenceRecvData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.path = $util.newBuffer([]);

                    /**
                     * NextSequenceRecvData next_seq_recv.
                     * @member {Long} next_seq_recv
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.next_seq_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified NextSequenceRecvData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.NextSequenceRecvData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.INextSequenceRecvData} message NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.next_seq_recv != null && Object.hasOwnProperty.call(message, "next_seq_recv"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.next_seq_recv);
                        return writer;
                    };

                    /**
                     * Encodes the specified NextSequenceRecvData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.NextSequenceRecvData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.INextSequenceRecvData} message NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.NextSequenceRecvData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.next_seq_recv = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NextSequenceRecvData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NextSequenceRecvData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.next_seq_recv != null && message.hasOwnProperty("next_seq_recv"))
                            if (!$util.isInteger(message.next_seq_recv) && !(message.next_seq_recv && $util.isInteger(message.next_seq_recv.low) && $util.isInteger(message.next_seq_recv.high)))
                                return "next_seq_recv: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a NextSequenceRecvData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.NextSequenceRecvData} NextSequenceRecvData
                     */
                    NextSequenceRecvData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.NextSequenceRecvData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.NextSequenceRecvData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.next_seq_recv != null)
                            if ($util.Long)
                                (message.next_seq_recv = $util.Long.fromValue(object.next_seq_recv)).unsigned = true;
                            else if (typeof object.next_seq_recv === "string")
                                message.next_seq_recv = parseInt(object.next_seq_recv, 10);
                            else if (typeof object.next_seq_recv === "number")
                                message.next_seq_recv = object.next_seq_recv;
                            else if (typeof object.next_seq_recv === "object")
                                message.next_seq_recv = new $util.LongBits(object.next_seq_recv.low >>> 0, object.next_seq_recv.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a NextSequenceRecvData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.NextSequenceRecvData} message NextSequenceRecvData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NextSequenceRecvData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_seq_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_seq_recv = options.longs === String ? "0" : 0;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.next_seq_recv != null && message.hasOwnProperty("next_seq_recv"))
                            if (typeof message.next_seq_recv === "number")
                                object.next_seq_recv = options.longs === String ? String(message.next_seq_recv) : message.next_seq_recv;
                            else
                                object.next_seq_recv = options.longs === String ? $util.Long.prototype.toString.call(message.next_seq_recv) : options.longs === Number ? new $util.LongBits(message.next_seq_recv.low >>> 0, message.next_seq_recv.high >>> 0).toNumber(true) : message.next_seq_recv;
                        return object;
                    };

                    /**
                     * Converts this NextSequenceRecvData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NextSequenceRecvData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return NextSequenceRecvData;
                })();

                return v2;
            })();

            return solomachine;
        })();

        lightclients.tendermint = (function() {

            /**
             * Namespace tendermint.
             * @memberof ibc.lightclients
             * @namespace
             */
            const tendermint = {};

            tendermint.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.tendermint
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function() {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IClientState
                     * @property {string|null} [chain_id] ClientState chain_id
                     * @property {ibc.lightclients.tendermint.v1.IFraction|null} [trust_level] ClientState trust_level
                     * @property {google.protobuf.IDuration|null} [trusting_period] ClientState trusting_period
                     * @property {google.protobuf.IDuration|null} [unbonding_period] ClientState unbonding_period
                     * @property {google.protobuf.IDuration|null} [max_clock_drift] ClientState max_clock_drift
                     * @property {ibc.core.client.v1.IHeight|null} [frozen_height] ClientState frozen_height
                     * @property {ibc.core.client.v1.IHeight|null} [latest_height] ClientState latest_height
                     * @property {Array.<ics23.IProofSpec>|null} [proof_specs] ClientState proof_specs
                     * @property {Array.<string>|null} [upgrade_path] ClientState upgrade_path
                     * @property {boolean|null} [allow_update_after_expiry] ClientState allow_update_after_expiry
                     * @property {boolean|null} [allow_update_after_misbehaviour] ClientState allow_update_after_misbehaviour
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IClientState=} [properties] Properties to set
                     */
                    function ClientState(properties) {
                        this.proof_specs = [];
                        this.upgrade_path = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientState chain_id.
                     * @member {string} chain_id
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.chain_id = "";

                    /**
                     * ClientState trust_level.
                     * @member {ibc.lightclients.tendermint.v1.IFraction|null|undefined} trust_level
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.trust_level = null;

                    /**
                     * ClientState trusting_period.
                     * @member {google.protobuf.IDuration|null|undefined} trusting_period
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.trusting_period = null;

                    /**
                     * ClientState unbonding_period.
                     * @member {google.protobuf.IDuration|null|undefined} unbonding_period
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.unbonding_period = null;

                    /**
                     * ClientState max_clock_drift.
                     * @member {google.protobuf.IDuration|null|undefined} max_clock_drift
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.max_clock_drift = null;

                    /**
                     * ClientState frozen_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} frozen_height
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.frozen_height = null;

                    /**
                     * ClientState latest_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} latest_height
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.latest_height = null;

                    /**
                     * ClientState proof_specs.
                     * @member {Array.<ics23.IProofSpec>} proof_specs
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.proof_specs = $util.emptyArray;

                    /**
                     * ClientState upgrade_path.
                     * @member {Array.<string>} upgrade_path
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.upgrade_path = $util.emptyArray;

                    /**
                     * ClientState allow_update_after_expiry.
                     * @member {boolean} allow_update_after_expiry
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_expiry = false;

                    /**
                     * ClientState allow_update_after_misbehaviour.
                     * @member {boolean} allow_update_after_misbehaviour
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_misbehaviour = false;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.tendermint.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                        if (message.trust_level != null && Object.hasOwnProperty.call(message, "trust_level"))
                            $root.ibc.lightclients.tendermint.v1.Fraction.encode(message.trust_level, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.trusting_period != null && Object.hasOwnProperty.call(message, "trusting_period"))
                            $root.google.protobuf.Duration.encode(message.trusting_period, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.unbonding_period != null && Object.hasOwnProperty.call(message, "unbonding_period"))
                            $root.google.protobuf.Duration.encode(message.unbonding_period, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.max_clock_drift != null && Object.hasOwnProperty.call(message, "max_clock_drift"))
                            $root.google.protobuf.Duration.encode(message.max_clock_drift, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.frozen_height != null && Object.hasOwnProperty.call(message, "frozen_height"))
                            $root.ibc.core.client.v1.Height.encode(message.frozen_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.latest_height != null && Object.hasOwnProperty.call(message, "latest_height"))
                            $root.ibc.core.client.v1.Height.encode(message.latest_height, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.proof_specs != null && message.proof_specs.length)
                            for (let i = 0; i < message.proof_specs.length; ++i)
                                $root.ics23.ProofSpec.encode(message.proof_specs[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.upgrade_path != null && message.upgrade_path.length)
                            for (let i = 0; i < message.upgrade_path.length; ++i)
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.upgrade_path[i]);
                        if (message.allow_update_after_expiry != null && Object.hasOwnProperty.call(message, "allow_update_after_expiry"))
                            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.allow_update_after_expiry);
                        if (message.allow_update_after_misbehaviour != null && Object.hasOwnProperty.call(message, "allow_update_after_misbehaviour"))
                            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.allow_update_after_misbehaviour);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientState message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.ClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.ClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.chain_id = reader.string();
                                break;
                            case 2:
                                message.trust_level = $root.ibc.lightclients.tendermint.v1.Fraction.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.trusting_period = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.unbonding_period = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.max_clock_drift = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.frozen_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.latest_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 8:
                                if (!(message.proof_specs && message.proof_specs.length))
                                    message.proof_specs = [];
                                message.proof_specs.push($root.ics23.ProofSpec.decode(reader, reader.uint32()));
                                break;
                            case 9:
                                if (!(message.upgrade_path && message.upgrade_path.length))
                                    message.upgrade_path = [];
                                message.upgrade_path.push(reader.string());
                                break;
                            case 10:
                                message.allow_update_after_expiry = reader.bool();
                                break;
                            case 11:
                                message.allow_update_after_misbehaviour = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientState message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                            if (!$util.isString(message.chain_id))
                                return "chain_id: string expected";
                        if (message.trust_level != null && message.hasOwnProperty("trust_level")) {
                            let error = $root.ibc.lightclients.tendermint.v1.Fraction.verify(message.trust_level);
                            if (error)
                                return "trust_level." + error;
                        }
                        if (message.trusting_period != null && message.hasOwnProperty("trusting_period")) {
                            let error = $root.google.protobuf.Duration.verify(message.trusting_period);
                            if (error)
                                return "trusting_period." + error;
                        }
                        if (message.unbonding_period != null && message.hasOwnProperty("unbonding_period")) {
                            let error = $root.google.protobuf.Duration.verify(message.unbonding_period);
                            if (error)
                                return "unbonding_period." + error;
                        }
                        if (message.max_clock_drift != null && message.hasOwnProperty("max_clock_drift")) {
                            let error = $root.google.protobuf.Duration.verify(message.max_clock_drift);
                            if (error)
                                return "max_clock_drift." + error;
                        }
                        if (message.frozen_height != null && message.hasOwnProperty("frozen_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.frozen_height);
                            if (error)
                                return "frozen_height." + error;
                        }
                        if (message.latest_height != null && message.hasOwnProperty("latest_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.latest_height);
                            if (error)
                                return "latest_height." + error;
                        }
                        if (message.proof_specs != null && message.hasOwnProperty("proof_specs")) {
                            if (!Array.isArray(message.proof_specs))
                                return "proof_specs: array expected";
                            for (let i = 0; i < message.proof_specs.length; ++i) {
                                let error = $root.ics23.ProofSpec.verify(message.proof_specs[i]);
                                if (error)
                                    return "proof_specs." + error;
                            }
                        }
                        if (message.upgrade_path != null && message.hasOwnProperty("upgrade_path")) {
                            if (!Array.isArray(message.upgrade_path))
                                return "upgrade_path: array expected";
                            for (let i = 0; i < message.upgrade_path.length; ++i)
                                if (!$util.isString(message.upgrade_path[i]))
                                    return "upgrade_path: string[] expected";
                        }
                        if (message.allow_update_after_expiry != null && message.hasOwnProperty("allow_update_after_expiry"))
                            if (typeof message.allow_update_after_expiry !== "boolean")
                                return "allow_update_after_expiry: boolean expected";
                        if (message.allow_update_after_misbehaviour != null && message.hasOwnProperty("allow_update_after_misbehaviour"))
                            if (typeof message.allow_update_after_misbehaviour !== "boolean")
                                return "allow_update_after_misbehaviour: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a ClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.ClientState} ClientState
                     */
                    ClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.ClientState)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.ClientState();
                        if (object.chain_id != null)
                            message.chain_id = String(object.chain_id);
                        if (object.trust_level != null) {
                            if (typeof object.trust_level !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.trust_level: object expected");
                            message.trust_level = $root.ibc.lightclients.tendermint.v1.Fraction.fromObject(object.trust_level);
                        }
                        if (object.trusting_period != null) {
                            if (typeof object.trusting_period !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.trusting_period: object expected");
                            message.trusting_period = $root.google.protobuf.Duration.fromObject(object.trusting_period);
                        }
                        if (object.unbonding_period != null) {
                            if (typeof object.unbonding_period !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.unbonding_period: object expected");
                            message.unbonding_period = $root.google.protobuf.Duration.fromObject(object.unbonding_period);
                        }
                        if (object.max_clock_drift != null) {
                            if (typeof object.max_clock_drift !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.max_clock_drift: object expected");
                            message.max_clock_drift = $root.google.protobuf.Duration.fromObject(object.max_clock_drift);
                        }
                        if (object.frozen_height != null) {
                            if (typeof object.frozen_height !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.frozen_height: object expected");
                            message.frozen_height = $root.ibc.core.client.v1.Height.fromObject(object.frozen_height);
                        }
                        if (object.latest_height != null) {
                            if (typeof object.latest_height !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.latest_height: object expected");
                            message.latest_height = $root.ibc.core.client.v1.Height.fromObject(object.latest_height);
                        }
                        if (object.proof_specs) {
                            if (!Array.isArray(object.proof_specs))
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.proof_specs: array expected");
                            message.proof_specs = [];
                            for (let i = 0; i < object.proof_specs.length; ++i) {
                                if (typeof object.proof_specs[i] !== "object")
                                    throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.proof_specs: object expected");
                                message.proof_specs[i] = $root.ics23.ProofSpec.fromObject(object.proof_specs[i]);
                            }
                        }
                        if (object.upgrade_path) {
                            if (!Array.isArray(object.upgrade_path))
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.upgrade_path: array expected");
                            message.upgrade_path = [];
                            for (let i = 0; i < object.upgrade_path.length; ++i)
                                message.upgrade_path[i] = String(object.upgrade_path[i]);
                        }
                        if (object.allow_update_after_expiry != null)
                            message.allow_update_after_expiry = Boolean(object.allow_update_after_expiry);
                        if (object.allow_update_after_misbehaviour != null)
                            message.allow_update_after_misbehaviour = Boolean(object.allow_update_after_misbehaviour);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.ClientState} message ClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.proof_specs = [];
                            object.upgrade_path = [];
                        }
                        if (options.defaults) {
                            object.chain_id = "";
                            object.trust_level = null;
                            object.trusting_period = null;
                            object.unbonding_period = null;
                            object.max_clock_drift = null;
                            object.frozen_height = null;
                            object.latest_height = null;
                            object.allow_update_after_expiry = false;
                            object.allow_update_after_misbehaviour = false;
                        }
                        if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                            object.chain_id = message.chain_id;
                        if (message.trust_level != null && message.hasOwnProperty("trust_level"))
                            object.trust_level = $root.ibc.lightclients.tendermint.v1.Fraction.toObject(message.trust_level, options);
                        if (message.trusting_period != null && message.hasOwnProperty("trusting_period"))
                            object.trusting_period = $root.google.protobuf.Duration.toObject(message.trusting_period, options);
                        if (message.unbonding_period != null && message.hasOwnProperty("unbonding_period"))
                            object.unbonding_period = $root.google.protobuf.Duration.toObject(message.unbonding_period, options);
                        if (message.max_clock_drift != null && message.hasOwnProperty("max_clock_drift"))
                            object.max_clock_drift = $root.google.protobuf.Duration.toObject(message.max_clock_drift, options);
                        if (message.frozen_height != null && message.hasOwnProperty("frozen_height"))
                            object.frozen_height = $root.ibc.core.client.v1.Height.toObject(message.frozen_height, options);
                        if (message.latest_height != null && message.hasOwnProperty("latest_height"))
                            object.latest_height = $root.ibc.core.client.v1.Height.toObject(message.latest_height, options);
                        if (message.proof_specs && message.proof_specs.length) {
                            object.proof_specs = [];
                            for (let j = 0; j < message.proof_specs.length; ++j)
                                object.proof_specs[j] = $root.ics23.ProofSpec.toObject(message.proof_specs[j], options);
                        }
                        if (message.upgrade_path && message.upgrade_path.length) {
                            object.upgrade_path = [];
                            for (let j = 0; j < message.upgrade_path.length; ++j)
                                object.upgrade_path[j] = message.upgrade_path[j];
                        }
                        if (message.allow_update_after_expiry != null && message.hasOwnProperty("allow_update_after_expiry"))
                            object.allow_update_after_expiry = message.allow_update_after_expiry;
                        if (message.allow_update_after_misbehaviour != null && message.hasOwnProperty("allow_update_after_misbehaviour"))
                            object.allow_update_after_misbehaviour = message.allow_update_after_misbehaviour;
                        return object;
                    };

                    /**
                     * Converts this ClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientState;
                })();

                v1.ConsensusState = (function() {

                    /**
                     * Properties of a ConsensusState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IConsensusState
                     * @property {google.protobuf.ITimestamp|null} [timestamp] ConsensusState timestamp
                     * @property {ibc.core.commitment.v1.IMerkleRoot|null} [root] ConsensusState root
                     * @property {Uint8Array|null} [next_validators_hash] ConsensusState next_validators_hash
                     */

                    /**
                     * Constructs a new ConsensusState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a ConsensusState.
                     * @implements IConsensusState
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IConsensusState=} [properties] Properties to set
                     */
                    function ConsensusState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusState timestamp.
                     * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.timestamp = null;

                    /**
                     * ConsensusState root.
                     * @member {ibc.core.commitment.v1.IMerkleRoot|null|undefined} root
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.root = null;

                    /**
                     * ConsensusState next_validators_hash.
                     * @member {Uint8Array} next_validators_hash
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.next_validators_hash = $util.newBuffer([]);

                    /**
                     * Encodes the specified ConsensusState message. Does not implicitly {@link ibc.lightclients.tendermint.v1.ConsensusState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.root != null && Object.hasOwnProperty.call(message, "root"))
                            $root.ibc.core.commitment.v1.MerkleRoot.encode(message.root, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.next_validators_hash != null && Object.hasOwnProperty.call(message, "next_validators_hash"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.next_validators_hash);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusState message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.ConsensusState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.ConsensusState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.root = $root.ibc.core.commitment.v1.MerkleRoot.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.next_validators_hash = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusState message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                            let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                            if (error)
                                return "timestamp." + error;
                        }
                        if (message.root != null && message.hasOwnProperty("root")) {
                            let error = $root.ibc.core.commitment.v1.MerkleRoot.verify(message.root);
                            if (error)
                                return "root." + error;
                        }
                        if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                            if (!(message.next_validators_hash && typeof message.next_validators_hash.length === "number" || $util.isString(message.next_validators_hash)))
                                return "next_validators_hash: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a ConsensusState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.ConsensusState} ConsensusState
                     */
                    ConsensusState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.ConsensusState)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.ConsensusState();
                        if (object.timestamp != null) {
                            if (typeof object.timestamp !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ConsensusState.timestamp: object expected");
                            message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                        }
                        if (object.root != null) {
                            if (typeof object.root !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ConsensusState.root: object expected");
                            message.root = $root.ibc.core.commitment.v1.MerkleRoot.fromObject(object.root);
                        }
                        if (object.next_validators_hash != null)
                            if (typeof object.next_validators_hash === "string")
                                $util.base64.decode(object.next_validators_hash, message.next_validators_hash = $util.newBuffer($util.base64.length(object.next_validators_hash)), 0);
                            else if (object.next_validators_hash.length)
                                message.next_validators_hash = object.next_validators_hash;
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.ConsensusState} message ConsensusState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.timestamp = null;
                            object.root = null;
                            if (options.bytes === String)
                                object.next_validators_hash = "";
                            else {
                                object.next_validators_hash = [];
                                if (options.bytes !== Array)
                                    object.next_validators_hash = $util.newBuffer(object.next_validators_hash);
                            }
                        }
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                        if (message.root != null && message.hasOwnProperty("root"))
                            object.root = $root.ibc.core.commitment.v1.MerkleRoot.toObject(message.root, options);
                        if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                            object.next_validators_hash = options.bytes === String ? $util.base64.encode(message.next_validators_hash, 0, message.next_validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_validators_hash) : message.next_validators_hash;
                        return object;
                    };

                    /**
                     * Converts this ConsensusState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusState;
                })();

                v1.Misbehaviour = (function() {

                    /**
                     * Properties of a Misbehaviour.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IMisbehaviour
                     * @property {string|null} [client_id] Misbehaviour client_id
                     * @property {ibc.lightclients.tendermint.v1.IHeader|null} [header_1] Misbehaviour header_1
                     * @property {ibc.lightclients.tendermint.v1.IHeader|null} [header_2] Misbehaviour header_2
                     */

                    /**
                     * Constructs a new Misbehaviour.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Misbehaviour.
                     * @implements IMisbehaviour
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IMisbehaviour=} [properties] Properties to set
                     */
                    function Misbehaviour(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Misbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.client_id = "";

                    /**
                     * Misbehaviour header_1.
                     * @member {ibc.lightclients.tendermint.v1.IHeader|null|undefined} header_1
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.header_1 = null;

                    /**
                     * Misbehaviour header_2.
                     * @member {ibc.lightclients.tendermint.v1.IHeader|null|undefined} header_2
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.header_2 = null;

                    /**
                     * Encodes the specified Misbehaviour message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Misbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.header_1 != null && Object.hasOwnProperty.call(message, "header_1"))
                            $root.ibc.lightclients.tendermint.v1.Header.encode(message.header_1, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.header_2 != null && Object.hasOwnProperty.call(message, "header_2"))
                            $root.ibc.lightclients.tendermint.v1.Header.encode(message.header_2, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Misbehaviour message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.Misbehaviour.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.Misbehaviour();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.header_1 = $root.ibc.lightclients.tendermint.v1.Header.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.header_2 = $root.ibc.lightclients.tendermint.v1.Header.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Misbehaviour message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Misbehaviour.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.header_1 != null && message.hasOwnProperty("header_1")) {
                            let error = $root.ibc.lightclients.tendermint.v1.Header.verify(message.header_1);
                            if (error)
                                return "header_1." + error;
                        }
                        if (message.header_2 != null && message.hasOwnProperty("header_2")) {
                            let error = $root.ibc.lightclients.tendermint.v1.Header.verify(message.header_2);
                            if (error)
                                return "header_2." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Misbehaviour message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.Misbehaviour} Misbehaviour
                     */
                    Misbehaviour.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.Misbehaviour)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.Misbehaviour();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.header_1 != null) {
                            if (typeof object.header_1 !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Misbehaviour.header_1: object expected");
                            message.header_1 = $root.ibc.lightclients.tendermint.v1.Header.fromObject(object.header_1);
                        }
                        if (object.header_2 != null) {
                            if (typeof object.header_2 !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Misbehaviour.header_2: object expected");
                            message.header_2 = $root.ibc.lightclients.tendermint.v1.Header.fromObject(object.header_2);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Misbehaviour message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.Misbehaviour} message Misbehaviour
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Misbehaviour.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.header_1 = null;
                            object.header_2 = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.header_1 != null && message.hasOwnProperty("header_1"))
                            object.header_1 = $root.ibc.lightclients.tendermint.v1.Header.toObject(message.header_1, options);
                        if (message.header_2 != null && message.hasOwnProperty("header_2"))
                            object.header_2 = $root.ibc.lightclients.tendermint.v1.Header.toObject(message.header_2, options);
                        return object;
                    };

                    /**
                     * Converts this Misbehaviour to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Misbehaviour.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Misbehaviour;
                })();

                v1.Header = (function() {

                    /**
                     * Properties of a Header.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IHeader
                     * @property {tendermint.types.ISignedHeader|null} [signed_header] Header signed_header
                     * @property {tendermint.types.IValidatorSet|null} [validator_set] Header validator_set
                     * @property {ibc.core.client.v1.IHeight|null} [trusted_height] Header trusted_height
                     * @property {tendermint.types.IValidatorSet|null} [trusted_validators] Header trusted_validators
                     */

                    /**
                     * Constructs a new Header.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Header.
                     * @implements IHeader
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IHeader=} [properties] Properties to set
                     */
                    function Header(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Header signed_header.
                     * @member {tendermint.types.ISignedHeader|null|undefined} signed_header
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.signed_header = null;

                    /**
                     * Header validator_set.
                     * @member {tendermint.types.IValidatorSet|null|undefined} validator_set
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.validator_set = null;

                    /**
                     * Header trusted_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} trusted_height
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.trusted_height = null;

                    /**
                     * Header trusted_validators.
                     * @member {tendermint.types.IValidatorSet|null|undefined} trusted_validators
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.trusted_validators = null;

                    /**
                     * Encodes the specified Header message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Header.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signed_header != null && Object.hasOwnProperty.call(message, "signed_header"))
                            $root.tendermint.types.SignedHeader.encode(message.signed_header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.validator_set != null && Object.hasOwnProperty.call(message, "validator_set"))
                            $root.tendermint.types.ValidatorSet.encode(message.validator_set, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.trusted_height != null && Object.hasOwnProperty.call(message, "trusted_height"))
                            $root.ibc.core.client.v1.Height.encode(message.trusted_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.trusted_validators != null && Object.hasOwnProperty.call(message, "trusted_validators"))
                            $root.tendermint.types.ValidatorSet.encode(message.trusted_validators, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Header message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.Header.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.Header();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signed_header = $root.tendermint.types.SignedHeader.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.validator_set = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.trusted_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.trusted_validators = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Header message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Header.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signed_header != null && message.hasOwnProperty("signed_header")) {
                            let error = $root.tendermint.types.SignedHeader.verify(message.signed_header);
                            if (error)
                                return "signed_header." + error;
                        }
                        if (message.validator_set != null && message.hasOwnProperty("validator_set")) {
                            let error = $root.tendermint.types.ValidatorSet.verify(message.validator_set);
                            if (error)
                                return "validator_set." + error;
                        }
                        if (message.trusted_height != null && message.hasOwnProperty("trusted_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.trusted_height);
                            if (error)
                                return "trusted_height." + error;
                        }
                        if (message.trusted_validators != null && message.hasOwnProperty("trusted_validators")) {
                            let error = $root.tendermint.types.ValidatorSet.verify(message.trusted_validators);
                            if (error)
                                return "trusted_validators." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Header message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.Header} Header
                     */
                    Header.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.Header)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.Header();
                        if (object.signed_header != null) {
                            if (typeof object.signed_header !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Header.signed_header: object expected");
                            message.signed_header = $root.tendermint.types.SignedHeader.fromObject(object.signed_header);
                        }
                        if (object.validator_set != null) {
                            if (typeof object.validator_set !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Header.validator_set: object expected");
                            message.validator_set = $root.tendermint.types.ValidatorSet.fromObject(object.validator_set);
                        }
                        if (object.trusted_height != null) {
                            if (typeof object.trusted_height !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Header.trusted_height: object expected");
                            message.trusted_height = $root.ibc.core.client.v1.Height.fromObject(object.trusted_height);
                        }
                        if (object.trusted_validators != null) {
                            if (typeof object.trusted_validators !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Header.trusted_validators: object expected");
                            message.trusted_validators = $root.tendermint.types.ValidatorSet.fromObject(object.trusted_validators);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Header message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.Header} message Header
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Header.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.signed_header = null;
                            object.validator_set = null;
                            object.trusted_height = null;
                            object.trusted_validators = null;
                        }
                        if (message.signed_header != null && message.hasOwnProperty("signed_header"))
                            object.signed_header = $root.tendermint.types.SignedHeader.toObject(message.signed_header, options);
                        if (message.validator_set != null && message.hasOwnProperty("validator_set"))
                            object.validator_set = $root.tendermint.types.ValidatorSet.toObject(message.validator_set, options);
                        if (message.trusted_height != null && message.hasOwnProperty("trusted_height"))
                            object.trusted_height = $root.ibc.core.client.v1.Height.toObject(message.trusted_height, options);
                        if (message.trusted_validators != null && message.hasOwnProperty("trusted_validators"))
                            object.trusted_validators = $root.tendermint.types.ValidatorSet.toObject(message.trusted_validators, options);
                        return object;
                    };

                    /**
                     * Converts this Header to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Header.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Header;
                })();

                v1.Fraction = (function() {

                    /**
                     * Properties of a Fraction.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IFraction
                     * @property {Long|null} [numerator] Fraction numerator
                     * @property {Long|null} [denominator] Fraction denominator
                     */

                    /**
                     * Constructs a new Fraction.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Fraction.
                     * @implements IFraction
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IFraction=} [properties] Properties to set
                     */
                    function Fraction(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Fraction numerator.
                     * @member {Long} numerator
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @instance
                     */
                    Fraction.prototype.numerator = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Fraction denominator.
                     * @member {Long} denominator
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @instance
                     */
                    Fraction.prototype.denominator = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified Fraction message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Fraction.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IFraction} message Fraction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Fraction.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.numerator != null && Object.hasOwnProperty.call(message, "numerator"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.numerator);
                        if (message.denominator != null && Object.hasOwnProperty.call(message, "denominator"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.denominator);
                        return writer;
                    };

                    /**
                     * Encodes the specified Fraction message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.Fraction.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IFraction} message Fraction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Fraction.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Fraction message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Fraction} Fraction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Fraction.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.Fraction();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.numerator = reader.uint64();
                                break;
                            case 2:
                                message.denominator = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Fraction message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.Fraction} Fraction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Fraction.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Fraction message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Fraction.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.numerator != null && message.hasOwnProperty("numerator"))
                            if (!$util.isInteger(message.numerator) && !(message.numerator && $util.isInteger(message.numerator.low) && $util.isInteger(message.numerator.high)))
                                return "numerator: integer|Long expected";
                        if (message.denominator != null && message.hasOwnProperty("denominator"))
                            if (!$util.isInteger(message.denominator) && !(message.denominator && $util.isInteger(message.denominator.low) && $util.isInteger(message.denominator.high)))
                                return "denominator: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a Fraction message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.Fraction} Fraction
                     */
                    Fraction.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.Fraction)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.Fraction();
                        if (object.numerator != null)
                            if ($util.Long)
                                (message.numerator = $util.Long.fromValue(object.numerator)).unsigned = true;
                            else if (typeof object.numerator === "string")
                                message.numerator = parseInt(object.numerator, 10);
                            else if (typeof object.numerator === "number")
                                message.numerator = object.numerator;
                            else if (typeof object.numerator === "object")
                                message.numerator = new $util.LongBits(object.numerator.low >>> 0, object.numerator.high >>> 0).toNumber(true);
                        if (object.denominator != null)
                            if ($util.Long)
                                (message.denominator = $util.Long.fromValue(object.denominator)).unsigned = true;
                            else if (typeof object.denominator === "string")
                                message.denominator = parseInt(object.denominator, 10);
                            else if (typeof object.denominator === "number")
                                message.denominator = object.denominator;
                            else if (typeof object.denominator === "object")
                                message.denominator = new $util.LongBits(object.denominator.low >>> 0, object.denominator.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Fraction message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.Fraction} message Fraction
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Fraction.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.numerator = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.numerator = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.denominator = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.denominator = options.longs === String ? "0" : 0;
                        }
                        if (message.numerator != null && message.hasOwnProperty("numerator"))
                            if (typeof message.numerator === "number")
                                object.numerator = options.longs === String ? String(message.numerator) : message.numerator;
                            else
                                object.numerator = options.longs === String ? $util.Long.prototype.toString.call(message.numerator) : options.longs === Number ? new $util.LongBits(message.numerator.low >>> 0, message.numerator.high >>> 0).toNumber(true) : message.numerator;
                        if (message.denominator != null && message.hasOwnProperty("denominator"))
                            if (typeof message.denominator === "number")
                                object.denominator = options.longs === String ? String(message.denominator) : message.denominator;
                            else
                                object.denominator = options.longs === String ? $util.Long.prototype.toString.call(message.denominator) : options.longs === Number ? new $util.LongBits(message.denominator.low >>> 0, message.denominator.high >>> 0).toNumber(true) : message.denominator;
                        return object;
                    };

                    /**
                     * Converts this Fraction to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Fraction.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Fraction;
                })();

                return v1;
            })();

            return tendermint;
        })();

        return lightclients;
    })();

    return ibc;
})();

export { $root as default };
